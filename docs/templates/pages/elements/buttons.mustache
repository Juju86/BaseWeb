<h1>Buttons</h1>

<p>There are four ways you can markup a button. An anchor, button or input element that has a type set to <code>button</code> or <code>submit</code>. BaseWeb styles buttons the same, regardless of the method you use to mark them up.</p>

<pre class="language-markup"><code>&lt;a class=&quot;btn btn-default&quot; href=&quot;#&quot;&gt;Button&lt;/a&gt;
&lt;button class=&quot;btn btn-default&quot; type=&quot;submit&quot;&gt;Button&lt;/button&gt;
&lt;input class=&quot;btn btn-default&quot; type=&quot;button&quot; value=&quot;Button&quot;&gt;
&lt;input class=&quot;btn btn-default&quot; type=&quot;submit&quot; value=&quot;Button&quot;&gt;</code></pre>

<div class="demo">
  <form>
    <div class="form-action">
      <a class="btn btn-default" href="#">Button</a>
      <button class="btn btn-default" type="submit">Button</button>
      <input class="btn btn-default" type="button" value="Button">
      <input class="btn btn-default" type="submit" value="Button">
    </div>
  </form>
</div>

<hr class="docs-hr">

<section class="sub-section sub-section-variables">
<h1>Button Variables</h1>
<p>Button variables are encompassed within the <code>$buttons</code> map and are used throughout all button mixins to set default values.</p>

<ul class="docs-list docs-list-hover">
  <li>
    <code>$buttons('modifier-classes')</code>
    <code class="right value">true</code>
    <span class="block light">Whether or not we should output modifier classes. Set to `false` if you want to use the button modifier mixins semantically and/or reduce CSS output.</span>
  </li>
  <li>
    <code>$buttons('padding-small')</code>
    <code class="right value">0.25em 0.75em</code>
  </li>
  <li>
    <code>$buttons('padding')</code>
    <code class="right value">0.75em 1.5em</code>
  </li>
  <li>
    <code>$buttons('padding-large')</code>
    <code class="right value">1.25em 2em</code>
  </li>
  <li>
    <code>$buttons('font-size')</code>
    <code class="right value">1em</code>
  </li>
  <li>
    <code>$buttons('line-height')</code>
    <code class="right value">1.5em</code>
  </li>
  <li>
    <code>$buttons('color')</code>
    <code class="right value">$color-dark</code>
  </li>
  <li>
    <code>$buttons('color-hover')</code>
    <code class="right value">default</code>
    <span class="block light">When set to default, the hover color will be set to the base button color.</span>
  </li>
  <li>
    <code>$buttons('text-shadow')</code>
    <code class="right value">none</code>
  </li>
  <li>
    <code>$buttons('background')</code>
    <code class="right value">rgba($black, 0.05)</code>
  </li>
  <li>
    <code>$buttons('background-hover')</code>
    <code class="right value">rgba($black, 0.1)</code>
    <span class="block light">The color to use on hover. If set to `lighten` or `darken` it will take the `background` color and lighten or darken it respectively using `background-deg` as the modifier. You can also pass a color to use for hover.</span>
  </li>
  <li>
    <code>$buttons('background-gradient')</code>
    <code class="right value">false</code>
    <span class="block light">Whether or not to use a gradient for button background. If true, the `background` will be used as the start color and darkened for the end color using the `background-deg` as a modifier.</span>
  </li>
  <li>
    <code>$buttons('background-deg')</code>
    <code class="right value">5%</code>
    <span class="block light">The degree that the hover background color or gradient end color is modified.</span>
  </li>
  <li>
    <code>$buttons('background-clip')</code>
    <code class="right value">border-box</code>
  </li>
  
  <li>
    <code>$buttons('border')</code>
    <code class="right value">1px solid rgba($black, 0.15)</code>
  </li>
  <li>
    <code>$buttons('border-hover')</code>
    <code class="right value">1px solid rgba($black, 0.25)</code>
  </li>
  <li>
    <code>$buttons('border-radius')</code>
    <code class="right value">$border-radius</code>
  </li>
</ul>
</section>

<section class="sub-section sub-section-mixins">
<h1>Button Mixins</h1>
<p>Button are common place on the web these days, especially in web applications. Whether you need one, or a dozen button types and styles, BaseWeb provides mixins and classes for creating beautiful buttons to add to your UI toolkit.</p>

<ul class="docs-list">
  
  <li>
    <h2>make-btn-base</h2>
    <p>Creates the base styles for a button modifier mixin or class. Usually applied directly through a base button class, mixin or an extend placeholder. If button modifier classes are enabled, you are provided <code>.btn</code> for your base button class.</p>
    <pre class="language-scss"><code>@mixin make-list-base( $options: () )
// @param $options
//   @type map
//   @default $buttons map</code></pre>
    <h3>Example Usage</h3>
    <p>Using the base table mixin for custom buttons. This example shows us using a <code>%base-btn</code> placeholder for the extend method.</p>
    <pre class="language-scss"><code>%base-btn {
  @include make-btn-base();
}
.btn-purchase {
  @extend %base-btn;
  ...
}
.btn-cart {
  @extend %base-btn;
  ...
}
</code></pre>
  </li>

  <li>
    <h2>make-btn-color</h2>
    <p>Handles all the color variables of a button such as color, background, border and hover state.</p>
    <pre class="language-scss"><code>@mixin make-btn-color( $options: () )
// @param $options
//   @type map
//   @default $buttons map</code></pre>
    
    <h3>Example Usage</h3>
    <p>Use this mixin along with <code>make-btn-base()</code> to create custom semantic button styles. You can pass in a map to replace any of the defaults from the <code>$buttons</code> map.</p>
    <pre class="language-scss"><code>
.btn-custom {
  @include make-btn-base();
  @include make-btn-color((
    'color' : $white,
    'background' : $violet
  ));
}</code></pre>
    <div class="demo demo-buttons">
      <button class="btn-custom">Custom Mixin Button</button>
    </div>
    <p>If you have button class modifiers enabled, BaseWeb will provide you with a set of button classes and semantic aliases ready to use right away.</p>
    <h3>Available Classes</h3>
    <pre class="language-markup"><code>&lt;!-- .btn-default default button class --&gt;
&lt;button class=&quot;btn btn-default&quot;&gt;Default&lt;/button&gt;

&lt;!-- .btn-blue class with .btn-primary semantic alias --&gt;
&lt;button class=&quot;btn btn-blue&quot;&gt;Blue&lt;/button&gt;
&lt;button class=&quot;btn btn-primary&quot;&gt;Primary&lt;/button&gt;

&lt;!-- .btn-green class with .btn-success semantic alias --&gt;
&lt;button class=&quot;btn btn-green&quot;&gt;Green&lt;/button&gt;
&lt;button class=&quot;btn btn-success&quot;&gt;Success&lt;/button&gt;

&lt;!-- .btn-orange class with .btn-warning semantic alias --&gt;
&lt;button class=&quot;btn btn-orange&quot;&gt;Orange&lt;/button&gt;
&lt;button class=&quot;btn btn-warning&quot;&gt;Warning&lt;/button&gt;

&lt;!-- .btn-red class with .btn-danger semantic alias --&gt;
&lt;button class=&quot;btn btn-red&quot;&gt;Red&lt;/button&gt;
&lt;button class=&quot;btn btn-danger&quot;&gt;Danger&lt;/button&gt;

&lt;!-- .btn-black class with .btn-secondary semantic alias --&gt;
&lt;button class=&quot;btn btn-black&quot;&gt;Black&lt;/button&gt;
&lt;button class=&quot;btn btn-secondary&quot;&gt;Secondary&lt;/button&gt;</code></pre>
    <div class="demo demo-buttons">
      <button class="btn btn-default">Default</button>
      <button class="btn btn-primary">Primary Blue</button>
      <button class="btn btn-success">Success Green</button>
      <button class="btn btn-warning">Warning Orange</button>
      <button class="btn btn-danger">Danger Red</button>
      <button class="btn btn-secondary">Secondary Black</button>
    </div>
  </li>

  <li>
    <h2>add-btn-size</h2>
    <p>Handles size variations for buttons. This is done by changing the padding, font-size and line-height based on the parameters passed.</p>
    <pre class="language-scss"><code>@mixin add-btn-size( $size, $option: () )
// @param $size
//   @type small | Large | unit list (pixel, em, percent)
// @param $options
//   @type map
//   @default $buttons map</code></pre>
    <h3>Example Usage</h3>
    <p>The first parameter is a quick way to make a button use the default small or large size set in our <code>$buttons</code> map. Or you can pass in a unit list for custom padding along with a map for setting the font-size and line-height.</p>
    <pre class="language-scss"><code>
// Use default small size
.btn-small {
  @include add-btn-size(small);
}

// Use default large size with custom font size
.btn-custom-large {
  @include add-btn-size(large, (
    'font-size': 20px
  ));
}

// Set a custom button size
.btn-custom-size {
  @include add-btn-size(20px 40px, (
    'font-size': 20px,
    'line-height': 24px
  ));
}
</code></pre>
    <h3>Available Classes</h3>
    <pre class="language-markup"><code>&lt;button class=&quot;btn btn-primary btn-small&quot;&gt;Large Button&lt;/button&gt;
&lt;button class=&quot;btn btn-primary btn-large&quot;&gt;Large Button&lt;/button&gt;</code></pre>
    <div class="demo demo-buttons">
      <button class="btn btn-primary btn-small">Small Button</button>
      <button class="btn btn-primary">Default Button</button>
      <button class="btn btn-primary btn-large">Large Button</button>
    </div>
  </li>
  
  <li>
    <h2>add-btn-block</h2>
    <p>Makes the button block, 100% width with some top and bottom margin. This is typically used for mobile friendly buttons.</p>
    <pre class="language-scss"><code>@mixin add-btn-block( $option: () )
// @param $options
//   @type map
//   @default $buttons map</code></pre>
    <h3>Example Usage</h3>
    <pre class="language-scss"><code>
.btn-custom-mobile {
  @include make-btn-base();
  @include make-btn-color();
  @include add-btn-block();
}
</code></pre>
    <pre class="language-markup"><code>&lt;button class=&quot;btn btn-green btn-block&quot;&gt;Block Button&lt;/button&gt;</code></pre>
    <div class="demo">
      <p>
        <a class="btn-custom-mobile" href="#" role="button">Block Button</a>
      </p>
      <p>
        <a class="btn btn-green btn-block" href="#" role="button">Block Button</a>
      </p>
    </div>
  </li>

</ul>
</section>
