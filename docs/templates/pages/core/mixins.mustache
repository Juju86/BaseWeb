<h1 class="docs-header">Mixins</h1>
<p>Global mixins for our framework. These mixins don't apply specifically to a single element/block but are used throughout.</p>

<ul class="docs-list">
  
  <li>
    <h2 class="docs-header">clearfix</h2>
    <p>Allows you to apply a clearfix to an element that contains floats.</p>
<pre class="docs-code"><code class="name">@mixin clearfix()</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.wrapper {
  @include clearfix;
}

// CSS
.wrapper:after {
  content: "";
  display: table;
  clear: both;
}</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">remove-clearfix</h2>
    <p>Removes the clearfix styles from an element.</p>
    <pre class="docs-code"><code class="name">@mixin remove-clearfix()</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">size</h2>
    <p>Shorthand for adding width and height dimensions to an element. If you only pass in a width, the height will be set to equal the width and create a square. If either the width or height are unit-less, it defaults to pixels.</p>
<pre class="docs-code"><code class="name">@mixin size( $height, $width )</code><code class="desc">@param $width
  @type unit (number, pixel, percentage)
@param $height
  @type unit (number, pixel, percentage, false)
  @default false -> $width</code></pre>
  </li>

  <li>
    <h2 class="docs-header">vertical-center</h2>
    <p>Centers an element vertically within it's parent. Parent element may need to have transform-style set to `preserve-3d` in order to prevent half pixel bluring.</p>
<pre class="docs-code"><code class="name">@mixin vertical-center()</code></pre>
    <h3 class="docs-header">Example Usage</h3>
    <pre><code>// SCSS
.vertical-center {
  @include vertical-center();
}

// CSS
.vertical-center {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}</code></pre>

    <div class="demo demo-vertical-center">
      <div class="vertical-center"></div>
    </div>
  </li>
  
  <li>
    <h2 class="docs-header">scrollable</h2>
    <p>Makes things scrollable in a sexy way.</p>
<pre class="docs-code"><code class="name">@mixin scrollable()</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">box-sizing</h2>
    <p>The box-sizing CSS property is used to alter the default CSS box model used to calculate widths and heights of elements.</p>
<pre class="docs-code"><code class="name">@mixin box-sizing( $box-sizing )</code><code class="desc">@param $box-sizing
  @type box-sizing value (content-box, padding-box, border-box, inherit)
  @default $box-sizing</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">box-shadow</h2>
    <p>The box-shadow CSS property describes one or more shadow effects as a comma-separated list.</p>
<pre class="docs-code"><code class="name">@mixin box-shadow( $shadow... )</code><code class="desc">@param $shadow
  @type box-shadow value ([horizontal offset] [vertical offset] [blur radius] [spread radius] [color])
  @default $box-shadow</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">border-radius</h2>
    <p>The border-radius CSS property allows you to define how rounded border corners are.</p>
<pre class="docs-code"><code class="name">@mixin border-radius( $radius )</code><code class="desc">@param $radius
  @type unit (pixel, percent)</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.box-1 {
  @include border-radius();
}
.box-2 {
  @include border-radius-left(20px);
}
.box-3 {
  @include border-radius-top(50%);
}

// CSS
.box-1 {
  border-radius: 3px;
}
.box-2 {
  border-top-left-radius: 20px;
  border-bottom-left-radius: 20px;
}
.box-3 {
  border-top-left-radius: 50%;
  border-top-right-radius: 50%;
}</code></pre>
    <ul class="docs-list docs-list-hover">
      <li class="title">Available Mixins</li>
      <li><code>border-radius()</code> <span class="right demo-border-radius mixin-border-radius"></span></li>

      <li><code>border-radius-top()</code> <span class="right demo-border-radius mixin-border-radius-top"></span></li>
      <li><code>border-radius-top-left()</code> <span class="right demo-border-radius mixin-border-radius-top-left"></span></li>
      <li><code>border-radius-top-right()</code> <span class="right demo-border-radius mixin-border-radius-top-right"></span></li>

      <li><code>border-radius-bottom()</code> <span class="right demo-border-radius mixin-border-radius-bottom"></span></li>
      <li><code>border-radius-bottom-left()</code> <span class="right demo-border-radius mixin-border-radius-bottom-left"></span></li>
      <li><code>border-radius-bottom-right()</code> <span class="right demo-border-radius mixin-border-radius-bottom-right"></span></li>

      <li><code>border-radius-left()</code> <span class="right demo-border-radius mixin-border-radius-left"></span></li>
      <li><code>border-radius-left-top()</code> <span class="right demo-border-radius mixin-border-radius-left-top"></span></li>
      <li><code>border-radius-left-bottom()</code> <span class="right demo-border-radius mixin-border-radius-left-bottom"></span></li>

      <li><code>border-radius-right()</code> <span class="right demo-border-radius mixin-border-radius-right"></span></li>
      <li><code>border-radius-right-top()</code> <span class="right demo-border-radius mixin-border-radius-right-top"></span></li>
      <li><code>border-radius-right-bottom()</code> <span class="right demo-border-radius mixin-border-radius-right-bottom"></span></li>
      <li class="desc"><em>For the examples above, I'm passing in a radius of <code>50%</code> so the effect is more obvious.</em></li>
    </ul>
  </li>
  
  <li>
    <h2 class="docs-header">transform</h2>
    <p>The CSS transform property lets you modify the coordinate space of the CSS visual formatting model.</p>
<pre class="docs-code"><code class="name">@mixin transform( $function... )</code><code class="desc">@param $function
  @type transform-function ([matrix] [perspective] [rotate] [scale] [skew] [translate])</code></pre>
    <ul class="docs-list docs-list-hover">
      <li class="title">Transform Functions</li>
      <li><code>matrix()</code></li>
      <li><code>perspective()</code></li>
      <li><code>rotate()</code></li>
      <li><code>scale()</code></li>
      <li><code>skew()</code></li>
      <li><code>translate()</code></li>
      <li class="desc"><em>This is not a comprehensive list of transform functions. For a full list of transform functions, please see the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function">CSS documentation at MDN</a>.</em></li>
    </ul>
  </li>
  
  <li>
    <h2 class="docs-header">transform-style</h2>
    <p>The transform-style CSS property determines if the children of the element are positioned in the 3D-space or are flattened in the plane of the element.</p>
<pre class="docs-code"><code class="name">@mixin transform-style( $style... )</code><code class="desc">@param $style
  @type transform style (flat, preserve-3d, inherit)</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">rotate</h2>
    <p>Adds transform rotate styles using a passed in degree and the transform mixin.</p>
<pre class="docs-code"><code class="name">@mixin rotate( $deg )</code><code class="desc">@dependency mixin transform()
@param $deg
  @type unit (degree)</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.demo-rotate {
  @include rotate(45deg);
}

// CSS
.demo-rotate {
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
}
</code></pre>
    <div class="demo">
      <div class="demo-example demo-rotate"></div>
    </div>
  </li>
  
  <li>
    <h2 class="docs-header">transition</h2>
    <p>The CSS transition property is a shorthand property for transition-property, transition-duration, transition-timing-function, and transition-delay. It allows to define the transition between two states of an element. Different states may be defined using pseudo-classes like :hover or :active or dynamically set using JavaScript.</p>
<pre class="docs-code"><code class="name">@mixin transition( $transition... )</code><code class="desc">@param $transition
  @type transition value ([transition-property] [transition-duration] [transition-timing-function] [transition-delay])
  @default $transition</code></pre>
    
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.demo-transition {
  background-color: $blue-green-darker;
  @include transition();
}
.demo-transition:hover {
  background-color: $red-violet;
}

// CSS
.demo-transition {
  background-color: #3da96d;
  -webkit-transition: all 0.25s linear;
  transition: all 0.25s linear;
}
.demo-transition:hover {
  background-color: #d25992;
}
</code></pre>
    <div class="demo">
      <div class="demo-example demo-transition"></div>
    </div>
    <h3 class="docs-header">Available Mixins</h3>
    <pre class="docs-code"><code class="name">@mixin transition-property( $transition-property )</code><code class="desc">@param $transition-property
  @type property name
  @default $transition-property</code></pre>
    <pre class="docs-code"><code class="name">@mixin transition-duration( $transition-duration )</code><code class="desc">@param $transition-duration
  @type time value (seconds, milliseconds)
  @default $transition-duration</code></pre>
    <pre class="docs-code"><code class="name">@mixin transition-timing-function( $transition-timing-function )</code><code class="desc">@param $transition-timing-function
  @type timing function (linear, ease, ease-in, ease-out, ease-in-out, step-start, step-end)
  @default $transition-timing-function</code></pre>
    <pre class="docs-code"><code class="name">@mixin transition-delay( $transition-delay )</code><code class="desc">@param $transition-delay
  @type time value (seconds, milliseconds)
  @default $transition-delay</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">keyframes</h2>
    <p>The @keyframes CSS at-rule lets you control the intermediate steps in a CSS animation sequence by establishing keyframes (or waypoints) along the animation sequence that must be reached by certain points during the animation.</p>
<pre class="docs-code"><code class="name">@mixin keyframes( $name )</code><code class="desc">@param $name
  @type animation name
@param @content (passed in brackets)
  @type style block</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
@include keyframes('example') {
  0%   { background-color: $red; }
  100% { background-color: $blue; }
}

// CSS
@-webkit-keyframes example {
  0% {
    background-color: #de5151;
  }
  100% {
    background-color: #2ab0ea;
  }
}
@keyframes example {
  0% {
    background-color: #de5151;
  }
  100% {
    background-color: #2ab0ea;
  }
}
</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">animation</h2>
    <p>The animation CSS property is a shorthand property for animation-name, animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode and animation-play-state.</p>
<pre class="docs-code"><code class="name">@mixin animation( $animation... )</code><code class="desc">@param $animation
  @type animation value ([animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-direction] [animation-fill-mode] [animation-play-state])</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.demo-animation {
  ...
  @include animation(example 10s linear 1s infinite normal);
}

// CSS
.demo-animation {
  ...
  -webkit-animation: example 10s linear 1s infinite normal;
  animation: example 10s linear 1s infinite normal;
}
</code></pre>
    <div class="demo">
      <div class="demo-example demo-animation"></div>
    </div>
    <h3 class="docs-header">Available Mixins</h3>
    <pre class="docs-code"><code class="name">@mixin animation-name( $name... )</code><code class="desc">@param $name
  @type animation name</code></pre>
    <pre class="docs-code"><code class="name">@mixin animation-duration( $duration... )</code><code class="desc">@param $duration
  @type time value (seconds, milliseconds)</code></pre>
    <pre class="docs-code"><code class="name">@mixin animation-timing-function( $timing-function... )</code><code class="desc">@param $timing-function
  @type timing function (linear, ease, ease-in, ease-out, ease-in-out)</code></pre>
    <pre class="docs-code"><code class="name">@mixin animation-delay( $delay... )</code><code class="desc">@param $delay
  @type time value (seconds, milliseconds)</code></pre>
    <pre class="docs-code"><code class="name">@mixin animation-iteration-count( $iteration-count... )</code><code class="desc">@param $iteration-count
  @type unit (number, infinite)</code></pre>
    <pre class="docs-code"><code class="name">@mixin animation-direction( $direction... )</code><code class="desc">@param $direction
  @type direction (normal, reverse, alternate, alternate-reverse)</code></pre>
    <pre class="docs-code"><code class="name">@mixin animation-fill-mode( $fill-mode... )</code><code class="desc">@param $fill-mode
  @type fill mode (none, forwards, backwards, both, initial, inherit)</code></pre>
    <pre class="docs-code"><code class="name">@mixin animation-play-stay( $play-stay... )</code><code class="desc">@param $play-stay
  @type play state (running, paused)</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">linear-gradient</h2>
    <p>Creates an image which represents a linear gradient of colors.</p>
<pre class="docs-code"><code class="name">@mixin linear-gradient( $gradient... )</code><code class="desc">@param $gradient
  @type gradient ([side-or-corner] [angle] [color-stop])</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.demo-linear-gradient {
  @include linear-gradient(left, $green, $blue, $violet);
}

// CSS
.demo-linear-gradient {
  background-image: -webkit-linear-gradient(left, #8ecb25, #2ab0ea, #bc6bd3);
  background-image: -moz-linear-gradient(left, #8ecb25, #2ab0ea, #bc6bd3);
  background-image: -ms-linear-gradient(left, #8ecb25, #2ab0ea, #bc6bd3);
  background-image: linear-gradient(left, #8ecb25, #2ab0ea, #bc6bd3);
}
</code></pre>
    <div class="demo">
      <div class="demo-example demo-linear-gradient"></div>
    </div>
  </li>
  
  <li>
    <h2 class="docs-header">radial-gradient</h2>
    <p>Creates an image which represents a gradient of colors radiating from an origin, the center of the gradient.</p>
<pre class="docs-code"><code class="name">@mixin radial-gradient( $gradient... )</code><code class="desc">@param $gradient
  @type gradient ([position] [shape] [size] [color-stop] [color-stop] [extent-keyword])</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.demo-radial-gradient {
  @include radial-gradient(circle, $violet, $violet-darker);
}

// CSS
.demo-radial-gradient {
  background-image: -webkit-radial-gradient(circle, #bc6bd3, #aa44c7);
  background-image: -moz-radial-gradient(circle, #bc6bd3, #aa44c7);
  background-image: -ms-radial-gradient(circle, #bc6bd3, #aa44c7);
  background-image: radial-gradient(circle, #bc6bd3, #aa44c7);
}
</code></pre>
    <div class="demo">
      <div class="demo-example demo-radial-gradient"></div>
    </div>
  </li>
  
  <li>
    <h2 class="docs-header">text-hide</h2>
    <p>Image replacement trick that hides text.</p>
<pre class="docs-code"><code class="name">@mixin text-hide()</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.logo-image {
  @include text-hide();
}

// CSS
.logo-image {
  font-size: 0;
  line-height: 0;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}
</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">text-truncate</h2>
    <p>Truncates text with an ellipsis. Element applied must be block or inline-block.</p>
<pre class="docs-code"><code class="name">@mixin text-truncate()</code><code class="desc">@param $display
  @type display property (block, inline-block)
  @default block</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.demo-text-truncate {
  @include text-truncate();
}

// CSS
.demo-text-truncate {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
</code></pre>
    <div class="demo">
      <div class="demo-text-truncate">This is some text that will get truncated</div>
    </div>
  </li>
  
  <li>
    <h2 class="docs-header">triangle</h2>
    <p>Uses the <code>0 * 0</code> element with borders trick to draw arrows. The base styles for creating CSS triangles can be used with <code>%triangle</code> as placeholder or you can have it applied directly to your triangle element.</p>
<pre class="docs-code"><code class="name">@mixin triangle-base()</code></pre>
<pre class="docs-code"><code class="name">@mixin triangle( $size, $color, $direction, $base )</code><code class="desc">@param $size
  @type unit (pixel, em, rem)
@param $color
  @type color
@param $direction
  @type string ('up', 'right', 'down', 'left', 'up-right', 'up-left', 'down-right', 'down-left')
  @desc The direction that the triangle will point.
@param $base
  @type boolean (true, false)
  @default false
  @desc whether or not triangle base styles are applied individually or extended to the placeholder `%triangle`</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
%triangle {
  @include triangle-base;
}
.example-triangle-1 {
  @include triangle( 14px, $blue-darker, 'left' );
}
.example-triangle-2 {
  @include triangle( 14px, $blue-violet-darker, 'down' );
}
.example-triangle-3 {
  @include triangle( 14px, $violet-darker, 'right' );
}

// CSS
.example-triangle-1,
.example-triangle-2,
.example-triangle-3 {
  content: "";
  display: inline-block;
  width: 0;
  height: 0;
  border: 0 none;
  border-style: solid;
  border-color: transparent;
}
.example-triangle-1 {
  border-width: 14px 14px 14px 0;
  border-right-color: #1495cd;
}
.example-triangle-2 {
  border-width: 14px 14px 0 14px;
  border-top-color: #4469da;
}
.example-triangle-3 {
  border-width: 14px 0 14px 14px;
  border-left-color: #aa44c7;
}
</code></pre>
    <div class="demo demo-triangle">
      <div class="col col-4"><span class="example-triangle-1"></span></div>
      <div class="col col-4"><span class="example-triangle-2"></span></div>
      <div class="col col-4"><span class="example-triangle-3"></span></div>
    </div>
  </li>
  
</ul>
