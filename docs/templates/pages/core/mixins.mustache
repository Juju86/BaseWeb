<h1 class="docs-header">Mixins</h1>
<p>Global mixins for our framework. These mixins don't apply specifically to a single element/block but are used throughout.</p>

<ul class="mixins">
  
  <li>
    <h2 class="docs-header">size</h2>
    <p>Shorthand for adding width and height dimensions to an element. If you only pass in a width, the height will be set to equal the width and create a square. If either the width or height are unit-less, it defaults to pixels.</p>
<pre class="mixin"><code class="mixin-name">@mixin size( $height, $width )</code><code class="mixin-desc">@param $width
  @type unit (number, pixel, percentage)
@param $height
  @type unit (number, pixel, percentage, false)
  @default false -> $width</code></pre>
  </li>

  <li>
    <h2 class="docs-header">clearfix</h2>
    <p>Allows you to apply a clearfix to an element that contains floats.</p>
<pre class="mixin"><code class="mixin-name">@mixin clearfix()</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.wrapper {
  @include clearfix;
}

// CSS
.wrapper:after {
  content: "";
  display: table;
  clear: both;
}</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">remove-clearfix</h2>
    <p>Removes the clearfix styles from an element.</p>
<pre class="mixin"><code class="mixin-name">@mixin remove-clearfix()</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">scrollable</h2>
    <p>Makes things scrollable in a sexy way.</p>
<pre class="mixin"><code class="mixin-name">@mixin scrollable()</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">box-sizing</h2>
    <p>Adds box sizing styles.</p>
<pre class="mixin"><code class="mixin-name">@mixin box-sizing( $box-sizing )</code><code class="mixin-desc">@param $box-sizing
  @type box-sizing value (border-box, none)
  @default $box-sizing</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">box-shadow</h2>
    <p>Adds box shadow styles.</p>
<pre class="mixin"><code class="mixin-name">@mixin box-shadow( $shadow... )</code><code class="mixin-desc">@param $shadow
  @type box-shadow value ([horizontal offset] [vertical offset] [blur radius] [spread radius] [color])
  @default $box-shadow</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">border-radius</h2>
    <p>Adds border radius styles.</p>
<pre class="mixin"><code class="mixin-name">@mixin border-radius( $radius )</code><code class="mixin-desc">@param $radius
  @type unit (pixel, percent)</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.box-1 {
  @include border-radius();
}
.box-2 {
  @include border-radius-left(20px);
}
.box-3 {
  @include border-radius-top(50%);
}

// CSS
.box-1 {
  border-radius: 3px;
}
.box-2 {
  border-top-left-radius: 20px;
  border-bottom-left-radius: 20px;
}
.box-3 {
  border-top-left-radius: 50%;
  border-top-right-radius: 50%;
}</code></pre>
    <ul class="mixins-listing">
      <li class="title">Available Mixins</li>
      <li><code>@mixin border-radius()</code> <span class="mixin-demo mixin-border-radius"></span></li>

      <li><code>@mixin border-radius-top()</code> <span class="mixin-demo mixin-border-radius-top"></span></li>
      <li><code>@mixin border-radius-top-left()</code> <span class="mixin-demo mixin-border-radius-top-left"></span></li>
      <li><code>@mixin border-radius-top-right()</code> <span class="mixin-demo mixin-border-radius-top-right"></span></li>

      <li><code>@mixin border-radius-bottom()</code> <span class="mixin-demo mixin-border-radius-bottom"></span></li>
      <li><code>@mixin border-radius-bottom-left()</code> <span class="mixin-demo mixin-border-radius-bottom-left"></span></li>
      <li><code>@mixin border-radius-bottom-right()</code> <span class="mixin-demo mixin-border-radius-bottom-right"></span></li>

      <li><code>@mixin border-radius-left()</code> <span class="mixin-demo mixin-border-radius-left"></span></li>
      <li><code>@mixin border-radius-left-top()</code> <span class="mixin-demo mixin-border-radius-left-top"></span></li>
      <li><code>@mixin border-radius-left-bottom()</code> <span class="mixin-demo mixin-border-radius-left-bottom"></span></li>

      <li><code>@mixin border-radius-right()</code> <span class="mixin-demo mixin-border-radius-right"></span></li>
      <li><code>@mixin border-radius-right-top()</code> <span class="mixin-demo mixin-border-radius-right-top"></span></li>
      <li><code>@mixin border-radius-right-bottom()</code> <span class="mixin-demo mixin-border-radius-right-bottom"></span></li>
      <li class="desc"><p><em>For the examples above, I'm passing in a radius of <code>50%</code> so the effect is more obvious.</em></p></li>
    </ul>
  </li>
  
  <li>
    <h2 class="docs-header">rotate</h2>
    <p>Adds transform rotate styles.</p>
<pre class="mixin"><code class="mixin-name">@mixin rotate( $deg )</code><code class="mixin-desc">@param $deg
  @type unit (degree)</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.box-rotate {
  @include rotate(45deg);
}

// CSS
.box-rotate {
  -webkit-transform: rotate(45deg);
  -ms-transform: rotate(45deg);
  transform: rotate(45deg);
}
</code></pre>
    <div class="demo">
      <div class="demo-box box-rotate"></div>
    </div>
  </li>
  
  <li>
    <h2 class="docs-header">transition</h2>
    <p>Adds transition styles.</p>
<pre class="mixin"><code class="mixin-name">@mixin transition( $transition... )</code><code class="mixin-desc">@param $transition
  @type transition value ([transition-property] [transition-duration] [transition-timing-function] [transition-delay])
  @default $transition</code></pre>
    
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.box-transition {
  background-color: $blue-green-darker;
  @include transition();
}
.box-transition:hover {
  background-color: $red-violet;
}

// CSS
.box-transition {
  background-color: #3da96d;
  -webkit-transition: all 0.25s linear;
  transition: all 0.25s linear;
}
.box-transition:hover {
  background-color: #d25992;
}
</code></pre>
    <div class="demo">
      <div class="demo-box box-transition"></div>
    </div>
    <h3 class="docs-header">Available Mixins</h3>
    <pre class="mixin"><code class="mixin-name">@mixin transition-property( $transition-property )</code><code class="mixin-desc">@param $transition-property
  @type property name
  @default $transition-property</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin transition-duration( $transition-duration )</code><code class="mixin-desc">@param $transition-duration
  @type time value (seconds, milliseconds)
  @default $transition-duration</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin transition-timing-function( $transition-timing-function )</code><code class="mixin-desc">@param $transition-timing-function
  @type timing function (linear, ease, ease-in, ease-out, ease-in-out, step-start, step-end)
  @default $transition-timing-function</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin transition-delay( $transition-delay )</code><code class="mixin-desc">@param $transition-delay
  @type time value (seconds, milliseconds)
  @default $transition-delay</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">keyframes</h2>
    <p>Define keyframes.</p>
<pre class="mixin"><code class="mixin-name">@mixin keyframes( $name )</code><code class="mixin-desc">@param $name
  @type animation name
@param @content (passed in brackets)
  @type style block</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
@include keyframes('example') {
  0%   { background-color: $red; }
  100% { background-color: $blue; }
}

// CSS
@-webkit-keyframes example {
  0% {
    background-color: #de5151;
  }
  100% {
    background-color: #2ab0ea;
  }
}
@keyframes example {
  0% {
    background-color: #de5151;
  }
  100% {
    background-color: #2ab0ea;
  }
}
</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">animation</h2>
    <p>Adds animation styles.</p>
<pre class="mixin"><code class="mixin-name">@mixin animation( $animation... )</code><code class="mixin-desc">@param $animation
  @type animation value ([animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-direction])</code></pre>
    <h3 class="docs-header">Example Usage</h3>
<pre><code>// SCSS
.box-animation {
  ...
  @include animation(example 10s linear 1s infinite normal);
}

// CSS
.box-animation {
  ...
  -webkit-animation: example 10s linear 1s infinite normal;
  animation: example 10s linear 1s infinite normal;
}
</code></pre>
    <div class="demo">
      <div class="demo-box box-animation"></div>
    </div>
    <h3 class="docs-header">Available Mixins</h3>
    <pre class="mixin"><code class="mixin-name">@mixin animation-name( $name... )</code><code class="mixin-desc">@param $name
  @type animation name</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin animation-duration( $duration... )</code><code class="mixin-desc">@param $duration
  @type time value (seconds, milliseconds)</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin animation-timing-function( $timing-function... )</code><code class="mixin-desc">@param $timing-function
  @type timing function (linear, ease, ease-in, ease-out, ease-in-out)</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin animation-delay( $delay... )</code><code class="mixin-desc">@param $delay
  @type time value (seconds, milliseconds)</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin animation-iteration-count( $iteration-count... )</code><code class="mixin-desc">@param $iteration-count
  @type unit (number, infinite)</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin animation-direction( $direction... )</code><code class="mixin-desc">@param $direction
  @type direction (normal, reverse, alternate, alternate-reverse)</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin animation-play-stay( $play-stay... )</code><code class="mixin-desc">@param $play-stay
  @type play state (running, paused)</code></pre>
    <pre class="mixin"><code class="mixin-name">@mixin animation-fill-mode( $fill-mode... )</code><code class="mixin-desc">@param $fill-mode
  @type fill mode (none, forwards, backwards, both, initial, inherit)</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">gradient-horizontal</h2>
    <p>Creates a horizontal gradient.</p>
<pre class="mixin"><code class="mixin-name">@mixin gradient-horizontal( $gs, $ge )</code><code class="mixin-desc">@param $gs
  @type color
  @default $gradient-start
@param $ge
  @type color
  @default $gradient-end</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">gradient-vertical</h2>
    <p>Creates a vertical gradient.</p>
<pre class="mixin"><code class="mixin-name">@mixin gradient-vertical( $gs, $ge )</code><code class="mixin-desc">@param $gs
  @type color
  @default $gradient-start
@param $ge
  @type color
  @default $gradient-end</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">gradient-directional</h2>
    <p>Creates a directional gradient.</p>
<pre class="mixin"><code class="mixin-name">@mixin gradient-directional( $gs, $ge, $deg )</code><code class="mixin-desc">@param $gs
  @type color
  @default $gradient-start
@param $ge
  @type color
  @default $gradient-end
@param $deg
  @type unit (degree)
  @default $gradient-deg</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">gradient-horizontal-three-colors</h2>
    <p>Creates a horizontal gradient using three colors.</p>
<pre class="mixin"><code class="mixin-name">@mixin gradient-horizontal-three-colors( $gs, $gm, $ge, $stop )</code><code class="mixin-desc">@param $gs
  @type color
  @default $gradient-start
@param $gm
  @type color
  @default $gradient-middle
@param $ge
  @type color
  @default $gradient-end
@param $stop
  @type unit (pixel, percentage)
  @default $gradient-stop</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">gradient-vertical-three-colors</h2>
    <p>Creates a vertical gradient using three colors.</p>
<pre class="mixin"><code class="mixin-name">@mixin gradient-vertical-three-colors( $gs, $gm, $ge, $stop )</code><code class="mixin-desc">@param $gs
  @type color
  @default $gradient-start
@param $gm
  @type color
  @default $gradient-middle
@param $ge
  @type color
  @default $gradient-end
@param $stop
  @type unit (pixel, percentage)
  @default $gradient-stop</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">gradient-directional-three-colors</h2>
    <p>Creates a directional gradient using three colors.</p>
<pre class="mixin"><code class="mixin-name">@mixin gradient-directional-three-colors( $gs, $gm, $ge, $deg, $stop )</code><code class="mixin-desc">@param $gs
  @type color
  @default $gradient-start
@param $gm
  @type color
  @default $gradient-middle
@param $ge
  @type color
  @default $gradient-end
@param $deg
  @type unit (degree)
  @default $gradient-deg
@param $stop
  @type unit (pixel, percentage)
  @default $gradient-stop</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">gradient-radial</h2>
    <p>Creates a radial gradient.</p>
<pre class="mixin"><code class="mixin-name">@mixin gradient-radial( $gs, $ge )</code><code class="mixin-desc">@param $gs
  @type color
  @default $gradient-start
@param $ge
  @type color
  @default $gradient-end</code></pre>
  </li>
  
</ul>

<!--

-->
