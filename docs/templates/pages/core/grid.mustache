<h1 class="docs-header">Grid System</h1>
<p>BaseWeb is built with a very flexible grid system. Out of the box, you can use the default classes and settings to have a basic twelve column flexible grid. The basic things to know when using the base grid system is the markup structure.</p>

<div class="demo-grid">
  <div class="row">
    <div class="col col-4"><p>.col-4</p></div>
    <div class="col col-4"><p>.col-4</p></div>
    <div class="col col-4"><p>.col-4</p></div>
  </div>
  <div class="row">
    <div class="col col-6"><p>.col-6</p></div>
    <div class="col col-6"><p>.col-6</p></div>
  </div>
  <div class="row">
    <div class="col col-12"><p>.col-12</p></div>
  </div>
</div>

<pre class="language-markup"><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-4&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col col-4&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col col-4&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-6&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
    &lt;div class=&quot;col col-6&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-12&quot;&gt;&lt;p&gt;...&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>

<p>The class based grid system is generated using: <code>build-grid-system()</code>. By default it's going to generate all the classes for the container, row and columns based on the grid variables. You can also pass in a map to override any default grid map settings based on different media breakpoints.</p>
  
<p>You can also set the grid type by passing a non-map parameter <code>build-grid-system(mobile)</code> which will make columns staked at 100% width.</p>

<pre class="language-scss"><code>@include build-grid-system(mobile);

@include media-min('tablet') {
  @include build-grid-system(('total-width': 740px));
}

@include media-min('desktop') {
  @include build-grid-system(('total-width': 960px));
}</code></pre>

<h2 class="docs-header">Modifier Classes</h2>

<p>There are also a number of classes that can be used to modify specific grid elements without changing the base grid behavior. These are called modifier classes and are used in conjunction with the base grid element classes.</p>

<table class="docs-table">
  <tr>
    <th colspan="2">Container Modifiers</th>
  </tr>
  <tr>
    <td><code>.container-left</code></td>
    <td>Floats container to the left</td>
  </tr>
  <tr>
    <td><code>.container-right</code></td>
    <td>Floats container to the right</td>
  </tr>
  <tr>
    <td><code>.container-no-margin</code></td>
    <td>Removes margins from the container</td>
  </tr>
  <tr>
    <td><code>.container-no-padding</code></td>
    <td>Removes padding from the container</td>
  </tr>
  <tr>
    <th colspan="2">Column Modifiers</th>
  </tr>
  <tr>
    <td><code>.col-left</code></td>
    <td>Floats column to the left</td>
  </tr>
  <tr>
    <td><code>.col-right</code></td>
    <td>Floats column to the right</td>
  </tr>
  <tr>
    <td><code>.col-no-gutter</code></td>
    <td>Removes margin gutter from the column</td>
  </tr>
  <tr>
    <td><code>.col-no-inner-gutter</code></td>
    <td>Removes padding gutter from the column</td>
  </tr>
  <tr>
    <td><code>.prefix-#</code></td>
    <td>Adds column spacing before the element where # represents the number of columns to span</td>
  </tr>
  <tr>
    <td><code>.suffix-#</code></td>
    <td>Adds column spacing after the element where # represents the number of columns to span</td>
  </tr>
</table>

<h2 class="docs-header">Semantic Grids</h2>

<p>The BaseWeb grid system also supports the use of semantic grids. That means you can define a grid without having to use grid classes and instead use mixins to define grid elements directly in your stylesheets.</p>

<pre class="language-scss"><code>.wrapper {
  @include make-container();
  
  .content {
    @include make-row();
    
    .aside {
      @include make-column(4);
    }
    .article {
      @include make-column(8);
    }
  }
}</code></pre>

<p>There are also a set of functions that you can use for setting column and spacing widths. These can be used along with <code>make-column-base()</code> to define multiple columns and set the widths separately to reduce the final CSS output.</p>

<pre class="language-scss"><code>.wrapper {
  @include make-container();
  
  .content {
    @include make-row();
    
    .aside,
    .article {
      @include make-column-base();
    }
    .aside {
      width: column-width(4);
    }
    .article {
      width: column-width(6);
      margin-left: spacing-width(2);
    }
  }
}</code></pre>

<h2 class="docs-header">Prefix and Suffix</h2>

<p>You can also create spacing on columns using the prefix and suffix modifiers. These classes are used by adding the prefix and suffix class with the appropriate amount of column spacing you want to be added before or after a column.</p>

<pre class="language-markup"><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-4 suffix-3&quot;&gt;...&lt;/div&gt;
    &lt;div class=&quot;col col-3 prefix-2&quot;&gt;...&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-5 prefix-4 suffix-3&quot;&gt;...&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>

<p>The semantic grid system equivalent would look like this:</p>

<pre class="language-scss"><code>.aside {
  @include make-column(3);
  @include give-prefix(2);
}
.article {
  @include make-column(6);
  @include give-suffix(1);
}</code></pre>

<h2 class="docs-header">Nested Columns</h2>

<p>You can created nested columns in your grid system by adding a new row element inside a column. It's important to note that the first element inside a row should always be a column. Otherwise, you'll need to either manually remove the gutter margin or use the <code>.col-no-gutter</code> modifier class.</p>

<p>When using a fluid grid (percent based) the sum of columns in a row must equal the total column value <code>$grid('columns')</code>. But when using a fixed grid (pixel based), the sum must equal the column span of it's parent column element. If you want to mix fixed and fluid grids between breakpoints, it's recommended to use the semantic grid method.</p>

<pre class="language-markup"><code>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-6&quot;&gt;
      ...
      &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col col-6&quot;&gt;...&lt;/div&gt;
        &lt;div class=&quot;col col-6&quot;&gt;...&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col col-6&quot;&gt;
      ...
      &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
        &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
        &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>

<hr class="docs-hr">

<section class="sub-section sub-section-functions">
<h1 class="docs-header">Grid Functions</h1>
<p>These functions are used to calculate specific grid maths such as the width a set number of columns should span. These are used within grid mixins and are often used when defining semantic grid systems.</p>

<ul class="docs-list">
  
  <li>
    <h2 class="docs-header">column-width</h2>
    <p>A function that returns the width of a column span.</p>
    <pre class="language-scss"><code>@function column-width( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column span you want returned.
// @param $options
//   @type map
//   @default $grid map
// @return unit (pixel, percentage)</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">spacing-width</h2>
    <p>A function that returns the spacing of a column span.</p>
    <pre class="language-scss"><code>@function spacing-width( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column spacing you want returned.
// @param $options
//   @type map
//   @default $grid map
// @return unit (pixel, percentage)</code></pre>
  </li>

</ul>
</section>

<section class="sub-section sub-section-mixins">
<h1 class="docs-header">Grid Mixins</h1>
<p>These mixins are used to output styles that define a grid system's components. Such as grid containers, rows and columns as well as modifier classes like prefix and suffix spacing. They are also used for outputting the class based grid system.</p>

<ul class="docs-list">
  
  <li>
    <h2 class="docs-header">make-container</h2>
    <p>Outputs all the styles needed to make an element a grid container.</p>
    <pre class="language-scss"><code>@mixin make-container( $options: () )
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">make-row</h2>
    <p>Outputs all the styles needed to make an element a grid row.</p>
    <pre class="language-scss"><code>@mixin make-row( $options: () )
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">make-column-base</h2>
    <p>Creates the base styles for a column but excludes setting the width.</p>
    <pre class="language-scss"><code>@mixin make-column-base( $options: () )
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">make-column</h2>
    <p>Creates all the styles for a column and sets its width.</p>
    <pre class="language-scss"><code>@mixin make-column( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column span you want set.
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">give-prefix</h2>
    <p>Creates the base styles for a column and sets its width.</p>
    <pre class="language-scss"><code>@mixin give-prefix( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column prefix spacing you want set.
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">give-suffix</h2>
    <p>Creates the base styles for a spacing suffix.</p>
    <pre class="language-scss"><code>@mixin give-suffix( $index, $options: () )
// @param $index
//   @type integer
//   @desc The number of column suffix spacing you want set.
// @param $options
//   @type map
//   @default $grid map</code></pre>
  </li>
  
  <li>
    <h2 class="docs-header">build-grid-system</h2>
    <p>Outputs all the classes and styles for the class based grid system. You can either pass in a map that overrides the grid map defaults, or a single grid type parameter to trigger normal or mobile grid systems.</p>
    <pre class="language-scss"><code>@mixin build-grid-system( $grid-type | $options: () )
// @param $grid-type | $options
//   @type string | map
//   @default $grid map</code></pre>
  </li>

</ul>
</section>
