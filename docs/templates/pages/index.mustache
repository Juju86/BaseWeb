{{! { 
  
  "menu" : {
    "text" : "Overview",
    "slug" : "overview",
    "order" : "1"
  },
  
  "title" : "Overview",
  "description" : "How it works and the best ways to using global variables, mixins and functions."
  
} }}

<h2 id="how-it-works">How It Works</h2>

<p>BaseWeb is designed to be a starting point for your front-end projects. You can use the source as a base and make it your own, or keep it maintainable for future BaseWeb updates by keeping customization separate from the core files. You can also use the output CSS and JS files and not deal with the source at all. Although, it's recommended to work directly along side the SCSS to take full advantage of the framework.</p>

<h3>File Structure</h3>

<div class="col col-5 align-right">

<div class="example example-no-margin-top">
  <div class="example-block example-code">
<pre><code><span class="token directory">scss</span>
<span class="token path">├── </span><span class="token directory">settings</span>
<span class="token path">│   ├── </span><span class="token file">_palette.scss</span>
<span class="token path">│   └── </span><span class="token file">_global.scss</span>
<span class="token path">├── </span><span class="token directory">core</span>
<span class="token path">│   ├── </span><span class="token file">_functions.scss</span>
<span class="token path">│   ├── </span><span class="token file">_mixins.scss</span>
<span class="token path">│   ├── </span><span class="token file">_reset.scss</span>
<span class="token path">│   ├── </span><span class="token file">_media.scss</span>
<span class="token path">│   └── </span><span class="token file">_grid.scss</span>
<span class="token path">├── </span><span class="token directory">elements</span>
<span class="token path">│   ├── </span><span class="token file">_typography.scss</span>
<span class="token path">│   ├── </span><span class="token file">_edit.scss</span>
<span class="token path">│   ├── </span><span class="token file">_lists.scss</span>
<span class="token path">│   ├── </span><span class="token file">_blockquotes.scss</span>
<span class="token path">│   ├── </span><span class="token file">_code.scss</span>
<span class="token path">│   ├── </span><span class="token file">_tables.scss</span>
<span class="token path">│   ├── </span><span class="token file">_images.scss</span>
<span class="token path">│   ├── </span><span class="token file">_rules.scss</span>
<span class="token path">│   ├── </span><span class="token file">_forms.scss</span>
<span class="token path">│   └── </span><span class="token file">_buttons.scss</span>
<span class="token path">├── </span><span class="token directory">blocks</span>
<span class="token path">│   ├── </span><span class="token file">_button-groups.scss</span>
<span class="token path">│   ├── </span><span class="token file">_dropdowns.scss</span>
<span class="token path">│   ├── </span><span class="token file">_modals.scss</span>
<span class="token path">│   ├── </span><span class="token file">_notice.scss</span>
<span class="token path">│   ├── </span><span class="token file">_tabs.scss</span>
<span class="token path">│   └── </span><span class="token file">_tooltips.scss</span>
<span class="token path">├── </span><span class="token directory">custom</span>
<span class="token path">│   └── </span><span class="token file">_custom.scss</span>
<span class="token path">└── </span><span class="token file">_baseweb.scss</span>
<span class="token directory">css</span>
<span class="token path">├── </span><span class="token file">baseweb.css</span>
<span class="token path">└── </span><span class="token file">baseweb.min.css</span></code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

</div>

<p>The file structure of BaseWeb is designed to be easy to navigate, maintain and customize. All SCSS files are split into one of five groups:</p>

<ul class="list-rowed list-no-clear">
  <li><strong>Settings:</strong> Used for global framework variables</li>
  <li><strong>Core:</strong> Global framework files that include base mixins, functions and styles</li>
  <li><strong>Elements:</strong> Base HTML element styling (e.g. headers, lists, tables, etc.)</li>
  <li><strong>Blocks:</strong> Groups of HTML elements that define a specific component or block (e.g. dropdowns, modals, tabs, etc.)</li>
  <li><strong>Custom:</strong> Where you store your custom styles and framework overrides</li>
</ul>

<p>Files in these directories are routed together using <code>_baseweb.scss</code> where they are imported. By default, the output include an expanded and minified BaseWeb CSS files.</p>

<p>Core files should always be included in your compilations or errors may be thrown. Core files don't actually output any styles directly, so having them included doesn't increase the size of your final CSS files.</p>

<p>Elements and blocks however do output styles directly, but are optional. To not include their output in the final CSS files, you can simply comment out their imports in <code>_baseweb.scss</code>.</p>

<hr>

<h2 id="global-variables">Global Variables</h2>

<article id="variables-color-palette" class="block block-variable" data-type="variable">
<h3>Color Palette</h3>

<p>The Color Palette in BaseWeb is defined using the settings file <code>settings/_palette.scss</code>. It contains the global color variables that are used throughout the framework. This allows you to easily change the color themes between elements and blocks as well as keeping them consistent with each other.</p>

<h4>Gray Scale</h4>

<p>The Gray Scale variables are simple ways of keeping your grays maintainable. These are most often used for text colors or default states for blocks, etc.</p>

<div class="example">
  <div class="example-block example-output">
    <div class="swatch-wrap">
      <span class="swatch color-black"></span>
      <span class="swatch color-gray-darker"></span>
      <span class="swatch color-gray-dark"></span>
      <span class="swatch color-gray"></span>
      <span class="swatch color-gray-light"></span>
      <span class="swatch color-gray-lighter"></span>
      <span class="swatch color-white"></span>
    </div>
  </div><!-- .example-output -->
  <div class="example-block example-code">
<pre><code class="language-scss">// Gray Scale
$black:        #000000 !default;
$gray-darker:  #303030 !default;
$gray-dark:    #606060 !default;
$gray:         #909090 !default;
$gray-light:   #aaaaaa !default;
$gray-lighter: #efefef !default;
$white:        #ffffff !default;</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h4>Base Colors</h4>

<p>The color palette is built using three primary colors and three secondary. These colors are mixed to create their in-between color variations. You can customize those six colors to create a new palette.</p>

<div class="example">
  <div class="example-block example-output">
    <div class="swatch-wrap">
      <span class="swatch color-red"></span>
      <span class="swatch color-yellow"></span>
      <span class="swatch color-blue"></span>
      <span class="swatch color-orange"></span>
      <span class="swatch color-green"></span>
      <span class="swatch color-violet"></span>
    </div>
  </div><!-- .example-output -->
  <div class="example-block example-code">
<pre><code class="language-scss">// Primary
$red:    #de5151 !default;
$yellow: #d1c329 !default;
$blue:   #2ab0ea !default;

// Secondary
$orange: #e69242 !default;
$green:  #8ecb25 !default;
$violet: #bc6bd3 !default;</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h4>Mixed Colors</h4>

<p>Mixed (or tertiary) colors are created using the combination of primary and secondary colors.</p>

<div class="example">
  <div class="example-block example-output">
    <div class="swatch-wrap">
      <span class="swatch color-red-violet"></span>
      <span class="swatch color-red-orange"></span>
      <span class="swatch color-yellow-orange"></span>
      <span class="swatch color-yellow-green"></span>
      <span class="swatch color-blue-green"></span>
      <span class="swatch color-blue-violet"></span>
    </div>
  </div><!-- .example-output -->
  <div class="example-block example-code">
<pre><code class="language-scss">// Tertiary
$red-violet:    saturate(mix($red, $violet, 50), 5%) !default;
$red-orange:    saturate(mix($red, $orange, 50), 5%) !default;
$yellow-orange: saturate(mix($yellow, $orange, 50), 5%) !default;
$yellow-green:  saturate(mix($yellow, $green, 50), 5%) !default;
$blue-green:    saturate(mix($blue, $green, 50), 5%) !default;
$blue-violet:   saturate(mix($blue, $violet, 50), 5%) !default;</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h4>Modifier Degrees</h4>

<p>Degree variables are used when altering the base colors for different purposes. They are also directly used in creating colors with the <code>-light</code>, <code>-lighter</code> and <code>-dark</code>, <code>-darker</code> variations.</p>

<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$light-deg:   5%  !default;
$lighter-deg: 10% !default;
$dark-deg:    5%  !default;
$darker-deg:  10% !default;</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h4>Light &amp; Dark Varients</h4>

<p>Every primary, secondary and tertiary color comes with a <code>-light</code>, <code>-lighter</code> and <code>-dark</code>, <code>-darker</code> variation. These are created using the degree modifier. Here's a table of all the possible color variables you can use. Hover over the swatch to get the exact variable name:</p>

<table class="table-bordered palette-table">
  <tr>
    <td class="swatch-desc"></td>
    <td class="swatch-cell swatch-desc"><code>-lighter</code></td>
    <td class="swatch-cell swatch-desc"><code>-light</code></td>
    <td class="swatch-cell swatch-desc"></td>
    <td class="swatch-cell swatch-desc"><code>-dark</code></td>
    <td class="swatch-cell swatch-desc"><code>-darker</code></td>
  </tr>
</table>
</article>

<article id="class-compiler" class="block block-variable" data-type="variable">
<h3>compiler</h3>
<p>Set the compiler that you're using. Currently supports <a href="https://www.npmjs.org/package/node-sass">node-sass</a> (which uses <a href="http://libsass.org/">libsass</a>) and <a href="http://sass-lang.com/install">ruby-sass</a>. The reason this exists is because there are some differences between how the two compilers work. This variable allows the framework to make the most out of both.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$compiler
  type: value (node-sass, ruby-sass)
  default: node-sass</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="class-global-box-sizing" class="block block-variable" data-type="variable">
<h3>global-box-sizing</h3>
<p>Sets the global box-sizing for everything. It's output when using <a href="#" class="code-link"><code>@mixin build-reset-styles</code></a> and targets all DOM elements using the <code>*, *:before, *:after</code> selector. To disable the output, set this variable to <code>none</code></p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$global-box-sizing
  type: box-sizing value (border-box, none)
  default: border-box</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<div class="block-info">
  <p>Acknowledgements for global box-sizing to border-box technique goes to <a href="http://www.paulirish.com/2012/box-sizing-border-box-ftw/">Paul Irish</a>.</p>
</div>
</article>

<article id="class-clearfix" class="block block-variable" data-type="variable">
<h3>class-clearfix</h3>
<p>The class name used for creating the clearfix class. It's output when using <a href="#" class="code-link"><code>@mixin build-reset-styles</code></a> but if set to <code>none</code>, it will not output a clearfix class.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$class-clearfix
  type: class name
  default: clearfix</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<hr>

<h2 id="global-functions">Global Functions</h2>

<!-- #functions #px_to_em -->

<article id="px_to_em" class="block block-function" data-type="function">
<h3>px_to_em</h3>
<p>Returns a pixel value to EMs. By default it's uses the base font size but can be passed a custom base.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@function px_to_em(
  $px,
  $base-font-size,
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h4 id="param-column_width">Parameters</h4>

<ul class="param-list">
<li class="param">
<div class="example" id="param-px_to_em-px">
  <div class="example-block example-code">
<pre><code class="language-scss">@param $px
  type: unit (pixel)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
<p>The pixel unit you want converted to EMs.</p>
</li>
<li class="param">
<div class="example" id="param-px_to_em-base">
  <div class="example-block example-code">
<pre><code class="language-scss">@param $base-font-size
  type: unit (pixel)
  default: $base-font-size</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
<span class="var-reference">Reference: <a href="#base-font-size" class="code-link"><code>$base-font-size</code></a></span>
<p>The base font-size that the returned EM value is calculated from.</p>
</li>
</ul>

</article>

<!-- #functions #em_to_px -->

<article id="em_to_px" class="block block-function" data-type="function">
<h3>em_to_px</h3>
<p>Returns an EM value to pixels. By default it's uses the base font size but can be passed a custom base.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@function em_to_px(
  $em,
  $base-font-size,
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h4 id="param-column_width">Parameters</h4>

<ul class="param-list">
<li class="param">
<div class="example" id="param-px_to_em-px">
  <div class="example-block example-code">
<pre><code class="language-scss">@param $em
  type: unit (pixel)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
<p>The EM unit you want converted to pixels.</p>
</li>
<li class="param">
<div class="example" id="param-px_to_em-base">
  <div class="example-block example-code">
<pre><code class="language-scss">@param $base-font-size
  type: unit (pixel)
  default: $base-font-size</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
<span class="var-reference">Reference: <a href="#base-font-size" class="code-link"><code>$base-font-size</code></a></span>
<p>The base font-size that the returned pixel value is calculated from.</p>
</li>
</ul>

</article>

<hr>

<h2 id="global-mixins">Global Mixins</h2>

<!-- #mixin #clearfix -->

<article id="clearfix" class="block block-mixin" data-type="mixin">
<h3>clearfix</h3>
<p>Allows you to apply clearfix styles for an element that contains floats.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin clearfix</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h4>Example Usage</h4>

<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">.wrapper {
  @include clearfix;
  
  .aside,
  .content {
    float: left;
  }
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<p>Will Output:</p>

<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">.wrapper:after {
  content: "";
  display: table;
  clear: both;
}

.wrapper .aside,
.wrapper .content {
  float: left;
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<div class="block-info">
  <p>Acknowledgements for clearfix technique goes to <a href="http://www.css-101.org/articles/clearfix/latest-new-clearfix-so-far.php">Thierry Koblentz</a>.</p>
</div>

</article>

<hr>

<h2 id="base-reset-styles">Base Reset Styles</h2>

<p>BaseWeb comes with a very basic reset styles that do a few things such as:</p>

<ul class="list-rowed list-stripes">
  <li>Removes margin and padding from the <code>html</code> and <code>body</code> elements</li>
  <li>Sets <code>text-size-adjust</code> to <code>100%</code> to prevent automatic text resizing on mobile devices</li>
  <li>Sets the global box sizing model to <code>border-box</code> if it's set in <a href="#" class="code-link"><code>$global-box-sizing</code></a></li>
  <li>Creates the clearfix class using the <a href="#class-clearfix" class="code-link"><code>$class-clearfix</code></a> class name and <a href="#clearfix" class="code-link"><code>@mixin clearfix</code></a> mixin</li>
  <li>Sets appropriate HTML5 elements to <code>display: block;</code></li>
  <li>Removes list styles from lists that are nested in the HTML5 <code>&lt;nav&gt;</code> element using the <a href="#" class="code-link"><code>@mixin remove-list-styles</code></a> mixin</li>
  <li>Sets border collapse and spacing for tables</li>
  <li>Sets the default background-color for selected text using the <a href="#" class="code-link"><code>$bg-selection</code></a> variable</li>
</ul>