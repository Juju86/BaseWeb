<h2 id="grid-system">Grid System</h2>

<p>BaseWeb is built with a very flexible grid system. Out of the box, you can use the default classes and settings to have a basic twelve column flexible grid. The basic things to know when using the base grid system is the markup structure. Here's an example:</p>

<div class="example">
  <div class="example-block example-desc">
    <p>There are three basic elements in the BaseWeb grid system: the container, row and column. These three elements are defined by the classes <code>.container</code>, <code>.row</code> and <code>.col .col-x</code> respectively. Columns require two classes, the base <code>.col</code> and the <code>.col-x</code> where <code>x</code> represents the number of columns to span.</p>
  </div><!-- .example-desc -->
  <div class="example-block example-output">
    
    <div class="container container-no-padding">
      <div class="row">
        <div class="col col-4"><p>.col-4</p></div>
        <div class="col col-4"><p>.col-4</p></div>
        <div class="col col-4"><p>.col-4</p></div>
      </div>
      <div class="row">
        <div class="col col-6"><p>.col-6</p></div>
        <div class="col col-6"><p>.col-6</p></div>
      </div>
      <div class="row">
        <div class="col col-2"><p>.col-2</p></div>
        <div class="col col-2"><p>.col-2</p></div>
        <div class="col col-2"><p>.col-2</p></div>
        <div class="col col-2"><p>.col-2</p></div>
        <div class="col col-2"><p>.col-2</p></div>
        <div class="col col-2"><p>.col-2</p></div>
      </div>
    </div>
    
  </div><!-- .example-output -->
  <div class="example-block example-code">
<pre><code id="code-sample" class="language-markup">&lt;div class=&quot;container&quot;&gt;

  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
    &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
    &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-6&quot;&gt;...&lt;/div&gt;
    &lt;div class=&quot;col col-6&quot;&gt;...&lt;/div&gt;
  &lt;/div&gt;
  
  ...
  
&lt;/div&gt;</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<p>The class based grid system is generated using the <a href="#build-grid-system" class="code-link"><code>build-grid-system()</code></a> mixin. By default it's going to generate all the classes for the container, row and columns based on the grid variables. You can also pass in custom grid variables manually to change grid parameters based on different media breakpoints.</p>

<p>There's also the mobile grid system mixin <a href="#build-mobile-grid-system" class="code-link"><code>build-mobile-grid-system()</code></a> that is available for easily making columns staked at 100% width.</p>

<div class="example">
  <div class="example-block example-desc">
    <p>In this example, we're using the <a href="#media-queries">media query mixins</a> to set grid systems for different breakpoints.</p>
  </div><!-- .example-desc -->
  <div class="example-block example-code">
<pre><code class="language-scss">@include build-mobile-grid-system();

@include media-tablet {
  @include build-grid-system(740px);
}

@include media-desktop {
  @include build-grid-system(960px);
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h2 id="semantic-grid">Semantic Grids</h2>

<p>The BaseWeb grid system also supports the use of semantic grids. That means you can define a grid without having to use grid classes and instead use mixins to define grid elements directly in your stylesheets. The <a href="#mixins">mixins</a> section below has details on all of the mixins available for semantic grids:</p>

<ul>
  <li><a href="#make-container" class="code-link"><code>@mixin make-container()</code></a></li>
  <li><a href="#make-row" class="code-link"><code>@mixin make-row()</code></a></li>
  <li><a href="#make-base-column" class="code-link"><code>@mixin make-base-column()</code></a></li>
  <li><a href="#make-column" class="code-link"><code>@mixin make-column()</code></a></li>
  <li><a href="#give-prefix" class="code-link"><code>@mixin give-prefix()</code></a></li>
  <li><a href="#give-suffix" class="code-link"><code>@mixin give-suffix()</code></a></li>
</ul>

<div class="example">
  <div class="example-block example-output">
    
    <div class="demo-wrapper">
      <div class="demo-content">
        <div class="demo-aside">
          <p>@make-column(4);</p>
        </div>
        <div class="demo-article">
          <p>@make-column(8);</p>
        </div>
      </div>
    </div>
    
  </div><!-- .example-output -->
  <div class="example-block example-code">
<pre><code class="language-scss">.wrapper {
  @include make-container;
  
  .content {
    @include make-row;
    
    .aside {
      @include make-column(4);
    }
    
    .article {
      @include make-column(8);
    }
  }
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<p>There are also a set of functions that you can use for setting column and spacing widths. These can be used along with <a href="#make-base-column" class="code-link"><code>make-base-column()</code></a> to define multiple columns are set the widths separately to reduce the final CSS output. Checkout the <a href="#functions">functions</a> section below for more details:</p>

<ul>
  <li><a href="#column_width" class="code-link"><code>@function column_width()</code></a></li>
  <li><a href="#spacing_width" class="code-link"><code>@function spacing_width()</code></a></li>
</ul>

<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">.wrapper {
  @include make-container;
  
  .content {
    @include make-row;
    
    .aside,
    .article {
      @include make-base-column;
    }
    
    .aside {
      width: column_width(4);
    }
    .article {
      width: column_width(6);
      margin-left: spacing_width(2);
    }
  }
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h2 id="prefix-and-suffix">Prefix and Suffix</h2>

<p>You can also create spacing on columns using the prefix and suffix modifiers. These classes are used by adding the prefix and suffix class with the appropriate amount of column spacing you want to be added before or after a column.</p>

<div class="example">
  <div class="example-block example-output">
    
    <div class="container container-no-padding">
      <div class="row">
        <div class="col col-4 suffix-3"><p>.col-4</p></div>
        <div class="col col-3 prefix-2"><p>.col-3</p></div>
      </div>
      <div class="row">
        <div class="col col-5 prefix-4 suffix-3"><p>.col-5</p></div>
      </div>
    </div>
    
  </div><!-- .example-output -->
  <div class="example-block example-code">
<pre><code class="language-markup">&lt;div class=&quot;container&quot;&gt;

  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-4 suffix-3&quot;&gt;...&lt;/div&gt;
    &lt;div class=&quot;col col-3 prefix-2&quot;&gt;...&lt;/div&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-5 prefix-4 suffix-3&quot;&gt;...&lt;/div&gt;
  &lt;/div&gt;
  
&lt;/div&gt;</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<p>The semantic grid system equivalent would look something like this:</p>

<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">.aside {
  @include make-column(6);
  @include give-prefix(2);
}

.article {
  @include make-column(6);
  @include give-suffix(2);
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h2 id="nested-columns">Nested Columns</h2>

<p>You can created nested columns in your grid system by adding a new <code>.row</code> element inside a <code>.col</code>. It's important to note that the first element inside a <code>.row</code> should always be a <code>.col</code>. Otherwise, you'll need to manually remove the gutter margin.</p>

<div class="example">
  <div class="example-block example-desc">
    <p>When using a fluid grid (percent based) the sum of columns in a row must equal the total column value <code>$grid-columns</code>. But when using a fixed grid (pixel based), the sum must equal the column span of it's parent <code>.col</code> element. If you want to mix fixed and fluid grids between breakpoints, it's best to use the <a href="#semantic-grid">semantic grid</a> method.</p>
  </div><!-- .example-desc -->
  <div class="example-block example-output">
    
    <div class="container container-no-padding">
    
      <div class="row">
        <div class="col col-6">
          <p>.col-6</p>
          <div class="row">
            <div class="col col-6"><p>.col-6</p></div>
            <div class="col col-6"><p>.col-6</p></div>
          </div>
        </div>
        
        <div class="col col-6">
          <p>.col-6</p>
          <div class="row">
            <div class="col col-4"><p>.col-4</p></div>
            <div class="col col-4"><p>.col-4</p></div>
            <div class="col col-4"><p>.col-4</p></div>
          </div>
        </div>
      </div>
      
    </div>
    
  </div><!-- .example-output -->
  <div class="example-block example-code">
<pre><code class="language-markup">&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col col-6&quot;&gt;
      ...
      &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col col-6&quot;&gt;...&lt;/div&gt;
        &lt;div class=&quot;col col-6&quot;&gt;...&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col col-6&quot;&gt;
      ...
      &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
        &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
        &lt;div class=&quot;col col-4&quot;&gt;...&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h2 id="media-queries">Media Queries</h2>

<p>BaseWeb is built to be mobile first. What this means in terms of media queries is that they are additive starting from mobile. All styles not wrapped in a media query will be applied to mobile. The tablet breakpoint then gets added on top of those styles, then desktop, etc. There are also media queries you can use to apply styles to mobile and horizontal mobile only.</p>

<div class="example">
  <div class="example-block example-desc">
    <p>These are the available media query mixins. If you prefer instead to run your queries differently, or to add new queries, you can modify <code>core/_media.scss</code>.</p>
  </div><!-- .example-desc -->
  <div class="example-block example-code">
<pre><code class="language-scss">@include media-small {
  // Default: max-width: $bp-small
  // Target: Vertical Oriented Mobile
}

@include media-mobile {
  // Default: max-width: $bp-mobile
  // Target: Mobile
}

@include media-tablet {
  // Default: min-width: $bp-tablet
  // Target: Tablet
}

@include media-desktop {
  // Default: min-width: $bp-desktop
  // Target: Desktop
}

@include media-large {
  // Default: min-width: $bp-large
  // Target: Wide Screen Desktop
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h3>Retina Media Query</h3>

<p>There's also a media query mixin that can be used for setting styles specifically to retina screens. This is most commonly used when setting higher resolution background images for retina screens.</p>

<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">.logo {
  background-image: src('logo.png');
}

@include media-retina {
  .logo {
    background-image: src('logo-2x.png');
    background-size: 100px 50px;
  }
}
</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->

<h2 id="base-reset-styles">Base Reset Styles</h2>

<p>BaseWeb comes with a very basic reset styles that do a few things.</p>

<ul>
  <li>Removes margin and padding from the <code>html</code> and <code>body</code> elements</li>
  <li>Sets <code>text-size-adjust</code> to <code>100%</code> to prevent automatic text resizing on mobile devices</li>
  <li>Sets the global box sizing model to <code>border-box</code> if it's set in <a href="#" class="code-link"><code>$global-box-sizing</code></a></li>
  <li>Creates the clearfix class using the <a href="#" class="code-link"><code>$class-clearfix</code></a> class name and <a href="#" class="code-link"><code>@mixin clearfix</code></a> mixin</li>
  <li>Sets appropriate HTML5 elements to <code>display: block;</code></li>
  <li>Removes list styles from lists that are nested in the HTML5 <code>&lt;nav&gt;</code> element using the <a href="#" class="code-link"><code>@mixin remove-list-styles</code></a> mixin</li>
  <li>Sets border collapse and spacing for tables</li>
  <li>Sets the default background-color for selected text using the <a href="#" class="code-link"><code>$bg-selection</code></a> variable</li>
</ul>

<h2 id="variables">Variables</h2>

<article id="grid-total-width" class="block block-variable" data-type="variable">
<h3>grid-total-width</h3>
<p>Defines the total width of your grid. If set to 100%, it behaves as a fluid grid. Giving it a pixel value makes it a fixed grid. e.g. Setting it to <code>960px</code> will make it behave like the <a href="http://960.gs/" target="_blank">960 grid system</a>.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$grid-total-width
  type: unit (pixel, percentage)
  default: 100%</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="grid-gutter-width" class="block block-variable" data-type="variable">
<h3>grid-gutter-width</h3>
<p>Defines the space between each column. The value type must be the same as the <a href="#grid-total-width" class="code-link"><code>$grid-total-width</code></a>. So they both must be either percentages or pixels.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$grid-gutter-width
  type: unit (pixel, percentage)
  default: 2%</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="grid-columns" class="block block-variable" data-type="variable">
<h3>grid-columns</h3>
<p>The maximum number of columns per row. This value must be an integer greater than zero.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$grid-columns
  type: number (positive)
  default: 12</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="container-margin" class="block block-variable" data-type="variable">
<h3>container-margin</h3>
<p>The left and right margin that is applied to the container element. If set to <code>auto</code> the container will be centered to the page or parent element.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$container-margin
  type: unit (pixel, percentage, auto)
  default: auto</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="container-padding" class="block block-variable" data-type="variable">
<h3>container-padding</h3>
<p>The left and right padding that is applied to the container element. This is added in addition to the containers total width that is set by <a href="#grid-total-width" class="code-link"><code>$grid-total-width</code></a>.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$container-padding
  type: unit (pixel, percentage)
  default: 20px</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="container-min-width" class="block block-variable" data-type="variable">
<h3>container-min-width</h3>
<p>Minimum width that is applied to the container element. Only applicable when using a percentage based grid.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$container-min-width
  type: unit (pixel, none)
  default: none</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="container-max-width" class="block block-variable" data-type="variable">
<h3>container-max-width</h3>
<p>Maximum width that is applied to the container element. Only applicable when using a percentage based grid.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$container-max-width
  type: unit (pixel, none)
  default: 1000px</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="class-container" class="block block-variable" data-type="variable">
<h3>class-container</h3>
<p>The class name to be used for the container element. The container element is what inherits the total width property and is the wrapping element of rows.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$class-container
  type: class name
  default: container</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="class-row" class="block block-variable" data-type="variable">
<h3>class-row</h3>
<p>The class name to be used for the row element. The row element is the wrapping element of columns and clears inner floats.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$class-row
  type: class name
  default: row</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="class-column" class="block block-variable" data-type="variable">
<h3>class-column</h3>
<p>The class name to be used for the column element. The column element is used inside of rows and sets the number of columns that are spanned. The column name will be output with a base column class and a column span class: e.g. <code>.col .col-X</code> where <code>col</code> is the defined column class and <code>X</code> is the number of columns to span.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$class-column
  type: class name
  default: col</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="class-prefix" class="block block-variable" data-type="variable">
<h3>class-prefix</h3>
<p>The class name to be used for the prefix element. The prefix class is added to columns to pad their left with a specific column span. The classes generated look like <code>.prefix-X</code> where <code>prefix</code> is the class name and <code>X</code> is the number of columns to span.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$class-prefix
  type: class name
  default: prefix</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="class-suffix" class="block block-variable" data-type="variable">
<h3>class-suffix</h3>
<p>The class name to be used for the suffix element. The suffix class is added to columns to pad their right with a specific column span. The classes generated look like <code>.suffix-X</code> where <code>suffix</code> is the class name and <code>X</code> is the number of columns to span.</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$class-suffix
  type: class name
  default: suffix</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="bp-small" class="block block-variable" data-type="variable">
<h3>bp-small</h3>
<p>The breakpoint to be used for vertical oriented mobile devices. The media feature is expressed with: <code>max-width</code></p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$bp-small
  type: unit (pixel)
  default: 480px</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="bp-mobile" class="block block-variable" data-type="variable">
<h3>bp-mobile</h3>
<p>The breakpoint to be used for all mobile devices and orientations. The media feature is expressed with: <code>max-width</code></p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$bp-mobile
  type: unit (pixel)
  default: 760px</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="bp-tablet" class="block block-variable" data-type="variable">
<h3>bp-tablet</h3>
<p>The breakpoint to be used for tablet devices. The media feature is expressed with: <code>min-width</code></p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$bp-tablet
  type: unit (pixel)
  default: 760px</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="bp-desktop" class="block block-variable" data-type="variable">
<h3>bp-desktop</h3>
<p>The breakpoint to be used for computer screens. The media feature is expressed with: <code>min-width</code></p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$bp-desktop
  type: unit (pixel)
  default: 990px</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="bp-large" class="block block-variable" data-type="variable">
<h3>bp-large</h3>
<p>The breakpoint to be used for large computer screens. The media feature is expressed with: <code>min-width</code></p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">$bp-large
  type: unit (pixel)
  default: 1380px</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<hr>

<h2 id="functions">Functions</h2>

<article id="column_width" class="block block-function" data-type="function">
<h3>column_width</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@function column_width(
  $index,
  $grid-total-width,
  $grid-gutter-width,
  $grid-columns
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="spacing_width" class="block block-function" data-type="function">
<h3>spacing_width</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@function spacing_width(
  $index,
  $grid-total-width,
  $grid-gutter-width,
  $grid-columns
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<hr>

<h2 id="mixins">Mixins</h2>

<article id="make-container" class="block block-mixin" data-type="mixin">
<h3>make-container</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin make-container(
  $grid-total-width,
  
  $container-margin,
  $container-padding,
  $container-max-width,
  $container-min-width,
  
  $class-container
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="make-row" class="block block-mixin" data-type="mixin">
<h3>make-row</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin make-row(
  $class-column
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="make-base-column" class="block block-mixin" data-type="mixin">
<h3>make-base-column</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin make-base-column(
  $grid-gutter-width
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="make-column" class="block block-mixin" data-type="mixin">
<h3>make-column</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin make-column(
  $index,
  $grid-total-width,
  $grid-gutter-width,
  $grid-columns
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="give-prefix" class="block block-mixin" data-type="mixin">
<h3>give-prefix</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin give-prefix(
  $index,
  $grid-total-width,
  $grid-gutter-width,
  $grid-columns
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="give-suffix" class="block block-mixin" data-type="mixin">
<h3>give-suffix</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin give-suffix(
  $index,
  $grid-total-width,
  $grid-gutter-width,
  $grid-columns
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="build-mobile-grid-system" class="block block-mixin" data-type="mixin">
<h3>build-mobile-grid-system</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin build-mobile-grid-system(
  $class-container,
  $class-row,
  $class-column
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="build-grid-system" class="block block-mixin" data-type="mixin">
<h3>build-grid-system</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin build-grid-system(
  $grid-total-width,
  $grid-gutter-width,
  $grid-columns,
  
  $container-margin,
  $container-padding,
  $container-max-width,
  $container-min-width,
  
  $class-container,
  $class-row,
  $class-column,
  $class-prefix,
  $class-suffix
)</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="media-small" class="block block-mixin" data-type="mixin">
<h3>media-small</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin media-small {
  @content
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="media-mobile" class="block block-mixin" data-type="mixin">
<h3>media-mobile</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin media-mobile {
  @content
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="media-tablet" class="block block-mixin" data-type="mixin">
<h3>media-tablet</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin media-tablet {
  @content
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="media-desktop" class="block block-mixin" data-type="mixin">
<h3>media-desktop</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin media-desktop {
  @content
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="media-large" class="block block-mixin" data-type="mixin">
<h3>media-large</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin media-large {
  @content
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<article id="media-retina" class="block block-mixin" data-type="mixin">
<h3>media-retina</h3>
<p>... Descriptions Needed ...</p>
<div class="example">
  <div class="example-block example-code">
<pre><code class="language-scss">@mixin media-retina {
  @content
}</code></pre>
  </div><!-- .example-code -->
</div><!-- .example -->
</article>

<hr>
