////////////////////////////////////////////////////////////////////////////////
// Grid Mixins
////////////////////////////////////////////////////////////////////////////////

////
// Gutters
.gutters(@g) {
    margin-left: auto;
    margin-right: auto;
}
.gutters(@g) when (@grid_gutter_property = margin) {
    margin-left: @g;
    margin-right: @g;
}
.gutters(@g) when (@grid_gutter_property = padding) {
    padding-left: @g;
    padding-right: @g;
}
////
// Gutters First
.nested-gutters-first(@g) when (@grid_gutter_property = margin) {                    
    &:first-child, &.@{class_first} {
        margin-left: @g;
    }
}
.nested-gutters-first(@g) when (@grid_gutter_property = padding) {                    
    &:first-child, &.@{class_first} {
        padding-left: @g;
    }
}
////
// Gutters Last
.nested-gutters-last(@g) when (@grid_gutter_property = margin) {                    
    &:last-child, &.@{class_last} {
        margin-right: @g;
    }
}
.nested-gutters-last(@g) when (@grid_gutter_property = padding) {                    
    &:last-child, &.@{class_last} {
        padding-right: @g;
    }
}
////
// Gutters First Right
.nested-gutters-first-right(@g) when (@grid_gutter_property = margin) {                    
    &:first-child, &.@{class_first} {
        margin-right: @g;
    }
}
.nested-gutters-first-right(@g) when (@grid_gutter_property = padding) {                    
    &:first-child, &.@{class_first} {
        padding-right: @g;
    }
}
////
// Gutters Last Left
.nested-gutters-last-left(@g) when (@grid_gutter_property = margin) {                    
    &:last-child, &.@{class_last} {
        margin-left: @g;
    }
}
.nested-gutters-last-left(@g) when (@grid_gutter_property = padding) {                    
    &:last-child, &.@{class_last} {
        padding-left: @g;
    }
}

////////////////////////////////////////////////////////////////////////////////
// Class Based Grid System
////////////////////////////////////////////////////////////////////////////////

#grid_system( @grid_row_width, @grid_gutter_width ) {
    
    ////
    // Global
    .global() {
        ////
        // Set column width
        @grid_column_width: (( @grid_row_width / @grid_columns  ) - @grid_gutter_width );
        ////
        // Column Builder
        .col-X (@index) when (@index > 0) {
            .@{class_column}@{index} { .col-(@index); }
            .col-X(@index - 1);
        }
        .col- (@columns) {
            width: (@grid_column_width * @columns) + (@grid_gutter_width * (@columns - 1));
        }
        .col-X (@grid_columns);
        ////
        // Prefix Builder
        .pre-X (@index) when (@index > 0) {
            .@{class_prefix}@{index} { .pre-(@index); }
            .pre-X(@index - 1);
        }
        .pre- (@columns) {
            padding-left: (@grid_column_width * @columns) + (@grid_gutter_width * @columns);
        }
        .pre-X (@grid_columns);
        ////
        // Suffix Builder
        .suf-X (@index) when (@index > 0) {
            .@{class_suffix}@{index} { .suf-(@index); }
            .suf-X(@index - 1);
        }
        .suf- (@columns) {
            padding-right: (@grid_column_width * @columns) + (@grid_gutter_width * @columns);
        }
        .suf-X (@grid_columns);
        ////
        // Base
        @{all_columns} {
            float: left;
            .gutters( ( @grid_gutter_width / 2 ) );
        }
        ////
        // Nested Columns
        .@{class_row} .@{class_row} @{all_columns} {
            .nested-gutters-first(0);
            .nested-gutters-last(0);
        }
        
    } // End of .global();
    ////
    // Static
    .static() {
        ////
        // Load global styles
        .global();
        ////
        // Nested Columns
        .@{class_row} .@{class_row} @{all_columns} {
            .nested-gutters-first-right( ( @grid_gutter_width / 2 ) );
            .nested-gutters-last-left( ( @grid_gutter_width / 2 ) );
        }
    } // End of .static();
    ////
    // Fluid
    .fluid() {
        ////
        // Load global styles
        .global();
        ////
        // Nested Columns
        .@{class_row} .@{class_row} @{all_columns} {
            .nested-gutters-first-right( @grid_gutter_width );
            .nested-gutters-last-left( @grid_gutter_width );
        }
    } // End of .fluid();
    ////
    // Guarded Mixins
    .build() when ( ispixel(@grid_row_width) ) {
        .static();
    }
    .build() when ( ispercentage(@grid_row_width) ) {
        .fluid();
    }
    ////
    // Build Styles
    .build();
    
}

////////////////////////////////////////////////////////////////////////////////
// Semantic Grid System
////////////////////////////////////////////////////////////////////////////////

////
// Semantic Container
.make-container(@row_width) {
    .build() when ( ispixel(@row_width) ) {
        ////
        // Static Styles
        margin-left: auto;
        margin-right: auto;
        width: @row_width;
        max-width: none;
    }
    .build() when ( ispercentage(@row_width) ) {
        ////
        // Fluid Styles
        width: auto;
        max-width: @grid_max_width;
        @media (min-width: @grid_margin_switch) {
            margin-left: auto;
            margin-right: auto;
        }
    }
    .build();
}
.container() {
    position: relative;
    width: auto;
    .gutters(@grid_margin_width);
    .clearfix();
    
    .media-mode() when (@media_mode = mobile-first), (@media_mode = desktop-first) {
        @media screen and ( min-width: @media_tablet_min ) {
            .make-container(@grid_tablet_row_width);
        }
        @media screen and ( min-width: @media_desktop_min ) {
            .make-container(@grid_desktop_row_width);
        }
        @media screen and ( min-width: @media_large ) {
            .make-container(@grid_large_row_width);
        }
    }
    .media-mode() when (@media_mode = off) {
        .make-container(@grid_row_width);
    }
    .media-mode();
    
}

////
// Semantic Row
.row() {
    position: relative;
    .clearfix();
}

////
// Semantic Column
.make-column( @col, @total_width, @gutter_width ) {
    ////
    // If its not a fluid grid, ignore the past columns
    .build() when ( ispixel(@total_width) ) {
        @columns: @grid_columns;
    }
    .build();
    // Get column width
    @column_width: (( @total_width / @columns  ) - @gutter_width );
    ////
    // Styles
    float: left;
    width: (@column_width * @col) + (@gutter_width * (@col - 1));
    .gutters( ( @gutter_width / 2 ) );
}
.column( @col, @columns : @grid_columns ) {
    position: relative;
    min-height: 1px;
    .media-mode() when (@media_mode = mobile-first), (@media_mode = desktop-first) {
        @media screen and ( min-width: @media_tablet_min ) {
            .make-column( @col, @grid_tablet_row_width, @grid_tablet_gutter_width );
        }
        @media screen and ( min-width: @media_desktop_min ) {
            .make-column( @col, @grid_desktop_row_width, @grid_desktop_gutter_width );
        }
        @media screen and ( min-width: @media_large ) {
            .make-column( @col, @grid_large_row_width, @grid_large_gutter_width );
        }
    }
    .media-mode() when (@media_mode = off) {
        .make-column( @col, @grid_row_width, @grid_gutter_width );
    }
    .media-mode();
}

////
// Semantic Prefix
.make-prefix( @col, @total_width, @gutter_width ) {
    // Get column width
    @column_width: (( @total_width / @columns  ) - @gutter_width );
    // Styles
    padding-left: (@column_width * @col) + (@gutter_width * @col);
}
.prefix( @offset : 1, @columns : @grid_columns ) {
    .media-mode() when (@media_mode = mobile-first), (@media_mode = desktop-first) {
        @media screen and ( min-width: @media_tablet_min ) {
            .make-prefix( @offset, @grid_tablet_row_width, @grid_tablet_gutter_width );
        }
        @media screen and ( min-width: @media_desktop_min ) {
            .make-prefix( @offset, @grid_desktop_row_width, @grid_desktop_gutter_width );
        }
        @media screen and ( min-width: @media_large ) {
            .make-prefix( @offset, @grid_large_row_width, @grid_large_gutter_width );
        }
    }
    .media-mode() when (@media_mode = off) {
        .make-prefix( @offset, @grid_row_width, @grid_gutter_width );
    }
    .media-mode();
}

////
// Semantic Suffix
.make-suffix( @col, @total_width, @gutter_width ) {
    // Get column width
    @column_width: (( @total_width / @columns  ) - @gutter_width );
    // Styles
    padding-right: (@column_width * @col) + (@gutter_width * @col);
}
.suffix( @offset : 1, @columns : @grid_columns ) {
    .media-mode() when (@media_mode = mobile-first), (@media_mode = desktop-first) {
        @media screen and ( min-width: @media_tablet_min ) {
            .make-suffix( @offset, @grid_tablet_row_width, @grid_tablet_gutter_width );
        }
        @media screen and ( min-width: @media_desktop_min ) {
            .make-suffix( @offset, @grid_desktop_row_width, @grid_desktop_gutter_width );
        }
        @media screen and ( min-width: @media_large ) {
            .make-suffix( @offset, @grid_large_row_width, @grid_large_gutter_width );
        }
    }
    .media-mode() when (@media_mode = off) {
        .make-suffix( @offset, @grid_row_width, @grid_gutter_width );
    }
    .media-mode();
}

////
// Alpha
.make-alpha( @grid_row_width, @grid_gutter_width ) {
    .build() when ( ispixel(@grid_row_width) ) {
        .remove-gutter(0) when (@grid_gutter_property = margin) {                    
            margin-left: 0;
            margin-right: ( @grid_gutter_width / 2 );
        }
        .remove-gutter(0) when (@grid_gutter_property = padding) {                    
            padding-left: 0;
            padding-right: ( @grid_gutter_width / 2 );
        }
        .remove-gutter(0);
    }
    .build() when ( ispercentage(@grid_row_width) ) {
        .remove-gutter(0) when (@grid_gutter_property = margin) {                    
            margin-left: 0;
            margin-right: @grid_gutter_width;
        }
        .remove-gutter(0) when (@grid_gutter_property = padding) {                    
            padding-left: 0;
            padding-right: @grid_gutter_width;
        }
        .remove-gutter(0);
    }
    .build();
}
.alpha() {
    .media-mode() when (@media_mode = mobile-first), (@media_mode = desktop-first) {
        @media screen and ( min-width: @media_tablet_min ) {
            .make-alpha( @grid_tablet_row_width, @grid_tablet_gutter_width );
        }
        @media screen and ( min-width: @media_desktop_min ) {
            .make-alpha( @grid_desktop_row_width, @grid_desktop_gutter_width );
        }
        @media screen and ( min-width: @media_large ) {
            .make-alpha( @grid_large_row_width, @grid_large_gutter_width );
        }
    }
    .media-mode() when (@media_mode = off) {
        .make-alpha( @grid_row_width, @grid_gutter_width );
    }
    .media-mode();
}

////
// Omega
.make-omega( @grid_row_width, @grid_gutter_width ) {
    .build() when ( ispixel(@grid_row_width) ) {
        .remove-gutter(0) when (@grid_gutter_property = margin) {                    
            margin-right: 0;
            margin-left: ( @grid_gutter_width / 2 );
        }
        .remove-gutter(0) when (@grid_gutter_property = padding) {                    
            padding-right: 0;
            padding-left: ( @grid_gutter_width / 2 );
        }
        .remove-gutter(0);
    }
    .build() when ( ispercentage(@grid_row_width) ) {
        .remove-gutter(0) when (@grid_gutter_property = margin) {                    
            margin-right: 0;
            margin-left: @grid_gutter_width;
        }
        .remove-gutter(0) when (@grid_gutter_property = padding) {                    
            padding-right: 0;
            padding-left: @grid_gutter_width;
        }
        .remove-gutter(0);
    }
    .build();
}
.omega() {
    .media-mode() when (@media_mode = mobile-first), (@media_mode = desktop-first) {
        @media screen and ( min-width: @media_tablet_min ) {
            .make-omega( @grid_tablet_row_width, @grid_tablet_gutter_width );
        }
        @media screen and ( min-width: @media_desktop_min ) {
            .make-omega( @grid_desktop_row_width, @grid_desktop_gutter_width );
        }
        @media screen and ( min-width: @media_large ) {
            .make-omega( @grid_large_row_width, @grid_large_gutter_width );
        }
    }
    .media-mode() when (@media_mode = off) {
        .make-omega( @grid_row_width, @grid_gutter_width );
    }
    .media-mode();
}

////////////////////////////////////////////////////////////////////////////////
// Base Grid Styles
////////////////////////////////////////////////////////////////////////////////

.@{class_container} {
    .container();
}
.@{class_row} {
    .row();
}
@{all_columns} {
    position: relative;
    min-height: 1px;
}