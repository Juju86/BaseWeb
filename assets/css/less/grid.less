////////////////////////////////////////////////////////////////////////////////
// Grid
////////////////////////////////////////////////////////////////////////////////

////
// Base grid settings
@grid_columns: 12;
@grid_gutter_width: 20px;
@grid_container_margin: auto;

////
// Define either total width or column width
@grid_total_width: 960px;
// @grid_column_width: 60px;

////
// Class variables
@grid_container_class: container;
@grid_row_class: row;
@grid_col_class: col-;
@grid_prefix_class: prefix-;
@grid_suffix_class: suffix-;


#grid {
    
    .fixed( 
        @total_width : @grid_total_width, 
        @gutter_width : @grid_gutter_width,
        @container_margin : @grid_container_margin ) {
        // @column_width : @grid_column_width,
        
        ////
        // Calculate the variable that wasn't provided
        @column_width: (( @total_width / @grid_columns  ) - @gutter_width );
        // @total_width: (( @grid_columns * @column_width ) + ( @gutter_width * @grid_columns ));
        
        ////
        // Semantic Grid Mixins
        .container() {
            position: relative;
            width: (@total_width - @gutter_width);
            margin-left: @container_margin;
            margin-right: @container_margin;
        }
        .row() {
            position: relative;
            margin-left: (@gutter_width * -1);
            clear: both;
            .clearfix();
        }
        .column-base() {
            display: inline;
            float: left;
            position: relative;
            margin-left: @gutter_width;
        }
        .column(@columns) {
            .column-base();
            width: (@column_width * @columns) + (@gutter_width * (@columns - 1));
        }
        .prefix(@columns) {
            padding-left: (@column_width * @columns) + (@gutter_width * @columns);
        }
        .suffix(@columns) {
            padding-right: (@column_width * @columns) + (@gutter_width * @columns);
        }
        
        ////
        // Grid Mixins
        .col-X (@index) when (@index > 0) {
            .@{grid_col_class}@{index} { .col-(@index); }
            .col-X(@index - 1);
        }
        .col- (@columns) {
            width: (@column_width * @columns) + (@gutter_width * (@columns - 1));
        }
        ////
        // Prefix Mixins
        .pre-X (@index) when (@index > 0) {
            .@{grid_prefix_class}@{index} { .pre-(@index); }
            .pre-X(@index - 1);
        }
        .pre- (@columns) {
            padding-left: (@column_width * @columns) + (@gutter_width * @columns);
        }
        ////
        // Suffix Mixins
        .suf-X (@index) when (@index > 0) {
            .@{grid_suffix_class}@{index} { .suf-(@index); }
            .suf-X(@index - 1);
        }
        .suf- (@columns) {
            padding-right: (@column_width * @columns) + (@gutter_width * @columns);
        }
        
        ////
        // Base Styles
        .@{grid_container_class} {
            .container();
        }
        .@{grid_row_class} {
            .row();
        }
        (~'[class*="@{grid_col_class}"]') {
            .column-base();
        }
        
        ////
        // Build Styles
        .col-X (@grid_columns);
        .pre-X (@grid_columns);
        .suf-X (@grid_columns);
    
    }
    
}

////////////////////////////////////////////////////////////////////////////////
// Trigger Grid
////////////////////////////////////////////////////////////////////////////////

#grid > .fixed();