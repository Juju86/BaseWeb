////////////////////////////////////////////////////////////////////////////////
// Grid Mixins
////////////////////////////////////////////////////////////////////////////////

////
// Gutters
.gutters(@g) {
    margin-left: auto;
    margin-right: auto;
}
.gutters(@g) when (@grid-gutter-property = margin) {
    margin-left: @g;
    margin-right: @g;
}
.gutters(@g) when (@grid-gutter-property = padding) {
    padding-left: @g;
    padding-right: @g;
}
////
// Gutters First
.nested-gutters-first(@g) when (@grid-gutter-property = margin) {                    
    &:first-child, &.@{class-first} {
        margin-left: @g;
    }
}
.nested-gutters-first(@g) when (@grid-gutter-property = padding) {                    
    &:first-child, &.@{class-first} {
        padding-left: @g;
    }
}
////
// Gutters Last
.nested-gutters-last(@g) when (@grid-gutter-property = margin) {                    
    &:last-child, &.@{class-last} {
        margin-right: @g;
    }
}
.nested-gutters-last(@g) when (@grid-gutter-property = padding) {                    
    &:last-child, &.@{class-last} {
        padding-right: @g;
    }
}
////
// Gutters First Right
.nested-gutters-first-right(@g) when (@grid-gutter-property = margin) {                    
    &:first-child, &.@{class-first} {
        margin-right: @g;
    }
}
.nested-gutters-first-right(@g) when (@grid-gutter-property = padding) {                    
    &:first-child, &.@{class-first} {
        padding-right: @g;
    }
}
////
// Gutters Last Left
.nested-gutters-last-left(@g) when (@grid-gutter-property = margin) {                    
    &:last-child, &.@{class-last} {
        margin-left: @g;
    }
}
.nested-gutters-last-left(@g) when (@grid-gutter-property = padding) {                    
    &:last-child, &.@{class-last} {
        padding-left: @g;
    }
}

////////////////////////////////////////////////////////////////////////////////
// Semantic Grid System
////////////////////////////////////////////////////////////////////////////////

////
// Semantic Container
.make-container(@row_width) {
    .build() when ( ispixel(@row_width) ) {
        ////
        // Static Styles
        margin-left: auto;
        margin-right: auto;
        width: @row_width;
        max-width: none;
    }
    .build() when ( ispercentage(@row_width) ) {
        ////
        // Fluid Styles
        width: auto;
        max-width: @grid-max-width;
        @media (min-width: @grid-margin-switch) {
            margin-left: auto;
            margin-right: auto;
        }
    }
    .build();
}
.container() {
    position: relative;
    width: auto;
    .gutters(@grid-margin-width);
    .clearfix();
    
    .media-mode() when (@media-mode = mobile-first), (@media-mode = desktop-first) {
        @media screen and ( min-width: @media-tablet-min ) {
            .make-container(@grid-tablet-row-width);
        }
        @media screen and ( min-width: @media-desktop-min ) {
            .make-container(@grid-desktop-row-width);
        }
        @media screen and ( min-width: @media-large ) {
            .make-container(@grid-large-row-width);
        }
    }
    .media-mode() when (@media-mode = off) {
        .make-container(@grid-row-width);
    }
    .media-mode();
}

////
// Semantic Row
.row() {
    position: relative;
    .clearfix();
}

////
// Semantic Column
.make-column( @col, @total_width, @gutter_width ) {
    ////
    // If its not a fluid grid, ignore the past columns
    .build() when ( ispixel(@total_width) ) {
        @columns: @grid-columns;
    }
    .build();
    // Get column width
    @column_width: (( @total_width / @columns  ) - @gutter_width );
    ////
    // Styles
    float: left;
    width: (@column_width * @col) + (@gutter_width * (@col - 1));
    .gutters( ( @gutter_width / 2 ) );
}
.column( @col, @columns : @grid-columns ) {
    position: relative;
    min-height: 1px;
    .media-mode() when (@media-mode = mobile-first), (@media-mode = desktop-first) {
        @media screen and ( min-width: @media-tablet-min ) {
            .make-column( @col, @grid-tablet-row-width, @grid-tablet-gutter-width );
        }
        @media screen and ( min-width: @media-desktop-min ) {
            .make-column( @col, @grid-desktop-row-width, @grid-desktop-gutter-width );
        }
        @media screen and ( min-width: @media-large ) {
            .make-column( @col, @grid-large-row-width, @grid-large-gutter-width );
        }
    }
    .media-mode() when (@media-mode = off) {
        .make-column( @col, @grid-row-width, @grid-gutter-width );
    }
    .media-mode();
}
.column-manual( @col, @template : @grid-row-width, @gutter : @grid-gutter-width, @columns : @grid-columns ) {
    position: relative;
    min-height: 1px;
    .template() when (isnumber(@template)) {
        .make-column( @col, @template, @gutter );
    }
    .template() when (@template = tablet) {
        .make-column( @col, @grid-tablet-row-width, @grid-tablet-gutter-width );
    }
    .template() when (@template = desktop) {
        .make-column( @col, @grid-desktop-row-width, @grid-desktop-gutter-width );
    }
    .template() when (@template = large) {
        .make-column( @col, @grid-large-row-width, @grid-large-gutter-width );
    }
    .template();
}

////
// Semantic Prefix
.make-prefix( @col, @total_width, @gutter_width ) {
    // Get column width
    @column_width: (( @total_width / @columns  ) - @gutter_width );
    // Styles
    padding-left: (@column_width * @col) + (@gutter_width * @col);
}
.prefix( @offset : 1, @columns : @grid-columns ) {
    .media-mode() when (@media-mode = mobile-first), (@media-mode = desktop-first) {
        @media screen and ( min-width: @media-tablet-min ) {
            .make-prefix( @offset, @grid-tablet-row-width, @grid-tablet-gutter-width );
        }
        @media screen and ( min-width: @media-desktop-min ) {
            .make-prefix( @offset, @grid-desktop-row-width, @grid-desktop-gutter-width );
        }
        @media screen and ( min-width: @media-large ) {
            .make-prefix( @offset, @grid-large-row-width, @grid-large-gutter-width );
        }
    }
    .media-mode() when (@media-mode = off) {
        .make-prefix( @offset, @grid-row-width, @grid-gutter-width );
    }
    .media-mode();
}
.prefix-manual( @offset : 1, @template : @grid-row-width, @gutter : @grid-gutter-width, @columns : @grid-columns ) {
    .template() when (isnumber(@template)) {
        .make-prefix( @offset, @template, @gutter );
    }
    .template() when (@template = tablet) {
        .make-prefix( @offset, @grid-tablet-row-width, @grid-tablet-gutter-width );
    }
    .template() when (@template = desktop) {
        .make-prefix( @offset, @grid-desktop-row-width, @grid-desktop-gutter-width );
    }
    .template() when (@template = large) {
        .make-prefix( @offset, @grid-large-row-width, @grid-large-gutter-width );
    }
    .template();
}

////
// Semantic Suffix
.make-suffix( @col, @total_width, @gutter_width ) {
    // Get column width
    @column_width: (( @total_width / @columns  ) - @gutter_width );
    // Styles
    padding-right: (@column_width * @col) + (@gutter_width * @col);
}
.suffix( @offset : 1, @columns : @grid-columns ) {
    .media-mode() when (@media-mode = mobile-first), (@media-mode = desktop-first) {
        @media screen and ( min-width: @media-tablet-min ) {
            .make-suffix( @offset, @grid-tablet-row-width, @grid-tablet-gutter-width );
        }
        @media screen and ( min-width: @media-desktop-min ) {
            .make-suffix( @offset, @grid-desktop-row-width, @grid-desktop-gutter-width );
        }
        @media screen and ( min-width: @media-large ) {
            .make-suffix( @offset, @grid-large-row-width, @grid-large-gutter-width );
        }
    }
    .media-mode() when (@media-mode = off) {
        .make-suffix( @offset, @grid-row-width, @grid-gutter-width );
    }
    .media-mode();
}
.suffix-manual( @offset : 1, @template : @grid-row-width, @gutter : @grid-gutter-width, @columns : @grid-columns ) {
    .template() when (isnumber(@template)) {
        .make-suffix( @offset, @template, @gutter );
    }
    .template() when (@template = tablet) {
        .make-suffix( @offset, @grid-tablet-row-width, @grid-tablet-gutter-width );
    }
    .template() when (@template = desktop) {
        .make-suffix( @offset, @grid-desktop-row-width, @grid-desktop-gutter-width );
    }
    .template() when (@template = large) {
        .make-suffix( @offset, @grid-large-row-width, @grid-large-gutter-width );
    }
    .template();
}

////
// Alpha
.make-alpha( @grid-row-width, @grid-gutter-width ) {
    .build() when ( ispixel(@grid-row-width) ) {
        .remove-gutter(0) when (@grid-gutter-property = margin) {                    
            margin-left: 0;
            margin-right: ( @grid-gutter-width / 2 );
        }
        .remove-gutter(0) when (@grid-gutter-property = padding) {                    
            padding-left: 0;
            padding-right: ( @grid-gutter-width / 2 );
        }
        .remove-gutter(0);
    }
    .build() when ( ispercentage(@grid-row-width) ) {
        .remove-gutter(0) when (@grid-gutter-property = margin) {                    
            margin-left: 0;
            margin-right: @grid-gutter-width;
        }
        .remove-gutter(0) when (@grid-gutter-property = padding) {                    
            padding-left: 0;
            padding-right: @grid-gutter-width;
        }
        .remove-gutter(0);
    }
    .build();
}
.alpha() {
    .media-mode() when (@media-mode = mobile-first), (@media-mode = desktop-first) {
        @media screen and ( min-width: @media-tablet-min ) {
            .make-alpha( @grid-tablet-row-width, @grid-tablet-gutter-width );
        }
        @media screen and ( min-width: @media-desktop-min ) {
            .make-alpha( @grid-desktop-row-width, @grid-desktop-gutter-width );
        }
        @media screen and ( min-width: @media-large ) {
            .make-alpha( @grid-large-row-width, @grid-large-gutter-width );
        }
    }
    .media-mode() when (@media-mode = off) {
        .make-alpha( @grid-row-width, @grid-gutter-width );
    }
    .media-mode();
}

////
// Omega
.make-omega( @grid-row-width, @grid-gutter-width ) {
    .build() when ( ispixel(@grid-row-width) ) {
        .remove-gutter(0) when (@grid-gutter-property = margin) {                    
            margin-right: 0;
            margin-left: ( @grid-gutter-width / 2 );
        }
        .remove-gutter(0) when (@grid-gutter-property = padding) {                    
            padding-right: 0;
            padding-left: ( @grid-gutter-width / 2 );
        }
        .remove-gutter(0);
    }
    .build() when ( ispercentage(@grid-row-width) ) {
        .remove-gutter(0) when (@grid-gutter-property = margin) {                    
            margin-right: 0;
            margin-left: @grid-gutter-width;
        }
        .remove-gutter(0) when (@grid-gutter-property = padding) {                    
            padding-right: 0;
            padding-left: @grid-gutter-width;
        }
        .remove-gutter(0);
    }
    .build();
}
.omega() {
    .media-mode() when (@media-mode = mobile-first), (@media-mode = desktop-first) {
        @media screen and ( min-width: @media-tablet-min ) {
            .make-omega( @grid-tablet-row-width, @grid-tablet-gutter-width );
        }
        @media screen and ( min-width: @media-desktop-min ) {
            .make-omega( @grid-desktop-row-width, @grid-desktop-gutter-width );
        }
        @media screen and ( min-width: @media-large ) {
            .make-omega( @grid-large-row-width, @grid-large-gutter-width );
        }
    }
    .media-mode() when (@media-mode = off) {
        .make-omega( @grid-row-width, @grid-gutter-width );
    }
    .media-mode();
}

////////////////////////////////////////////////////////////////////////////////
// Base Grid Styles
////////////////////////////////////////////////////////////////////////////////

.@{class-container} {
    .container();
}
.@{class-row} {
    .row();
}
@{all-columns} {
    position: relative;
    min-height: 1px;
}

////////////////////////////////////////////////////////////////////////////////
// Class Based Grid System
////////////////////////////////////////////////////////////////////////////////

#grid_system( @grid-row-width, @grid-gutter-width ) {
    
    ////
    // Global
    .global() {
        ////
        // Set column width
        @grid-column-width: (( @grid-row-width / @grid-columns  ) - @grid-gutter-width );
        ////
        // Column Builder
        .col-X (@index) when (@index > 0) {
            .@{class-column}@{index} { .col-(@index); }
            .col-X(@index - 1);
        }
        .col- (@columns) {
            width: (@grid-column-width * @columns) + (@grid-gutter-width * (@columns - 1));
        }
        .col-X (@grid-columns);
        ////
        // Prefix Builder
        .pre-X (@index) when (@index > 0) {
            .@{class-prefix}@{index} { .pre-(@index); }
            .pre-X(@index - 1);
        }
        .pre- (@columns) {
            padding-left: (@grid-column-width * @columns) + (@grid-gutter-width * @columns);
        }
        .pre-X (@grid-columns);
        ////
        // Suffix Builder
        .suf-X (@index) when (@index > 0) {
            .@{class-suffix}@{index} { .suf-(@index); }
            .suf-X(@index - 1);
        }
        .suf- (@columns) {
            padding-right: (@grid-column-width * @columns) + (@grid-gutter-width * @columns);
        }
        .suf-X (@grid-columns);
        ////
        // Base
        @{all-columns} {
            float: left;
            .gutters( ( @grid-gutter-width / 2 ) );
        }
        ////
        // Nested Columns
        .@{class-row} .@{class-row} @{all-columns} {
            .nested-gutters-first(0);
            .nested-gutters-last(0);
        }
        
    } // End of .global();
    ////
    // Static
    .static() {
        ////
        // Load global styles
        .global();
        ////
        // Nested Columns
        .@{class-row} .@{class-row} @{all-columns} {
            .nested-gutters-first-right( ( @grid-gutter-width / 2 ) );
            .nested-gutters-last-left( ( @grid-gutter-width / 2 ) );
        }
    } // End of .static();
    ////
    // Fluid
    .fluid() {
        ////
        // Load global styles
        .global();
        ////
        // Nested Columns
        .@{class-row} .@{class-row} @{all-columns} {
            .nested-gutters-first-right( @grid-gutter-width );
            .nested-gutters-last-left( @grid-gutter-width );
        }
    } // End of .fluid();
    ////
    // Guarded Mixins
    .build() when ( ispixel(@grid-row-width) ) {
        .static();
    }
    .build() when ( ispercentage(@grid-row-width) ) {
        .fluid();
    }
    ////
    // Build Styles
    .build();
    
}