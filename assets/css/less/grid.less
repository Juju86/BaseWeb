////////////////////////////////////////////////////////////////////////////////
// Grid Variables
////////////////////////////////////////////////////////////////////////////////

/**
 * Global grid settings
 */
@grid-total-width: 100%;
@grid-gutter-width: 2%;
@grid-columns: 12;

/**
 * Fluid grid settings
 */
@container-max-width: 1200px;
@container-margin: 20px;

/**
 * Grid class names
 */
@class-container: container;
@class-row: row;
@class-column: col;

@class-prefix: prefix;
@class-suffix: suffix;

////////////////////////////////////////////////////////////////////////////////
// Grid Mixins
////////////////////////////////////////////////////////////////////////////////

/**
 * Make container
 */

////////////////////////////////////////////////////////////////////////////////
// Base Mobile Grid System
////////////////////////////////////////////////////////////////////////////////

.@{class-container} {
    width: 100%;
    max-width: @container-max-width;
    padding-left: @container-margin;
    padding-right: @container-margin;
    .box-sizing( border-box );
}
.@{class-row} {
    .clearfix();
}
.@{class-column} {
    float: left;
    width: 100%;
    .box-sizing( border-box );
}

////////////////////////////////////////////////////////////////////////////////
// Class Based Grid System Mixin
////////////////////////////////////////////////////////////////////////////////

/**
 * Core grid styles
 */
.build-grid-system( @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width ) {
    
    .@{class-container} {
        width: @-total-width;
        margin-left: auto;
        margin-right: auto;
    }
    .@{class-column} {
        min-height: 1px;
        padding-left: @-gutter-width;
        .box-sizing( content-box );
        
        &:first-child {
            padding-left: 0;
        }
    }
        
}

/**
 * Fluid grid styles
 */
.build-grid-system( @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width ) when ( ispercentage(@-total-width) ) {
    
    @-column-width: (( @-total-width - ( @-gutter-width * ( @grid-columns - 1 ) ) ) / @grid-columns);
    
    .build-X (@index) when (@index > 0) {
        .@{class-column}-@{index} { .build-(@index); }
        .build-X(@index - 1);
    }
    .build-(@columns) {
        width: ((@-column-width * @columns) + (@-gutter-width * (@columns - 1)));
    }
    .build-X (@grid-columns);
    
}

/**
 * Fixed grid styles
 */
.build-grid-system( @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width ) when ( ispixel(@-total-width) ) {
    
    @-column-width: (( @-total-width - ( @-gutter-width * ( @grid-columns - 1 ) ) ) / @grid-columns);
    
    .@{class-container} {
        padding-left: 0;
        padding-right: 0;
    }
    
    .build-X (@index) when (@index > 0) {
        .@{class-column}-@{index} { .build-(@index); }
        .build-X(@index - 1);
    }
    .build-(@columns) {
        width: ((@-column-width * @columns) + (@-gutter-width * (@columns - 1)));
    }
    .build-X (@grid-columns);
    
}

////////////////////////////////////////////////////////////////////////////////
// Grid System Assignment
////////////////////////////////////////////////////////////////////////////////

#responsive {
    .small() {
        
    }
    .mobile() {
        
    }
    .tablet() {
        .build-grid-system();
    }
    .desktop() {
        
    }
    .large() {
        
    }
}