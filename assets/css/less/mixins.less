////////////////////////////////////////////////////////////////////////////////
// Mixins
////////////////////////////////////////////////////////////////////////////////

////
// Uppercase
// Makes text uppercase with optional letter spacing value.
.uppercase(@letterSpacing: @letterSpacing) {
    text-transform: uppercase;
    letter-spacing: @letterSpacing;
}

////
// Lowercase
// Makes text lowercase with optional letter spacing value
// but defaults to zero.
.lowercase(@letterSpacing: 0) {
    text-transform: lowercase;
    letter-spacing: @letterSpacing;
}

////
// Reset case
// Resets the text's text-transform property and sets letter
// spacing back to zero.
.resetcase() {
    text-transform: none;
    letter-spacing: 0;
}

////
// Remove list styles
// Removes default list styles of parent element
// and subsequent list items.
.remove-list-styles() {
    list-style: none;
    margin: 0;
    
    li {
        margin: 0;
    }
}

////
// Hide text
// Image replacement trick that hides text.
.hide-text() {
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}

////
// Clear Mixins
// Allows for clearfixing by adding as mixin or as class.
.clearfix {
    *zoom: 1;
    
    &:before, &:after {
        content: "\0020";
        display: block;
        overflow: hidden;
        visibility: hidden;
        width: 0;
        height: 0;
    }
    
    &:after {
        clear: both;
    }
}

////
// Utility State Mixins
.is-hidden() {
    display: none !important;
}
.is-visible( @display : @displayVisible ) {
    display: @display !important;
}

////////////////////////////////////////////////////////////////////////////////
// CSS3 Helpers
////////////////////////////////////////////////////////////////////////////////

////
// Border radius mixins
// These allow for more common sence writing of border
// radius styles and allow for global defaults.
////
.border-radius(@radius: @borderRadius) {
    border-radius: @radius;
}
////
// Top
.border-radius-top(@radius: @borderRadius) {
    border-top-left-radius: @radius;
    border-top-right-radius: @radius;
}
.border-radius-top-left(@radius: @borderRadius) {
    border-top-left-radius: @radius;
}
.border-radius-top-right(@radius: @borderRadius) {
    border-top-right-radius: @radius;
}
////
// Bottom
.border-radius-bottom(@radius: @borderRadius) {
    border-bottom-right-radius: @radius;
    border-bottom-left-radius: @radius;
}
.border-radius-bottom-left(@radius: @borderRadius) {
    border-bottom-left-radius: @radius;
}
.border-radius-bottom-right(@radius: @borderRadius) {
    border-bottom-right-radius: @radius;
}
////
// Left
.border-radius-left(@radius: @borderRadius) {
    border-top-left-radius: @radius;
    border-bottom-left-radius: @radius;
}
.border-radius-left-top(@radius: @borderRadius) {
    border-top-left-radius: @radius;
}
.border-radius-left-bottom(@radius: @borderRadius) {
    border-bottom-left-radius: @radius;
}
////
// Right
.border-radius-right(@radius: @borderRadius) {
    border-top-right-radius: @radius;
    border-bottom-right-radius: @radius;
}
.border-radius-right-top(@radius: @borderRadius) {
    border-top-right-radius: @radius;
}
.border-radius-right-bottom(@radius: @borderRadius) {
    border-bottom-right-radius: @radius;
}

////
// Box shadow
// Allows for the use of global default box shadow property.
.box-shadow(@shadow: @boxShadow) {
    box-shadow: @shadow;
}

////
// Transition
// Takes care of browser prefixes and allows for global default.
.transition(@property: @transitionProperty, @duration: @transitionDuration, @function: @transitionFunction) {
    -webkit-transition: @arguments;
    -moz-transition: @arguments;
    -o-transition: @arguments;
    -ms-transition: @arguments;
    transition: @arguments;
}

////
// Rotate
// Takes care of browser prefixes and allows for global default.
.rotate(@deg: @rotateDegree) {
    -moz-transform: rotate(@deg);
    -webkit-transform: rotate(@deg);
    -o-transform: rotate(@deg);
    -ms-transform: rotate(@deg);
    transform: rotate(@deg);
}

////
// Gradients
// Allows for the easy application for horizontal or vertical gradients
#gradient {
    ////
    // Horizontal
    .horizontal(@startColor: @startColorDefault, @endColor: @endColor) {
        background-color: @endColor;
        background-image: -moz-linear-gradient(left, @startColor, @endColor);
        background-image: -ms-linear-gradient(left, @startColor, @endColor);
        background-image: -webkit-gradient(linear, 0 0, 100% 0, from(@startColor), to(@endColor));
        background-image: -webkit-linear-gradient(left, @startColor, @endColor);
        background-image: -o-linear-gradient(left, @startColor, @endColor);
        background-image: linear-gradient(left, @startColor, @endColor);
        background-repeat: repeat-x;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",@startColor,@endColor));
    }
    ////
    // Vertical
    .vertical(@startColor: @startColorDefault, @endColor: @endColor) {
        background-color: @endColor;
        background-image: -moz-linear-gradient(top, @startColor, @endColor);
        background-image: -ms-linear-gradient(top, @startColor, @endColor);
        background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@startColor), to(@endColor));
        background-image: -webkit-linear-gradient(top, @startColor, @endColor);
        background-image: -o-linear-gradient(top, @startColor, @endColor);
        background-image: linear-gradient(top, @startColor, @endColor);
        background-repeat: repeat-x;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@startColor,@endColor));
    }
    ////
    // Reset filters for IE
    .reset-filter() {
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
    }
}

////////////////////////////////////////////////////////////////////////////////
// UI Helpers
////////////////////////////////////////////////////////////////////////////////

////
// RGBA
// Converts hex value to RGBA
// Returns as background-color prop with hex fallback
.rgba(@hex, @alpha: 1, @fallback : 0) {

    .fallback() when (@fallback = 0) {
        @fallback: @hex;
    }
    .fallback();
    
    background-color: @fallback;
    background-color: rgba( red(@hex), green(@hex), blue(@hex), @alpha);
}
////
// Returns as border-color prop with hex fallback
.rgba-border(@hex, @alpha: 1, @fallback : 0) {

    .fallback() when (@fallback = 0) {
        @fallback: @hex;
    }
    .fallback();

    border-color: @fallback;
    border-color: rgba( red(@hex), green(@hex), blue(@hex), @alpha);
}
////
// Returns as color prop with hex falback
.rgba-color(@hex, @alpha: 1, @fallback : 0) {

    .fallback() when (@fallback = 0) {
        @fallback: @hex;
    }
    .fallback();

    color: @fallback;
    color: rgba( red(@hex), green(@hex), blue(@hex), @alpha);
}

////
// Arrows
// Uses the "0x0" element with borders trick to draw triangles.
////
#arrow {
    ////
    // Base arrow properties. This should be condisered a private mixin.
    // Don't use on it's own.
    .base() {
        content: "\0020";
        display: inline-block;
        width: 0;
        height: 0;
        border: 0 none;
        border-style: solid;
        border-color: transparent;
    }
    ////
    // Up arrow
    .up( @arrow-width, @arrow-color ) {
        .base();
        border-width: 0 @arrow-width @arrow-width @arrow-width;
        border-bottom-color: @arrow-color;
    }
    ////
    // Right arrow
    .right( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width 0 @arrow-width @arrow-width;
        border-left-color: @arrow-color;
    }
    ////
    // Down arrow
    .down( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width @arrow-width 0 @arrow-width;
        border-top-color: @arrow-color;
    }
    ////
    // Left arrow
    .left( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width @arrow-width @arrow-width 0;
        border-right-color: @arrow-color;
    }
    
    ////
    // Up right, right up arrow
    .up-right( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-top-color: @arrow-color;
        border-right-color: @arrow-color;
    }
    .right-up( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-top-color: @arrow-color;
        border-right-color: @arrow-color;
    }
    
    ////
    // Up left, left up arrow
    .up-left( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-top-color: @arrow-color;
        border-left-color: @arrow-color;
    }
    .left-up( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-top-color: @arrow-color;
        border-left-color: @arrow-color;
    }
    
    ////
    // Down right, right down arrow
    .down-right( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-bottom-color: @arrow-color;
        border-right-color: @arrow-color;
    }
    .right-down( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-bottom-color: @arrow-color;
        border-right-color: @arrow-color;
    }
    
    ////
    // Down left, left down arrow
    .down-left( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-bottom-color: @arrow-color;
        border-left-color: @arrow-color;
    }
    .left-down( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-bottom-color: @arrow-color;
        border-left-color: @arrow-color;
    }
  
}

////
// Console
// Let's you output a LESS variable in the browser.
// Requires that "<div id="console"></div>" be somewhere in the DOM
// 
// @value: The variable whos value that you want to output
// @position: Where you want the console to appear: left, right, bottom-left, bottom-right.
////
.console(@value, @position : right) {
    
    .position() when ( @position = left ) {
        #console {
            top: 0;
            left: 0;
        }
        #console:after {
            .border-radius-bottom-right();
        }
    }
    .position() when ( @position = right ) {
        #console {
            top: 0;
            right: 0;
        }
        #console:before {
            .border-radius-bottom-left();
        }
    }
    .position() when ( @position = bottom-left ) {
        #console {
            bottom: 0;
            left: 0;
        }
        #console:after {
            .border-radius-top-right();
        }
    }
    .position() when ( @position = bottom-right ) {
        #console {
            bottom: 0;
            right: 0;
        }
        #console:before {
            .border-radius-top-left();
        }
    }
    .position();
    
    #console {
        position: fixed;
        z-index: 100;
        font-family: @monoFontFamily;
        font-size: 12px;
        line-height: 20px;
        
        &:before, &:after {
            display: block;
            padding: 5px 15px;
            float: left;
        }
        
        &:before {
            content: "Console:";
            background: @blue;
            color: @gE;
        }
        
        &:after {
            content: "@{value}";
            background: @gE;
            color: @colorDark;
        }
    }
}