////////////////////////////////////////////////////////////////////////////////
// Utility
////////////////////////////////////////////////////////////////////////////////

////
// Hide text
// Image replacement trick that hides text.
.hide-text() {
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}

////
// Clear Mixins
// Allows for clearfixing by adding as mixin or as class.
.clearfix {
    *zoom: 1;
    
    &:before, &:after {
        content: "\0020";
        display: block;
        overflow: hidden;
        visibility: hidden;
        width: 0;
        height: 0;
    }
    
    &:after {
        clear: both;
    }
}

////
// Utility State Mixins
.make-hidden() {
    display: none !important;
}
.make-visible( @display : @display-visible ) {
    display: @display !important;
}

////////////////////////////////////////////////////////////////////////////////
// Typography
////////////////////////////////////////////////////////////////////////////////

////
// EM
// Turns a pixel value into ems based on it's context
.em( @px, @lh : auto, @context : @font-size ) {
    // Calculate the EM value
    @size: round((@px / @context), 2);
    // Set properties
    font-size: unit( @size, em);
    .line-height() when (@lh = auto) {
        line-height: unit( round( ((@size + 0.6) / @size), 2), em);
    }
    .line-height() when (isnumber(@lh)) and (@lh > 0) {
        line-height: unit( round( (@lh / (@size * @context)), 2), em);
    }
    .line-height();
}
////
// REM
// Turns a pixel value into rems based on root element's font size
.rem( @px, @lh : auto ) {
    // Calculate the EM value
    @size: round((@px / @font-size), 2);
    // Set properties
    font-size: unit( ( @size ), rem);
    .line-height() when (@lh = auto) {
        line-height: unit( round( ((@size + 0.6) / @size), 2), em);
    }
    .line-height() when (isnumber(@lh)) and (@lh > 0) {
        line-height: unit( round( (@lh / (@size * @context)), 2), em);
    }
    .line-height();
}
////
// PX
// Converts an EM to pixels based on it's context
.px( @em, @lh : auto, @context: @font-size ) {
    // Calculate the size
    @size: unit( (round((@em * @context), 2) ), px);
    // But, if the value was already in pixels, just set it as the size.
    .check-value() when ( ispixel(@em) ) {
        @size: @em;
    }
    .check-value();
    // Set properties
    font-size: @size;
    .line-height() when (@lh = auto) {
        line-height: unit( round( (@size + @line-height-inc), 2), px);
    }
    .line-height() when (isnumber(@lh)) and (@lh > 0) {
        line-height: unit( @lh, px);
    }
    .line-height();
}

////
// Root Font Size
// Sets the root font size for the html element
// This is important when using REM in your document
.root-font-size( @font-size : @font-size, @line-height : auto, @unit : 16 ) {
    .build() when (@font-unit = em) {
        .em( @font-size, @line-height, @unit );
    }
    .build() when (@unit = px) {
        font-size: @font-size;
        .line-height() when (@line-height = auto) {
            line-height: (@font-size + @line-height-inc);
        }
        .line-height() when (isnumber(@line-height)) and (@line-height > 0) {
            line-height: @line-height;
        }
        .line-height();
    }
    .build();
}
////
// Font Sequence
// Sets font-size and line-height based on a multiplier
.font-sequence( @font-size, @line-height : auto, @unit : @font-unit ) {
    .build() when (@unit = em) {
        .em( @font-size, @line-height );
    }
    .build() when (@unit = px) {
        font-size: @font-size;
        .line-height() when (@line-height = auto) {
            line-height: (@font-size + @line-height-inc);
        }
        .line-height() when (isnumber(@line-height)) and (@line-height > 0) {
            line-height: @line-height;
        }
        .line-height();
    }
    .build();
}

////
// Mono Font Settings
.mono-font( @size : @font-size-code ) {
    font-family: @font-family-mono;
    .font-sequence( @size );
}

////
// Uppercase
// Makes text uppercase with optional letter spacing value.
.uppercase(@letter-spacing: @letter-spacing) {
    text-transform: uppercase;
    letter-spacing: @letter-spacing;
}

////
// Lowercase
// Makes text lowercase with optional letter spacing value
// but defaults to zero.
.lowercase(@letter-spacing: 0) {
    text-transform: lowercase;
    letter-spacing: @letter-spacing;
}

////
// Reset case
// Resets the text's text-transform property and sets letter
// spacing back to zero.
.resetcase() {
    text-transform: none;
    letter-spacing: 0;
}

////
// Truncate Text
// Truncates text with an ellipsis. Element applied must be `block` or `inline-block`
.truncate-text( @display : block ) {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    // Display Setting
    .display() when ( @display = inline-block ), ( @display = block ) {
        display: @display;
    }
    .display();
}

////
// Remove list styles
// Removes default list styles of parent element
// and subsequent list items.
.remove-list-styles() {
    list-style: none;
    margin: 0;
    
    li {
        margin: 0;
    }
}

////
// Inline Lists
// Turns list items inline
.inline-list( @margin : @margin, @side : right  ) {
    
    li {
        display: inline-block;
        
        .side() when ( @side = right ) {
            margin-right: @margin;
        }
        .side() when ( @side = left ) {
            margin-left: @margin;
        }
        .side() when ( @side = both ) {
            margin-left: (@margin / 2);
            margin-right: (@margin / 2);
        }
        .side();
    }
}

////////////////////////////////////////////////////////////////////////////////
// Image Mixins
////////////////////////////////////////////////////////////////////////////////

////
// Rounded
.rounded() {
    .border-radius();
}
// Circle
.circle() {
    .border-radius(50%);
}
// Polaroid
.polaroid {
    background: @white;
    background-clip: padding-box;
    padding: 5px;
    border: 1px solid;
    .border-color(@black, 0.2, #ccc);
    .box-shadow( 0 1px 5px rgba(0,0,0, 0.1) );
}

////////////////////////////////////////////////////////////////////////////////
// CSS3 Helpers
////////////////////////////////////////////////////////////////////////////////

////
// Border radius mixins
// These allow for more common sence writing of border
// radius styles and allow for global defaults.
////
.border-radius(@radius: @border-radius) {
    border-radius: @radius;
}
////
// Top
.border-radius-top(@radius: @border-radius) {
    border-top-left-radius: @radius;
    border-top-right-radius: @radius;
}
.border-radius-top-left(@radius: @border-radius) {
    border-top-left-radius: @radius;
}
.border-radius-top-right(@radius: @border-radius) {
    border-top-right-radius: @radius;
}
////
// Bottom
.border-radius-bottom(@radius: @border-radius) {
    border-bottom-right-radius: @radius;
    border-bottom-left-radius: @radius;
}
.border-radius-bottom-left(@radius: @border-radius) {
    border-bottom-left-radius: @radius;
}
.border-radius-bottom-right(@radius: @border-radius) {
    border-bottom-right-radius: @radius;
}
////
// Left
.border-radius-left(@radius: @border-radius) {
    border-top-left-radius: @radius;
    border-bottom-left-radius: @radius;
}
.border-radius-left-top(@radius: @border-radius) {
    border-top-left-radius: @radius;
}
.border-radius-left-bottom(@radius: @border-radius) {
    border-bottom-left-radius: @radius;
}
////
// Right
.border-radius-right(@radius: @border-radius) {
    border-top-right-radius: @radius;
    border-bottom-right-radius: @radius;
}
.border-radius-right-top(@radius: @border-radius) {
    border-top-right-radius: @radius;
}
.border-radius-right-bottom(@radius: @border-radius) {
    border-bottom-right-radius: @radius;
}

////
// Box sizing
.box-sizing(@boxmodel) {
    -webkit-box-sizing: @boxmodel;
    -moz-box-sizing: @boxmodel;
    box-sizing: @boxmodel;
}

////
// Box shadow
// Allows for the use of global default box shadow property.
.box-shadow(@shadow: @box-shadow) {
    box-shadow: @shadow;
}
////
// RGBA Box Shadows
// An attempted to make using RGBA in box shadows easier.
.rgba-box-shadow( @details, @color, @alpha ) {
    box-shadow: @details rgba( red(@color), green(@color), blue(@color), @alpha);
}

////
// Transition
// Takes care of browser prefixes and allows for global default.
// Transitions
.transition( @transition: @transition ) {
    -webkit-transition: @transition;
    -moz-transition: @transition;
    -o-transition: @transition;
    transition: @transition;
}
.transition-delay( @transition-delay : @transition-delay ) {
    -webkit-transition-delay: @transition-delay;
    -moz-transition-delay: @transition-delay;
    -o-transition-delay: @transition-delay;
    transition-delay: @transition-delay;
}
.transition-duration( @transition-duration : @transition-duration ) {
    -webkit-transition-duration: @transition-duration;
    -moz-transition-duration: @transition-duration;
    -o-transition-duration: @transition-duration;
    transition-duration: @transition-duration;
}

////
// Rotate
// Takes care of browser prefixes and allows for global default.
.rotate(@deg: @rotate-degree) {
    -moz-transform: rotate(@deg);
    -webkit-transform: rotate(@deg);
    -o-transform: rotate(@deg);
    -ms-transform: rotate(@deg);
    transform: rotate(@deg);
}

////
// Gradients
// Allows for the easy application for horizontal or vertical gradients
////
#gradient {
    ////
    // Horizontal
    .horizontal(@start-color: @gradient-start-color, @end-color: @gradient-end-color) {
        background-color: @end-color;
        background-image: -moz-linear-gradient(left, @start-color, @end-color);
        background-image: -ms-linear-gradient(left, @start-color, @end-color);
        background-image: -webkit-gradient(linear, 0 0, 100% 0, from(@start-color), to(@end-color));
        background-image: -webkit-linear-gradient(left, @start-color, @end-color);
        background-image: -o-linear-gradient(left, @start-color, @end-color);
        background-image: linear-gradient(left, @start-color, @end-color);
        background-repeat: repeat-x;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",@start-color,@end-color));
    }
    ////
    // Vertical
    .vertical(@start-color: @gradient-start-color, @end-color: @gradient-end-color) {
        background-color: @end-color;
        background-image: -moz-linear-gradient(top, @start-color, @end-color);
        background-image: -ms-linear-gradient(top, @start-color, @end-color);
        background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@start-color), to(@end-color));
        background-image: -webkit-linear-gradient(top, @start-color, @end-color);
        background-image: -o-linear-gradient(top, @start-color, @end-color);
        background-image: linear-gradient(top, @start-color, @end-color);
        background-repeat: repeat-x;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@start-color,@end-color));
    }
    ////
    // Directional
    .directional(@start-color: @gradient-start-color, @end-color: @gradient-end-color, @deg: @gradient-deg) {
        background-color: @end-color;
        background-repeat: repeat-x;
        background-image: -moz-linear-gradient(@deg, @start-color, @end-color); // FF 3.6+
        background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1+, Chrome 10+
        background-image: -o-linear-gradient(@deg, @start-color, @end-color); // Opera 11.10
        background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10
    }
    ////
    // Horizontal with Three Colors
    .horizontal-three-colors(@start-color: @gradient-start-color, @center-color: @gradient-center-color, @color-stop: @gradient-color-stop, @end-color: @gradient-end-color) {
        background-color: mix(@center-color, @end-color, 80%);
        background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @center-color), to(@end-color));
        background-image: -webkit-linear-gradient(left, @start-color, @center-color @color-stop, @end-color);
        background-image: -moz-linear-gradient(left, @start-color, @center-color @color-stop, @end-color);
        background-image: -o-linear-gradient(left, @start-color, @center-color @color-stop, @end-color);
        background-image: linear-gradient(to right, @start-color, @center-color @color-stop, @end-color);
        background-repeat: no-repeat;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
    }
    ////
    // Vertical with Three Colors
    .vertical-three-colors(@start-color: @gradient-start-color, @center-color: @gradient-center-color, @color-stop: @gradient-color-stop, @end-color: @gradient-end-color) {
        background-color: mix(@center-color, @end-color, 80%);
        background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @center-color), to(@end-color));
        background-image: -webkit-linear-gradient(@start-color, @center-color @color-stop, @end-color);
        background-image: -moz-linear-gradient(top, @start-color, @center-color @color-stop, @end-color);
        background-image: -o-linear-gradient(@start-color, @center-color @color-stop, @end-color);
        background-image: linear-gradient(@start-color, @center-color @color-stop, @end-color);
        background-repeat: no-repeat;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
    }
    ////
    // Radial
    .radial(@inner-color: @gradient-start-color, @outer-color: @gradient-end-color) {
        background-color: @outer-color;
        background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@inner-color), to(@outer-color));
        background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);
        background-image: -moz-radial-gradient(circle, @inner-color, @outer-color);
        background-image: -o-radial-gradient(circle, @inner-color, @outer-color);
        background-repeat: no-repeat;
    }
    ////
    // Striped
    .striped(@color: @gradient-start-color, @angle: @gradient-deg) {
        background-color: @color;
        background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
        background-image: -webkit-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-image: -moz-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-image: -o-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
        background-image: linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    }
    ////
    // Reset filters for IE
    .reset-filter() {
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
    }
}

////////////////////////////////////////////////////////////////////////////////
// UI Helpers
////////////////////////////////////////////////////////////////////////////////

////
// Background, Border and Text Color
// Returns a background-color based on alpha channel
.background-color(@hex, @alpha : 1, @fallback : 0) {

    .fallback() when (@fallback = 0) {
        @fallback: @hex;
    }
    .fallback();
    
    .background() when (@alpha = 1) {
        background-color: @fallback;
    }
    .background() when (@alpha = 0) {
        background-color: transparent;
    }
    .background() when (@alpha < 1) and (@alpha > 0) {
        background-color: @fallback;
        background-color: rgba( red(@hex), green(@hex), blue(@hex), @alpha);
    }
    .background();
}
.background-color-default() {
    .background-color( @bg-base, @bg-alpha, @bg );
}
////
// Returns a border-color based on alpha channel
.border-color(@hex, @alpha : 1, @fallback : 0) {

    .fallback() when (@fallback = 0) {
        @fallback: @hex;
    }
    .fallback();
    
    .border() when (@alpha = 1) {
        border-color: @fallback;
    }
    .border() when (@alpha = 0) {
        border-color: transparent;
    }
    .border() when (@alpha < 1) and (@alpha > 0) {
        border-color: @fallback;
        border-color: rgba( red(@hex), green(@hex), blue(@hex), @alpha);
    }
    .border();
}
.border-color-default() {
    .border-color( @border-base, @border-alpha, @border );
}
////
// Returns a color based on alpha channel
.color(@hex, @alpha : 1, @fallback : 0) {

    .fallback() when (@fallback = 0) {
        @fallback: @hex;
    }
    .fallback();
    
    .color() when (@alpha = 1) {
        color: @hex;
    }
    .color() when (@alpha = 0) {
        color: transparent;
    }
    .color() when (@alpha < 1) and (@alpha > 0) {
        color: @fallback;
        color: rgba( red(@hex), green(@hex), blue(@hex), @alpha);
    }
    .color();
}

////
// Arrows
// Uses the "0x0" element with borders trick to draw triangles.
////
#arrow {
    ////
    // Base arrow properties. This should be condisered a private mixin.
    // Don't use on it's own.
    .base() {
        content: "\0020";
        display: inline-block;
        width: 0;
        height: 0;
        border: 0 none;
        border-style: solid;
        border-color: transparent;
    }
    ////
    // Up arrow
    .up( @arrow-width, @arrow-color ) {
        .base();
        border-width: 0 @arrow-width @arrow-width @arrow-width;
        border-bottom-color: @arrow-color;
    }
    ////
    // Right arrow
    .right( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width 0 @arrow-width @arrow-width;
        border-left-color: @arrow-color;
    }
    ////
    // Down arrow
    .down( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width @arrow-width 0 @arrow-width;
        border-top-color: @arrow-color;
    }
    ////
    // Left arrow
    .left( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width @arrow-width @arrow-width 0;
        border-right-color: @arrow-color;
    }
    
    ////
    // Up right, right up arrow
    .up-right( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-top-color: @arrow-color;
        border-right-color: @arrow-color;
    }
    .right-up( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-top-color: @arrow-color;
        border-right-color: @arrow-color;
    }
    
    ////
    // Up left, left up arrow
    .up-left( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-top-color: @arrow-color;
        border-left-color: @arrow-color;
    }
    .left-up( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-top-color: @arrow-color;
        border-left-color: @arrow-color;
    }
    
    ////
    // Down right, right down arrow
    .down-right( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-bottom-color: @arrow-color;
        border-right-color: @arrow-color;
    }
    .right-down( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-bottom-color: @arrow-color;
        border-right-color: @arrow-color;
    }
    
    ////
    // Down left, left down arrow
    .down-left( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-bottom-color: @arrow-color;
        border-left-color: @arrow-color;
    }
    .left-down( @arrow-width, @arrow-color ) {
        .base();
        border-width: @arrow-width;
        border-bottom-color: @arrow-color;
        border-left-color: @arrow-color;
    }
  
}

////
// Console
// Let's you output a LESS variable in the browser.
// Requires that "<div id="console"></div>" be somewhere in the DOM
// 
// @value: The variable whos value that you want to output
// @position: Where you want the console to appear: left, right, bottom-left, bottom-right.
////
.console(@value, @position : right) {
    
    .position() when ( @position = left ) {
        #console {
            top: 0;
            left: 0;
        }
        #console:after {
            .border-radius-bottom-right();
        }
    }
    .position() when ( @position = right ) {
        #console {
            top: 0;
            right: 0;
        }
        #console:before {
            .border-radius-bottom-left();
        }
    }
    .position() when ( @position = bottom-left ) {
        #console {
            bottom: 0;
            left: 0;
        }
        #console:after {
            .border-radius-top-right();
        }
    }
    .position() when ( @position = bottom-right ) {
        #console {
            bottom: 0;
            right: 0;
        }
        #console:before {
            .border-radius-top-left();
        }
    }
    .position();
    
    #console {
        position: fixed;
        z-index: 100;
        .mono-font();
        
        &:before, &:after {
            display: block;
            padding: 5px 15px;
            float: left;
        }
        
        &:before {
            content: "Console:";
            background: @blue;
            color: @gE;
        }
        
        &:after {
            content: "@{value}";
            background: @gE;
            color: @color-dark;
        }
    }
}