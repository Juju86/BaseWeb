// Set file variable
$filename: 'scss/elements/_close.scss';

////////////////////////////////////////////////////////////////////////////////
// @Close Map
////////////////////////////////////////////////////////////////////////////////

$close: (
  'output' : true,
  'classes-inverted' : true,

  'class' : 'close',
  'margin' : 0,
  'padding' : 0.125em,
  'border-radius' : 5em,
  'transition' : $transition,
  'font-size' : 1rem,

  // Default style
  'style' : null,

  // Base colors
  'color' : $white,
  'background' : rgba($black, 0.25),
  'border' : none,
  'hover' : (
    'color' : $white,
    'background' : rgba($black, 0.5),
    'border-color' : null,
  ),

  // Modifier colors
  'modifiers' : (
    'inverted' : (
      'color' : $color,
      'background' : rgba($white, 0.5),
      'hover' : (
        'color' : $color,
        'background' : rgba($white, 1),
      ),
    ),
    'danger' : (
      'background' : $red,
      'hover' : (
        'background' : $red-700,
      ),
    ),
  ),

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'close') == true) {
    $close: map-extend($close, map-get($override, 'close'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Close Mixins
////////////////////////////////////////////////////////////////////////////////

// Make close
// Creates the base styles for the close element
// @param $options
//   @type map
//   @default $close map
@mixin make-close($options: ()) {
  $o: map-merge($close, $options);

  cursor: pointer;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  margin: map-get($o, 'margin');
  padding: map-get($o, 'padding');
  font-size: map-get($o, 'font-size');
  border: map-get($o, 'border');
  border-radius: map-get($o, 'border-radius');
  transition: map-get($o, 'transition');

  @content;

  // Remove margins from icon
  @if (variable-exists(icons)) {
    .#{map-get($icons, 'class')} {
      margin: 0;
    }
  }
}

// Add Close Color
// Creates the color styles for close element
// @param $options
//   @type map
//   @default $close map
// @param $style
//   @type string
//   @default null
@mixin add-close-color($options: ()) {
  $o: map-extend($close, $options, true);

  $style : map-get($o, 'style');

  @if ($style) {
    @if (map-has-key(map-get($o, 'modifiers'), $style) == true) {
      $o: map-fetch($o, 'modifiers', $style);
    } @else if ($style != 'default') {
      @warn 'The $close map does not contain the modifier of "#{$style}"!';
    }
  }

  @include add-color($o, $output-mods: false);
}

// Check if we should output modifier classes
@if (map-get($close, 'output') == true) {

/*==============================================================================
  @Close - #{$filename}
==============================================================================*/

.#{map-get($close, 'class')} {
  @include make-close();
}

/**
 * Close Colors
 */
.#{map-get($close, 'class')} {
  @include add-color($close);
}

} // endif classes
