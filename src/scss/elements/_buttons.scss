// Set file variable
$filename: 'scss/elements/_buttons.scss';

////////////////////////////////////////////////////////////////////////////////
// @Button Variables
////////////////////////////////////////////////////////////////////////////////

// Button Map
// Define all the settings for button mixins and classes.
$buttons: (
  'classes' : true,
  
  'padding-small' : 0.25em 0.75em,
  'padding' : 0.75em 1.5em,
  'padding-large' : 1.25em 2em,
  
  'font-size' : 1em,
  'line-height' : 1.5em,
  'color' : $color-dark,
  'color-hover' : default,
  'text-shadow' : none,
  
  'background' : rgba($black, 0.05),
  'background-hover' : rgba($black, 0.1),
  'background-gradient' : false,
  'background-deg' : 5%,
  'background-clip' : border-box,
  
  'box-shadow' : inset 0 0 0 rgba($black, 0),
  'box-shadow-hover' : inset 0 1px 2px rgba($black, 0.1),
  
  'border' : 1px solid rgba($black, 0.15),
  'border-hover' : 1px solid rgba($black, 0.25),
  'border-radius' : $border-radius,
) !default;

////////////////////////////////////////////////////////////////////////////////
// @Button Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Button Base
// Creates the base styles for a button modifer mixin or class. Usually applied directly through a base list class, mixin or an extend placeholder.
// @param $options
//   @type map
//   @default $buttons map
@mixin make-btn-base($options: ()) {
  $o: map-merge( $buttons, $options);
  cursor: pointer;
  display: inline-block;
  outline: none;
  margin: 0;
  padding: map-get($o, 'padding');
  font-family: inherit;
  font-size: map-get($o, 'font-size');
  line-height: map-get($o, 'line-height');
  color: map-get($o, 'color');
  font-weight: inherit;
  text-align: center;
  white-space: nowrap;
  vertical-align: top;
  background: transparent;
  border: map-get($o, 'border');
  box-shadow: map-get($o, 'box-shadow');
  @include border-radius(map-get($o, 'border-radius'));
  @include transition(all 1s);
  
  &:hover, &:focus, &:active {
    color: map-get($o, 'color');
    background: rgba($black, 0.025);
    box-shadow: map-get($o, 'box-shadow-hover');
    @include transition(all 0.25s);
  }
}

// Make Button Color
// Handles all the color variables of a button such as color, background, border and hover state.
// @param $options
//   @type map
//   @default $buttons map
@mixin make-btn-color($options: ()) {
  $o: map-merge( $buttons, $options);
  color: map-get($o, 'color');
  text-shadow: map-get($o, 'text-shadow');
  @if (map-get($o, 'background-gradient') == true) {
    @include linear-gradient(top, map-get($o, 'background'), darken(map-get($o, 'background'), map-get($o, 'background-deg')));
    background-repeat: repeat-x;
    background-position: 0 100%;
    background-color: darken(map-get($o, 'background'), map-get($o, 'background-deg'));
  } @else {
    background-color: map-get($o, 'background');
  }
  background-clip: map-get($o, 'background-clip');
  border: map-get($o, 'border');
  &:hover, &:focus, &:hover {
    @if (map-get($o, 'color-hover') == default) {
      color: map-get($o, 'color');
    } @else {
      color: map-get($o, 'color-hover');
    }
    @if (map-get($o, 'background-gradient') == true) {
      background-color: darken(map-get($o, 'background'), map-get($o, 'background-deg'));
      background-position: 0 -40px;
    } @else {
      @if (map-get($o, 'background-hover') == darken) {
        background-color: darken(map-get($o, 'background'), map-get($o, 'background-deg'));
      } @else if (map-get($o, 'background-hover') == lighten) {
        background-color: lighten(map-get($o, 'background'), map-get($o, 'background-deg'));
      } @else {
        background-color: map-get($o, 'background-hover');
      }
    }
    border: map-get($o, 'border-hover');
  }
}

// Add Button Size
// Handles size variations for buttons. This is done by changing the padding, font-size and line-height based on the parameters passed.
// @param $size
//   @type small | Large | unit list (pixel, em, percent)
// @param $options
//   @type map
//   @default $buttons map
@mixin add-btn-size($size, $options: ()) {
  $o: map-merge( $buttons, $options);
  @if ($size == small) {
    padding: map-get($o, 'padding-small');
  } @else if ($size == default) {
    padding: map-get($o, 'padding');
  } @else if ($size == large) {
    padding: map-get($o, 'padding-large');
  } @else {
    padding: $size;
  }
  @if (map-get($o, 'font-size') != map-get($buttons, 'font-size')) {
    font-size: map-get($o, 'font-size');
  }
  @if (map-get($o, 'line-height') != map-get($buttons, 'line-height')) {
    line-height: map-get($o, 'line-height');
  }
}

// Add Button Block
// Makes the button block, 100% width with some top and bottom margin. This is typically used for mobile friendly buttons.
// @param $options
//   @type map
//   @default $buttons map
@mixin add-btn-block($options: ()) {
  $o: map-merge( $buttons, $options);
  display: block;
  width: 100%;
}

// Check if we should output modifier classes
@if (map-get($buttons, 'classes') == true) {

/*==============================================================================
  @Buttons - #{$filename}
==============================================================================*/

/**
 * Base Button
 */
.btn {
  @include make-btn-base();
}

/**
 * Button Color
 */
.btn-default {
  @include make-btn-color();
}
.btn-blue {
  @include make-btn-color((
    'color' : $white,
    'text-shadow' : 0 1px 1px rgba($black, 0.25),
    'background' : $blue,
    'background-hover' : darken,
  ));
}
.btn-green {
  @include make-btn-color((
    'color' : $white,
    'text-shadow' : 0 1px 1px rgba($black, 0.25),
    'background' : $green,
    'background-hover' : darken,
  ));
}
.btn-orange {
  @include make-btn-color((
    'color' : $white,
    'text-shadow' : 0 1px 1px rgba($black, 0.25),
    'background' : $orange,
    'background-hover' : darken,
  ));
}
.btn-red {
  @include make-btn-color((
    'color' : $white,
    'text-shadow' : 0 1px 1px rgba($black, 0.25),
    'background' : $red,
    'background-hover' : darken,
  ));
}
.btn-black {
  @include make-btn-color((
    'color' : $white,
    'text-shadow' : 0 1px 1px rgba($black, 0.25),
    'background' : $gray,
    'background-hover' : lighten,
  ));
}

// Semantic button classes
.btn-primary {
  @extend .btn-blue;
}
.btn-secondary {
  @extend .btn-black;
}
.btn-success {
  @extend .btn-green;
}
.btn-warning {
  @extend .btn-orange;
}
.btn-danger {
  @extend .btn-red;
}

/**
 * Button Size
 */
.btn-small {
  // @include add-btn-size(small);
  @include add-btn-size(small, ('font-size': 12px));
}
.btn-large {
  // @include add-btn-size(large);
  @include add-btn-size(large, ('font-size': 18px));
}
.btn-block {
  @include add-btn-block();
}

} // endif
