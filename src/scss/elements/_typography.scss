// Set file variable
$filename: 'scss/elements/_typography.scss';

////////////////////////////////////////////////////////////////////////////////
// @Typography Variables
////////////////////////////////////////////////////////////////////////////////

// Font Families
// @type font-stack
$font-family-sans: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Roboto", "Helvetica Neue", Arial, sans-serif !default;
$font-family-serif: georgia, "Times New Roman", times, serif !default;
$font-family-mono: Menlo, Monaco, Consolas, "Courier New", monospace !default;

// Base Font Styles
// @type font-stack
$base-font-family: $font-family-sans !default;

// @type unit (pixel)
$base-font-size: 16px !default;

// @type unit (pixel, em, percentage)
$base-line-height: 1.5em !default;

// @type value (keyword, numeric)
$base-font-weight: font-weight('normal') !default;

// Text Color Assignment
// @type color
$color:         $gray-900 !default;
$color-light:   $gray !default;
$color-dark:    $gray-900 !default;

// Miscellaneous
// @type unit (pixel)
$letter-spacing: 1px !default;

// @type boolean
$text-elements: true;
$text-modifiers: true;

////////////////////////////////////////////////////////////////////////////////
// @Anchors Maps
////////////////////////////////////////////////////////////////////////////////

$anchors: (
  'output' : true,

  'color' : $blue,
  'border-bottom' : 1px solid rgba($black, 0.1),
  'text-decoration' : none,

  'hover' : (
    'color' : $blue-700,
    'border-color' : inherit,
  ),

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'anchors') == true) {
    $anchors: map-extend($anchors, map-get($override, 'anchors'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Headings Maps
////////////////////////////////////////////////////////////////////////////////

$headings: (
  'output' : true,

  'margin' : 1rem 0,
  'font-family' : inherit,
  'line-height' : 1.25em,
  'font-weight' : font-weight('semi-bold'),
  'color' : $color-dark,

  'anchors' : (
    'output' : true,

    'color' : $color-dark,
    'border' : none,

    'hover' : (
      'color' : $blue,
    ),
  ),

  'scale' : (
    'h1' : 2.5em,
    'h2' : 2em,
    'h3' : 1.75em,
    'h4' : 1.5em,
    'h5' : 1.25em,
    'h6' : 1em,
  ),

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'headings') == true) {
    $headings: map-extend($headings, map-get($override, 'headings'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Shorthands
////////////////////////////////////////////////////////////////////////////////

// Anchors color Shorthands
$anchor-color: map-get($anchors, 'color') !default;
$anchor-hover-color: map-fetch($anchors, 'hover', 'color') !default;

// Headings color Shorthands
$heading-color: map-get($headings, 'color') !default;
$heading-anchor-color: map-fetch($headings, 'anchors', 'color') !default;
$heading-anchor-hover-color: map-fetch($headings, 'anchors', 'hover', 'color') !default;

////////////////////////////////////////////////////////////////////////////////
// @Typography Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Anchor
// Creates the base ancho styles using the $anchors map for defaults.
// @param $options
//   @type map
//   @default $anchors map
@mixin make-anchor($options: ()) {
  $o: map-extend($anchors, $options, true);
  @include add-styles($o);
}

// Build Headings
// Creates the base styles for headings using the $headings map for defaults.
// @param $options
//   @type map
//   @default $headings map
@mixin build-headings($options: ()) {
  $o: map-extend($headings, $options, true);

  h1, h2, h3, h4, h5, h6,
  .h1, .h2, .h3, .h4, .h5, .h6 {
    @include add-styles($o);

    @if (map-fetch($o, 'anchors', 'output') == true) {
      a {
        @include make-anchor(map-get($o, 'anchors'));
      }
    }
  }

  @each $heading, $size in map-get($o, 'scale') {
    #{$heading}, .#{$heading} {
      font-size: $size;
    }
  }
}

// Add Truncate Text
// Truncates text with an ellipsis. Element this is applied to must be block
// or inline-block.
// @param $display
//   @type display property (block, inline-block)
//   @default block
@mixin add-text-truncate( $display : block ) {
  @if ($display == inline-block or $display == block) {
    display: $display;
  }
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Add Hide text
// Hides text from an element. This is most commonly used as an image
// replacement technique for hiding text in an element to reveal a
// background image.
@mixin add-text-hide() {
  font-size: 0;
  line-height: 0;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

/*==============================================================================
  @Typography - #{$filename}
================================================================================
 *
 * Sets the base typographic styles for BaseWeb.
 *
 * 1. Set the base font size to the `<html>` element because that's what is
 *    used when sizing things with Rem.
 * 2. Makes safari fonts not look terrible.
 */

html {
  font-size: $base-font-size; /* [1] */
}

body {
  font-family: $base-font-family;
  font-size: $base-font-size;
  line-height: $base-line-height;
  font-weight: $base-font-weight;
  color: $color;
  -webkit-font-smoothing: subpixel-antialiased; /* [2] */
}

// Check if we should output anchor styles
@if (map-get($anchors, 'output') == true) {

/**
 * Anchors
 */
a {
  @include make-anchor();
}

} // End if $anchors output is true

// Check if we should output heading styles
@if (map-get($headings, 'output') == true) {

/**
 * Headings
 */
@include build-headings();

} // End if $headings output is true

@if ($text-elements == true) {

/**
 * Paragraphs
 */
p {
  margin: 1em 0;
}

/**
 * Inline Text Elements
 */
strong {
  font-weight: bold;
}
em {
  font-style: italic;
}
small {
  font-size: 0.8em;
}
mark {
  background: rgba(#ff0, 0.5);
}
cite {
  font-style: italic;
}
abbr[title],
abbr[data-original-title] {
  cursor: help;
  text-decoration: underline dotted;
}

} // End if $text-elements is true

@if ($text-modifiers == true) {

/**
 * Stylistic Classes
 */
.text-lead {
  font-size: px-to-em(24px);
  line-height: 1.4em;
  color: $color-dark;
  font-weight: font-weight('light');

  a {
    text-decoration: none;
  }
}

.text-small {
  font-size: 0.8em;
  line-height: 1.5em;
}
.text-soften {
  font-weight: $base-font-weight;
  color: $color-light;
}
.text-harden {
  font-weight: bold;
  color: $color-dark;
}

/**
 * Alignment Classes
 */
.text-left {
  text-align: left;
}
.text-center {
  text-align: center;
}
.text-right {
  text-align: right;
}
.text-justify {
  text-align: justify;
}
.text-nowrap {
  white-space: nowrap;
}

/**
 * Transformation Classes
 */
.text-lowercase {
  text-transform: lowercase;
}
.text-uppercase {
  text-transform: uppercase;
}
.text-capitalize {
  text-transform: capitalize;
}

} // End if $text-modifiers is true
