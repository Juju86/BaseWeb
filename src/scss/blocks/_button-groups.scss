// Set file variable
$filename: 'scss/blocks/_button-groups.scss';

// Required components warning
@if (variable-exists(buttons) == false) {
  @warn "The button-groups block component requires the buttons element component!";
}

////////////////////////////////////////////////////////////////////////////////
// @Button Groups Map
////////////////////////////////////////////////////////////////////////////////

$button-groups: (
  'output' : true,
  'class' : 'button-group',

  'display' : 'inline',
  'orientation' : 'horizontal',

  'spacing' : 0.25em,
  'border-radius' : map-get($buttons, 'border-radius'),
  'inner-border-radius' : 0,

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'button-groups') == true) {
    $button-groups: map-extend($button-groups, map-get($override, 'button-groups'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Button Groups Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Button Group
// Creates the base styles for button groups.
// @param $defaults
//   @type boolean
//   @default true
// @param $options
//   @type map
//   @default $button-groups map
@mixin make-button-group($defaults: true, $options: ()) {
  $o: map-merge($button-groups, $options);

  @if ($defaults == true) {
    @include add-button-group-display(map-get($o, 'display'));
    @include add-button-group-orientation(map-get($o, 'orientation'));
  }

  > .button {
    position: relative;
    z-index: 1;
    flex: 1 1 auto;
    margin: 0;

    // Stack order
    &:hover {
      z-index: 2;
    }
    &:focus {
      z-index: 3;
    }
    &:active {
      z-index: 4;
    }
    &.active {
      z-index: 5;
    }

    // Flex modifiers
    &.static {
      flex-grow: 0;
    }
  }
}

// Add Button Group Display
// Adds button styles based on orientation and display type provided.
// @param $display
//   @type string 'inline' | 'block'
//   @default null
// @param $options
//   @type map
//   @default $button-groups map
@mixin add-button-group-display($display: null, $options: ()) {
  $o: map-merge($button-groups, $options);

  @if ($display == 'inline') {

    display: inline-flex;

  } @else if ($display == 'block' ) {

    display: flex;

  }
}

// Add Button Group Orientation
// Adds button styles based on orientation and display type provided.
// @param $orientation
//   @type string 'horizontal' | 'vertical' | 'hori' | 'vert'
//   @default null
// @param $options
//   @type map
//   @default $button-groups map
@mixin add-button-group-orientation($orientation: null, $options: ()) {
  $o: map-merge($button-groups, $options);

  // Horizontal or Vertical
  @if (($orientation == 'horizontal') or ($orientation == 'hori')) {

    flex-flow: row;

    > .#{map-get($buttons, 'class')} {
      @if (map-get($o, 'border-radius') != null) {
        border-radius: map-get($o, 'inner-border-radius');
      }

      + .#{map-get($buttons, 'class')} {
        margin-top: 0;
        margin-left: (map-get($o, 'spacing'));
      }

      @if (map-get($o, 'border-radius') != null and map-get($o, 'inner-border-radius') != null) {
        &:first-child {
          border-radius: map-get($o, 'border-radius') map-get($o, 'inner-border-radius') map-get($o, 'inner-border-radius') map-get($o, 'border-radius');
        }
        &:last-child {
          border-radius: map-get($o, 'inner-border-radius') map-get($o, 'border-radius') map-get($o, 'border-radius') map-get($o, 'inner-border-radius');
        }
      }
    }

  } @else if (($orientation == 'vertical' ) or ($orientation == 'vert' )) {

    flex-flow: column;

    > .#{map-get($buttons, 'class')} {
      @if (map-get($o, 'border-radius') != null) {
        border-radius: map-get($o, 'inner-border-radius');
      }

      + .#{map-get($buttons, 'class')} {
        margin-top: (map-get($o, 'spacing'));
        margin-left: 0;
      }

      @if (map-get($o, 'border-radius') != null and map-get($o, 'inner-border-radius') != null) {
        &:first-child {
          border-radius: map-get($o, 'border-radius') map-get($o, 'border-radius') map-get($o, 'inner-border-radius') map-get($o, 'inner-border-radius');
        }
        &:last-child {
          border-radius: map-get($o, 'inner-border-radius') map-get($o, 'inner-border-radius') map-get($o, 'border-radius') map-get($o, 'border-radius');
        }
      }
    }
  }
}

// Check if we should output button-groups
@if (map-get($button-groups, 'output') == true) {

/*==============================================================================
  @Button Groups - #{$filename}
==============================================================================*/

.#{map-get($button-groups, 'class')} {
  @include make-button-group();
}

/**
 * Button Group Modifiers
 */
.#{map-get($button-groups, 'class')}.inline {
  @include add-button-group-display('inline');
}
.#{map-get($button-groups, 'class')}.block {
  @include add-button-group-display('block');
}
.#{map-get($button-groups, 'class')}.hori,
.#{map-get($button-groups, 'class')}.horizontal {
  @include add-button-group-orientation('hori');
}
.#{map-get($button-groups, 'class')}.vert,
.#{map-get($button-groups, 'class')}.vertical {
  @include add-button-group-orientation('vert');
}


} // End @if output
