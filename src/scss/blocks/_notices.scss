// Set file variable
$filename: 'scss/blocks/_notice.scss';

////////////////////////////////////////////////////////////////////////////////
// @Notices Map
////////////////////////////////////////////////////////////////////////////////

$notices: (
  'classes' : true,

  'class-inverted' : 'inverted',

  'margin' : 2em 0,
  'padding' : 0.25em 1.25em,
  'padding-inline' : 0 0.25em,

  'background' : $gray-100,
  'box-shadow' : null,
  'border' : 1px solid rgba($black, 0.05),
  'border-radius' : $border-radius,
  'color' : $color,
  'font-size' : 1em,
  'line-height' : 1.5em,
  'text-shadow' : null,

  'close' : (
    'style' : null,
  ),

  'inverted' : (
    'background' : $color,
    'box-shadow' : null,
    'border' : null,
    'color' : $white,
    'text-shadow' : null,

    'close' : (
      'style' : 'inverted',
    ),
  ),

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'notices') == true) {
    $notices: map-extend($notices, map-get($override, 'notices'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Notice Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Notice
// Creates the base styles for a notice block.
// @param $options
//   @type map
//   @default $notices map
@mixin make-notice($options: ()) {
  $o: map-merge($notices, $options);

  margin: map-get($o, 'margin');
  padding: map-get($o, 'padding');
  font-size: map-get($o, 'font-size');
  line-height: map-get($o, 'line-height');
  border-radius: map-get($o, 'border-radius');

  // Close button
  // Check if the close variable exists
  @if (variable-exists(close)) {
    // Check if we're outputting close classes
    @if (map-get($close, 'classes') == true) {
      // Add our custom styles using the close class
      .#{map-get($close, 'class')} {
        float: right;
        margin: 0.75rem -0.25rem 0 1rem;
        padding: 0.25em;
        font-size: 1.25em;
      }
    } @else {
      // Output the close styles with notice customizations
      @include make-close((
        'font-size': 1.25em,
        'margin': 0.75rem -0.25rem 0 1rem,
        'padding': 0.25em,
      )) {
        float: right;
      }
      // Output the default close colors
      @if (map-has-key($o, 'close') == true) {
        @include add-close-color(map-get($o, 'close'));
      }
    }

    // Output inverted close colors when the notice is inverted
    @if (map-has-key(map-get($o, 'inverted'), 'close') == true) {
      &.#{map-get($o, 'class-inverted')} {
        @include add-close-color(map-fetch($o, 'inverted', 'close'));
      }
    }
  }

}

// Add Notice Color
// Adds styles for a notice color with optional output type.
// @param $options
//   @type map
//   @default $notices map
// @param $output
//   @type string (all, difference)
//   @default difference
//   @desc Whether to output all styles, or just the ones that are different
//     from the `$notices` map.
@mixin add-notice-color($options: (), $output: 'difference') {
  $o: map-extend($notices, $options, true);

  $set: color, text-shadow, background, border, box-shadow;

  // Output all notice color styles
  @if ($output == 'all') {

    color: map-get($o, 'color');
    text-shadow: map-get($o, 'text-shadow');
    background: map-get($o, 'background');
    border: map-get($o, 'border');
    box-shadow: map-get($o, 'box-shadow');

    @if (map-get($o, 'class-inverted')) {
      &.#{map-get($o, 'class-inverted')} {
        color: map-fetch($o, 'inverted', 'color');
        text-shadow: map-fetch($o, 'inverted', 'text-shadow');
        background: map-fetch($o, 'inverted', 'background');
        border: map-fetch($o, 'inverted', 'border');
        box-shadow: map-fetch($o, 'inverted', 'box-shadow');
      }
    }

  // Output only the notice color differences
  } @else if ($output == 'difference') {

    // Cycle through properties and only output when different from default
    @each $property in $set {
      @if (map-get($o, $property) != map-get($notices, $property)) {
        #{$property}: map-get($o, $property);
      }
    }

    @if (map-get($o, 'class-inverted')) {
      &.#{map-get($o, 'class-inverted')} {
        // Cycle through properties and only output when different from default
        @each $property in $set {
          @if (map-fetch($o, 'inverted', $property) != map-fetch($notices, 'inverted', $property)) {
            #{$property}: map-fetch($o, 'inverted', $property);
          }
        }
      }
    }

  } @else {
    @warn 'The output type "#{$output}" is not supported in the add-notice-color() mixin.';
  }
}

// Add Notice Inline
// Adds styles for an inline or inline-block notice.
// @param $display
//   @type display property (inline, inline-block)
//   @default inline
// @param $options
//   @type map
//   @default $notices map
@mixin add-notice-inline($display: inline, $options: ()) {
  $o: map-merge($notices, $options);

  display: $display;
  margin: 0;
  padding: map-get($o, 'padding-inline');
  box-shadow: none;

  @if (map-get($o, 'class-inverted')) {
    &.#{map-get($o, 'class-inverted')} {
      border: 0 none;
    }
  }
}

// Check if we should output modifier classes
@if (map-get($notices, 'classes') == true) {

/*==============================================================================
  @Notice - #{$filename}
==============================================================================*/

.notice {
  @include make-notice();
  @include add-notice-color($output: 'all');
}

/**
 * Notice Colors
 */
.notice.blue {
  @include add-notice-color((
    'background' : $blue-50,
    'inverted' : (
      'background' : rgba($blue, 0.9)
    )
  ));
}
.notice.green {
  @include add-notice-color((
    'background' : $green-50,
    'inverted' : (
      'background' : rgba($green, 0.9)
    )
  ));
}
.notice.yellow {
  @include add-notice-color((
    'background' : $yellow-100,
    'inverted' : (
      'color': $color,
      'background' : $yellow
    )
  ));
}
.notice.orange {
  @include add-notice-color((
    'background' : $orange-50,
    'inverted' : (
      'background' : $orange-600
    )
  ));
}
.notice.red {
  @include add-notice-color((
    'background' : $red-50,
    'inverted' : (
      'background' : $red-600
    )
  ));
}
.notice.purple {
  @include add-notice-color((
    'background' : $purple-50,
    'inverted' : (
      'background' : $purple
    )
  ));
}

// Semantic button classes
.notice.success {
  @extend .notice.green;
}
.notice.info {
  @extend .notice.blue;
}
.notice.warning {
  @extend .notice.yellow;
}
.notice.danger {
  @extend .notice.red;
}

/**
 * Inline styles
 */
.notice.inline {
  @include add-notice-inline();
}

} // endif classes
