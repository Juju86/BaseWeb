// Set file variable
$filename: 'scss/blocks/_notice.scss';

////////////////////////////////////////////////////////////////////////////////
// @Notices Map
////////////////////////////////////////////////////////////////////////////////

// Notice Map
// Define all the settings for table mixins and classes.
$notices: (
  'classes' : true,
  
  'class-inverted' : 'inverted',
  
  'margin' : 2em 0,
  'padding' : 0.25em 1.25em,
  
  'color' : $color-dark,
  'text-shadow' : 0 1px 0 rgba($white, 0.25),
  'background' : rgba($black, 0.05),
  'border' : 1px solid rgba($black, 0.15),
  'box-shadow' : 0 1px 3px rgba($black, 0.05),
  
  'inverted' : (
    'color' : $white,
    'text-shadow' : 0 1px 0 rgba($black, 0.25),
    'background' : rgba($color-dark, 0.9),
    'border' : 1px solid rgba($black, 0.15),
    'box-shadow' : 0 1px 3px rgba($black, 0.05),
  ),
  
) !default;

////////////////////////////////////////////////////////////////////////////////
// @Notice Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Notice
// Creates the styles for a notice block.
// @param $options
//   @type map
//   @default $notices map
@mixin make-notice($options: ()) {
  $o: map-merge($notices, $options);
  
  font-size: 1em;
  line-height: 1.5em;
  margin: map-get($o, 'margin');
  padding: map-get($o, 'padding');
  
  @include border-radius();
}

@mixin add-notice-color($output: difference, $options: ()) {
  $o: map-extend($notices, $options, true);
  
  $set: color, text-shadow, background, border, box-shadow;
  
  @if ($output == all) {
  
    color: map-get($o, 'color');
    text-shadow: map-get($o, 'text-shadow');
    background: map-get($o, 'background');
    border: map-get($o, 'border');
    box-shadow: map-get($o, 'box-shadow');
    
    &.#{map-get($o, 'class-inverted')} {
      color: map-fetch($o, 'inverted' 'color');
      text-shadow: map-fetch($o, 'inverted' 'text-shadow');
      background: map-fetch($o, 'inverted' 'background');
      border: map-fetch($o, 'inverted' 'border');
      box-shadow: map-fetch($o, 'inverted' 'box-shadow');
    }
  
  } @else {
    
    @each $property in $set {
      @if (map-get($o, $property) != map-get($notices, $property)) {
        #{$property}: map-get($o, $property);
      }
    }
    
    &.#{map-get($o, 'class-inverted')} {
      @each $property in $set {
        @if (map-fetch($o, 'inverted' $property) != map-fetch($notices, 'inverted' $property)) {
          #{$property}: map-fetch($o, 'inverted' $property);
        }
      }
    }
    
  } // End if $output
}

// Check if we should output modifier classes
@if (map-get($notices, 'classes') == true) {
  
/*==============================================================================
  @Notice - #{$filename}
==============================================================================*/

.notice {
  @include make-notice();
  @include add-notice-color(all);
}

.notice .close {
  float: right;
  margin: 0.45em -0.25em 0 1em;
  color: inherit;
}

/**
 * Notice Color
 */
.notice.blue {
  @include add-notice-color($options: (
    'background' : rgba($blue, 0.1),
    'inverted' : (
      'background' : rgba($blue, 0.9)
    )
  ));
}
.notice.green {
  @include add-notice-color($options: (
    'background' : rgba($green, 0.1),
    'inverted' : (
      'background' : rgba($green, 0.9)
    )
  ));
}
.notice.yellow {
  @include add-notice-color($options: (
    'background' : rgba($yellow, 0.1),
    'inverted' : (
      'background' : rgba($yellow-dark, 0.9)
    )
  ));
}
.notice.orange {
  @include add-notice-color($options: (
    'background' : rgba($orange, 0.1),
    'inverted' : (
      'background' : rgba($orange, 0.9)
    )
  ));
}
.notice.red {
  @include add-notice-color($options: (
    'background' : rgba($red, 0.1),
    'inverted' : (
      'background' : rgba($red, 0.9)
    )
  ));
}
.notice.violet {
  @include add-notice-color($options: (
    'background' : rgba($violet, 0.1),
    'inverted' : (
      'background' : rgba($violet, 0.9)
    )
  ));
}

// Semantic button classes
.notice.success {
  @extend .notice.green;
}
.notice.info {
  @extend .notice.blue;
}
.notice.warning {
  @extend .notice.yellow;
}
.notice.danger {
  @extend .notice.red;
}

/**
 * Notice Size, Display and Pulls
 */
.notice.small {
  font-size: 0.9em;
}
.notice.large {
  font-size: 1.1em;
}

.notice.inline,
.notice.inline-block {
  margin: 0;
  padding: 0 0.5em;
  box-shadow: none;
  
  &.inverted {
    border: 0 none;
  }
}
.notice.inline {
  display: inline;
}
.notice.inline-block {
  display: inline-block;
}

@include media-min('mobile') {
  
  .notice.pull-left,
  .notice.pull-right {
    max-width: 45%;
  }
  .notice.pull-left {
    float: left;
    margin: 0.5em 2em 1em 0;
  }
  .notice.pull-right {
    float: right;
    margin: 0.5em 0 1em 2em;
  }
  
}

} // endif classes
