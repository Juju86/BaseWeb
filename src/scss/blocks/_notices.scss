// Set file variable
$filename: 'scss/blocks/_notice.scss';

////////////////////////////////////////////////////////////////////////////////
// @Notices Map
////////////////////////////////////////////////////////////////////////////////

$notices: (
  'output' : true,
  'output-colors' : true,
  'class' : 'notice',

  'margin' : 2em 0,
  'padding' : 0.25em 1.25em,
  'padding-inline' : 0 0.25em,
  'font-size' : 1em,
  'line-height' : 1.5em,

  // Add color styles
  'color' : $color,
  'background' : $gray-100,
  'border' : 1px solid rgba($black, 0.05),
  'border-radius' : $border-radius,

  // Close element
  'close' : (
    'output' : true,
    'style' : null,
    'margin': 1em 0 1em 1em,
    'padding': 0.25em,
    'font-size': 1em,
  ),

  // add-color output
  'style' : null,

  // Modifiers
  'modifiers' : (
    'inverted' : (
      'color' : $white,
      'background' : $color,
      'close' : (
        'style' : 'inverted'
      )
    ),
    'info' : (
      'background' : $blue-50,
    ),
    'info.inverted' : (
      'color' : $white,
      'background' : rgba($blue, 0.9)
    ),
    'success' : (
      'background' : $green-50,
    ),
    'success.inverted' : (
      'color' : $white,
      'background' : rgba($green, 0.9)
    ),
    'warning' : (
      'background' : $yellow-100,
    ),
    'warning.inverted' : (
      'color' : $color,
      'background' : rgba($yellow, 0.9),
      'close' : (
        'style' : 'default'
      ),
    ),
    'danger' : (
      'background' : $red-50,
    ),
    'danger.inverted' : (
      'color' : $white,
      'background' : rgba($red, 0.9)
    ),
  ) // Close of modifiers

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'notices') == true) {
    $notices: map-extend($notices, map-get($override, 'notices'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Notices Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Notice
// Creates the base styles for a notice block.
// @param $options
//   @type map
//   @default $notices map
@mixin make-notice($options: ()) {
  $o: map-merge($notices, $options);

  margin: map-get($o, 'margin');
  padding: map-get($o, 'padding');
  font-size: map-get($o, 'font-size');
  line-height: map-get($o, 'line-height');
  border-radius: map-get($o, 'border-radius');

  // Close button
  // Check if $close exists and close output is enabled
  @if (variable-exists(close)) {
    @if (map-fetch($o, 'close', 'output') == true) {

      // Check if close is already output
      @if (map-get($close, 'output') != true) {
        // Output it explicitly
        .#{map-get($close, 'class')} {
          @include make-close(map-get($o, 'close')) {
            float: right;
          }
        }
      } @else {
        // Only output the custom styles
        .#{map-get($close, 'class')} {
          float: right;
          margin: map-fetch($o, 'close', 'margin');
          padding: map-fetch($o, 'close', 'padding');
          font-size: map-fetch($o, 'close', 'font-size');
        }
      }

      .#{map-get($close, 'class')} {
        @include add-close-color(map-get($o, 'close'));
      }

    } // End @if this.close.output is true
  } // End @if $close

}

// Add Notice Color
// Creates the color styles for notices.
// @param $options
//   @type map
//   @default $notices map
// @param $settings
//   @type map
//   @default ()
// @param $properties
//   @type map list
//   @default ('color', 'background', 'border', 'border-color')
// @param $style
//   @type string
//   @default null
@mixin add-notice-color(
  $options: (),
  $settings: (),
  $properties: ('color', 'background', 'border', 'border-color'),
  $style: null
) {
  $o: map-extend($notices, $options, true);
  $s: map-merge($settings, ('properties': $properties));

  @if ($style == null) {
    @if (map-has-key($o, 'style')) {
      $style: map-get($o, 'style');
    }
  }

  @if ($style != null) {

    @if ($style != 'all') {
      $s: map-merge($s, ('output-mods': false));
      @if (map-has-key(map-get($o, 'modifiers'), $style) == true) {
        $o: map-extend($o, map-fetch($o, 'modifiers', $style), true);
      } @else if ($style != 'default') {
        @warn 'The $notices map does not contain the modifier of "#{$style}"!';
      }
    }

  } @else {
    $s: map-merge($s, ('output-mods': false));
  }

  @include add-color($o, $settings: $s);

  // Close button
  // Check if $close exists and close output is enabled
  @if ($style != null) {
    @if (variable-exists(close)) {
      @if (map-fetch($o, 'close', 'output') == true) {

        // Check if modifiers exist
        @if (map-has-key($o, 'modifiers')) {
          // Loop through and output modifiers
          @each $mod-name, $mod-map in map-get($o, 'modifiers') {
            @if (map-has-key($mod-map, 'close')) {

              &.#{$mod-name} {
                .#{map-get($close, 'class')} {
                  @include add-close-color($style: map-fetch($mod-map, 'close', 'style'));
                }
              } // Close &.#{$mod-name}
            }
          } // End @each modifiers
        } // End @if modifiers

      } // End @if this.close.output is true
    } // End @if $close
  }

}

// Add Notice Inline
// Adds styles for an inline or inline-block notice.
// @param $display
//   @type display property (inline, inline-block)
//   @default inline
// @param $options
//   @type map
//   @default $notices map
@mixin add-notice-inline($display: inline, $options: ()) {
  $o: map-merge($notices, $options);

  &.#{$display} {
    display: $display;
    margin: 0;
    padding: map-get($o, 'padding-inline');
    box-shadow: none;
  }

}

// Check if we should output modifier classes
@if (map-get($notices, 'output') == true) {

/*==============================================================================
  @Notices - #{$filename}
==============================================================================*/

.#{map-get($notices, 'class')} {
  @include make-notice();
  @include add-notice-inline();
  @include add-notice-color();
}

// Check if we should output badge colors
@if (map-get($notices, 'output-colors') == true) {

/**
 * Colors
 */
.#{map-get($notices, 'class')} {
  @include add-notice-color($settings: ('output-base': false), $style: 'all');
}

} // End @if output-colors

} // End @if output
