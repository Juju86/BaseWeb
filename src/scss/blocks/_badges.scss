// Set file variable
$filename: 'scss/blocks/_badge.scss';

////////////////////////////////////////////////////////////////////////////////
// @Badges Map
////////////////////////////////////////////////////////////////////////////////

$badges: (
  'output' : true,
  'output-colors' : true,
  'output-buttons' : true,

  'class' : 'badge',

  'padding' : 0.25rem 0.75rem,
  'font-size' : 0.9em,
  'border' : none,
  'border-radius' : $border-radius,
  'border-radius-pill' : 3rem,
  'transition' : $transition,

  'close' : (
    'output' : true,
    'margin' : 0 -0.25em 0 0.5em,
    'style' : default,
  ),

  'dot' : (
    'size' : ($base-font-size / 2),
  ),

  'button' : (
    'margin' : 0.5em,
    'padding' : 0.25em 0.5em,
  ),

  'color' : $color,
  'background' : rgba($black, 0.05),
  'hover' : (
    'color' : $blue,
    'background' : rgba($blue, 0.2),
  ),

  'modifiers' : (
    'inverted' : (
      'color' : $white,
      'background' : $gray,
      'hover' : (
        'color' : $white,
        'background' : $gray-700,
      ),
    ),
    'active': (
      'color': $white,
      'background': $blue,
      'hover': (
        'color': $white,
        'background': $blue,
      ),
    ),
  ),

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'badges') == true) {
    $badges: map-extend($badges, map-get($override, 'badges'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Badges Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Badge
// Creates the base styles for a the badge element.
// @param $options
//   @type map
//   @default $badges map
@mixin make-badge($options: ()) {
  $o: map-extend($badges, $options, true);

  display: inline-flex;
  justify-content: center;
  align-items: center;
  padding: map-get($o, 'padding');
  font-size: map-get($o, 'font-size');
  text-decoration: none;
  border: map-get($o, 'border');
  border-radius: map-get($o, 'border-radius');
  transition: map-get($o, 'transition');

  &.pill {
    border-radius: map-get($o, 'border-radius-pill');
  }
  &.square {
    border-radius: 0;
  }
  &.dot {
    display: inline-block;
    @include text-hide();
    @include size(map-fetch($o, 'dot', 'size'));
    padding: 0;
    vertical-align: top;
    border-radius: map-get($o, 'border-radius-pill');
  }

  // Check if we should output close classes
  @if (map-fetch($o, 'close', 'output') == true) {
    @if (map-get($close, 'output') != true) {
      .#{map-get($close, 'class')} {
        @include make-close(map-get($o, 'close'));
      }
    }
    .#{map-get($close, 'class')} {
      margin: map-fetch($o, 'close', 'margin');
      @include add-close-color(map-get($o, 'close'));
    }
  } // End @if close output is true

}

// Add Badge Color
@mixin add-badge-color($options: (), $settings: ()) {
  $o: map-extend($badges, $options, true);

  @include add-color($o, $settings);

  // Check if we should output close classes
  @if (map-fetch($o, 'close', 'output') == true) {
    // Check that we have modifiers
    @if (map-has-key($o, 'modifiers')) {
      // Loop through modifiers
      @each $mod-name, $mod-map in map-get($o, 'modifiers') {
        // Check if the close options exist
        @if (map-has-key($mod-map, 'close')) {
          // Output the modifier name
          &.#{$mod-name} {
            // Output the close color styles
            .#{map-get($close, 'class')} {
              @include add-close-color(map-get($mod-map, 'close'));
            }
          } // Close &.#{$mod-name}
        } // End @if close exists
      } // End @each modifiers
    } // End @if modifiers exist
  } // End @if close output is true
}

// Check if we should output modifier classes
@if (map-get($badges, 'output') == true) {

/*==============================================================================
  @Badges - #{$filename}
==============================================================================*/

/**
 * Base Badge
 */
// .#{map-get($badges, 'class')} {
//   @include make-badge();
//   @include add-badge-color($settings: ('pseudo-classes': null));
// }
// a.#{map-get($badges, 'class')} {
//   @include add-badge-color(
//     ('close': ('output' : false)), // Disable output of close element
//     $settings: ('output-base': false, 'output-mods-base': false)
//   );
// }

// Check if we should output badge colors
@if (map-get($badges, 'output-colors') == true) {

/**
 * Additional Colors
 */
$badge-colors: (
  'light': (
    'color': $color-light,
    'background': $white,
    'border': 1px solid rgba($black, 0.1),
    'hover': (
      'color' : $color,
      'background': $white,
      'border-color': rgba($blue, 0.75),
    ),
  ),
  'dark': (
    'color': $white,
    'background': $gray-800,
    'close': (
      'style': 'inverted',
    ),
    'hover': (
      'color' : $white,
      'background': $gray-700,
    ),
  ),
  'blue': (
    'color': $blue,
    'background': $blue-50,
    'hover': (
      'background': $blue-100,
    ),
  ),
  'blue.inverted': (
    'color': $white,
    'background': $blue,
    'hover': (
      'background': $blue-700,
    ),
  ),
  'teal': (
    'color': $teal,
    'background': $teal-50,
    'hover': (
      'color': $teal,
      'background': $teal-100,
    ),
  ),
  'teal.inverted': (
    'color': $white,
    'background': $teal,
    'hover': (
      'color': $white,
      'background': $teal-700,
    ),
  ),
  'green': (
    'color': $green,
    'background': $green-50,
    'hover': (
      'color': $green,
      'background': $green-100,
    ),
  ),
  'green.inverted': (
    'color': $white,
    'background': $green,
    'hover': (
      'color': $white,
      'background': $green-700,
    ),
  ),
  'yellow': (
    'color': $color,
    'background': $yellow-100,
    'hover': (
      'color': $color,
      'background': $yellow-300,
    ),
  ),
  'yellow.inverted': (
    'color': $color,
    'background': $yellow,
    'hover': (
      'color': $color,
      'background': $yellow-600,
    ),
  ),
  'orange': (
    'color': $orange,
    'background': $orange-50,
    'hover': (
      'color': $orange,
      'background': $orange-100,
    ),
  ),
  'orange.inverted': (
    'color': $white,
    'background': $orange,
    'hover': (
      'color': $white,
      'background': $orange-700,
    ),
  ),
  'red': (
    'color': $red,
    'background': $red-50,
    'hover': (
      'color': $red,
      'background': $red-100,
    ),
  ),
  'red.inverted': (
    'color': $white,
    'background': $red,
    'hover': (
      'color': $white,
      'background': $red-700,
    ),
  ),
  'purple': (
    'color': $purple,
    'background': $purple-50,
    'hover': (
      'color': $purple,
      'background': $purple-100,
    ),
  ),
  'purple.inverted': (
    'color': $white,
    'background': $purple,
    'hover': (
      'color': $white,
      'background': $purple-700,
    ),
  ),
) !default;

// .#{map-get($badges, 'class')} {
//   @include add-badge-color(
//     ('modifiers': $badge-colors),
//     $output-base: false, // Disable base styles
//     $pseudos: null // Only output base styles
//   );
// }
// a.#{map-get($badges, 'class')} {
//   @include add-badge-color(
//     (
//       'close': ('output': false), // Link badges can't have close buttons
//       'modifiers': $badge-colors
//     ),
//     $output-base: false // Disable base styles
//   );
// }

} // End @if output-colors

// Check if we should output button classes
@if (map-get($badges, 'output-buttons') == true) {

// Check if $buttons exists
@if (variable-exists(buttons) == false) {
  @warn 'The badge block component requires the buttons element component!';
} @else {

/**
 * Button Badges
 */
.#{map-get($buttons, 'class')} .#{map-get($badges, 'class')}:not(.dot) {
  display: inline;
  padding: map-fetch($badges, 'button', 'padding');
}
.#{map-get($buttons, 'class')}-#{map-get($badges, 'class')}-left {
  .#{map-get($badges, 'class')} {
    margin-left: -(map-fetch($badges, 'button', 'margin'));
    margin-right: map-fetch($badges, 'button', 'margin');
  }
}
.#{map-get($buttons, 'class')}-#{map-get($badges, 'class')}-right {
  .#{map-get($badges, 'class')} {
    margin-left: map-fetch($badges, 'button', 'margin');
    margin-right: -(map-fetch($badges, 'button', 'margin'));
  }
}

} // End @if $buttons exists

} // End output-buttons

} // End output
