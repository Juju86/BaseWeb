// Set file variable
$filename: 'scss/blocks/_badge.scss';

////////////////////////////////////////////////////////////////////////////////
// @Badges Map
////////////////////////////////////////////////////////////////////////////////

$badges: (
  'output' : true,
  'output-colors' : true,
  'output-buttons' : true,
  'class' : 'badge',

  'padding' : 0.25rem 0.75rem,
  'font-size' : 0.9em,
  'border' : none,
  'border-radius' : $border-radius,
  'border-radius-pill' : 3rem,
  'transition' : $transition,

  'dot' : (
    'size' : ($base-font-size / 2),
  ),

  'button' : (
    'margin' : 0.5em,
    'padding' : 0.25em 0.5em,
  ),

  // Add color styles
  'color' : $color,
  'background' : rgba($black, 0.05),
  'hover' : (
    'color' : $blue,
    'background' : rgba($blue, 0.2),
  ),

  // add-color output
  'style' : null,

  // Close element
  'close' : (
    'output' : true,
    'style' : null,
    'margin' : 0 -0.25em 0 0.5em,
  ),

  // Modifiers
  'modifiers' : (
    'inverted': (
      'color': $white,
      'background': $gray,
      'hover': (
        'color': $white,
        'background': $gray-700,
      ),
    ),
    'active': (
      'color': $white,
      'background': $blue,
      'hover': (
        'color': $white,
        'background': $blue,
      ),
    ),
    'light': (
      'color': $color,
      'background': rgba($white, 0.75),
      'hover': (
        'color': $color,
        'background': rgba($white, 1),
      ),
    ),
    'dark': (
      'color': $white,
      'background': rgba($black, 0.5),
      'hover': (
        'color': $white,
        'background': rgba($black, 0.75),
      ),
    ),
    'blue': (
      'color': $blue,
      'background': $blue-50,
      'hover': (
        'background': $blue-100,
      ),
    ),
    'blue.inverted': (
      'color': $white,
      'background': $blue,
      'hover': (
        'background': $blue-700,
      ),
    ),
    'green': (
      'color': $green,
      'background': $green-50,
      'hover': (
        'color': $green,
        'background': $green-100,
      ),
    ),
    'green.inverted': (
      'color': $white,
      'background': $green,
      'hover': (
        'color': $white,
        'background': $green-700,
      ),
    ),
    'yellow': (
      'color': $color,
      'background': $yellow-100,
      'hover': (
        'color': $color,
        'background': $yellow-300,
      ),
    ),
    'yellow.inverted': (
      'color': $color,
      'background': $yellow,
      'hover': (
        'color': $color,
        'background': $yellow-600,
      ),
    ),
    'red': (
      'color': $red,
      'background': $red-50,
      'hover': (
        'color': $red,
        'background': $red-100,
      ),
    ),
    'red.inverted': (
      'color': $white,
      'background': $red,
      'hover': (
        'color': $white,
        'background': $red-700,
      ),
    ),
  ),

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'badges') == true) {
    $badges: map-extend($badges, map-get($override, 'badges'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Badges Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Badge
// Creates the base styles for a the badge element.
// @param $options
//   @type map
//   @default $badges map
@mixin make-badge($options: ()) {
  $o: map-extend($badges, $options, true);

  display: inline-flex;
  justify-content: center;
  align-items: center;
  padding: map-get($o, 'padding');
  font-size: map-get($o, 'font-size');
  text-decoration: none;
  border: map-get($o, 'border');
  border-radius: map-get($o, 'border-radius');
  transition: map-get($o, 'transition');

  &.pill {
    border-radius: map-get($o, 'border-radius-pill');
  }
  &.square {
    border-radius: 0;
  }
  &.dot {
    display: inline-block;
    @include text-hide();
    @include size(map-fetch($o, 'dot', 'size'));
    padding: 0;
    vertical-align: top;
    border-radius: map-get($o, 'border-radius-pill');
  }

  // Close button
  // Check if $close exists and close output is enabled
  @if (variable-exists(close)) {
    @if (map-fetch($o, 'close', 'output') == true) {

      // Check if close is already output
      @if (map-get($close, 'output') != true) {
        // Output it explicitly
        .#{map-get($close, 'class')} {
          @include make-close(map-get($o, 'close'));
        }
      } @else {
        // Only output the custom styles
        .#{map-get($close, 'class')} {
          margin: map-fetch($o, 'close', 'margin');
        }
      }

      .#{map-get($close, 'class')} {
        @include add-close-color(map-get($o, 'close'));
      }

    } // End @if this.close.output is true
  } // End @if $close

}

// Add Badge Color
// Creates the color styles for badges.
// @param $options
//   @type map
//   @default $badges map
// @param $settings
//   @type map
//   @default ()
// @param $properties
//   @type map list
//   @default ('color', 'background', 'border-color')
// @param $style
//   @type string
//   @default null
@mixin add-badge-color(
  $options: (),
  $settings: (),
  $properties: ('color', 'background', 'border-color'),
  $style: null
) {
  $o: map-extend($badges, $options, true);
  $s: map-merge($settings, ('properties': $properties));

  @if ($style == null) {
    @if (map-has-key($o, 'style')) {
      $style: map-get($o, 'style');
    }
  }

  @if ($style != null) {

    @if ($style != 'all') {
      $s: map-merge($s, ('output-mods': false));
      @if (map-has-key(map-get($o, 'modifiers'), $style) == true) {
        $o: map-extend($o, map-fetch($o, 'modifiers', $style), true);
      } @else if ($style != 'default') {
        @warn 'The $badges map does not contain the modifier of "#{$style}"!';
      }
    }

  } @else {
    $s: map-merge($s, ('output-mods': false));
  }

  @include add-color($o, $settings: $s);

  // Close button
  // Check if $close exists and close output is enabled
  @if ($style != null) {
    @if (variable-exists(close)) {
      @if (map-fetch($o, 'close', 'output') == true) {

        // Check if modifiers exist
        @if (map-has-key($o, 'modifiers')) {
          // Loop through and output modifiers
          @each $mod-name, $mod-map in map-get($o, 'modifiers') {
            @if (map-has-key($mod-map, 'close')) {

              &.#{$mod-name} {
                .#{map-get($close, 'class')} {
                  @include add-close-color($style: map-fetch($mod-map, 'close', 'style'));
                }
              } // Close &.#{$mod-name}
            }
          } // End @each modifiers
        } // End @if modifiers

      } // End @if this.close.output is true
    } // End @if $close
  }

}

// Check if we should output modifier classes
@if (map-get($badges, 'output') == true) {

/*==============================================================================
  @Badges - #{$filename}
==============================================================================*/

.#{map-get($badges, 'class')} {
  @include make-badge();
  @include add-badge-color(
    $settings: ('output-pseudo': false)
  );
}
a.#{map-get($badges, 'class')} {
  @include add-badge-color(
    $settings: ('output-base': false)
  );
}

// Check if we should output badge colors
@if (map-get($badges, 'output-colors') == true) {

/**
 * Colors
 */
.#{map-get($badges, 'class')} {
  @include add-badge-color(
    $settings: (
      'output-base': false,
      'output-pseudo': false,
      'output-mods-pseudo': false,
    ),
    $style: 'all'
  );
}
a.#{map-get($badges, 'class')} {
  @include add-badge-color(
    $settings: (
      'output-base': false,
      'output-pseudo': false,
      'output-mods-base': false
    ),
    $style: 'all'
  );
}

} // End @if output-colors

// Check if we should output button classes
@if (map-get($badges, 'output-buttons') == true) {

// Check if $buttons exists
@if (variable-exists(buttons) == true) {

/**
 * Button Badges
 */
.#{map-get($buttons, 'class')} .#{map-get($badges, 'class')}:not(.dot) {
  display: inline;
  padding: map-fetch($badges, 'button', 'padding');
}
.#{map-get($buttons, 'class')}-#{map-get($badges, 'class')}-left {
  .#{map-get($badges, 'class')} {
    margin-left: -(map-fetch($badges, 'button', 'margin'));
    margin-right: map-fetch($badges, 'button', 'margin');
  }
}
.#{map-get($buttons, 'class')}-#{map-get($badges, 'class')}-right {
  .#{map-get($badges, 'class')} {
    margin-left: map-fetch($badges, 'button', 'margin');
    margin-right: -(map-fetch($badges, 'button', 'margin'));
  }
}

} // End @if $buttons exists

} // End @if output-buttons

} // End @if output
