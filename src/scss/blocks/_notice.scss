// Set file variable
$filename: 'scss/blocks/_notice.scss';

////////////////////////////////////////////////////////////////////////////////
// @Notice Variables
////////////////////////////////////////////////////////////////////////////////

// Notice Map
// Define all the settings for table mixins and classes.
$notice: (
  'classes' : true,
  
  'margin' : 2em 0,
  'padding' : 0.25em 1.25em,
  
  'color' : $color-dark,
  
  'background' : rgba($black, 0.05),
  'border' : 1px solid rgba($black, 0.15),
  'box-shadow' : 0 1px 3px rgba($black, 0.05),
  
) !default;

////////////////////////////////////////////////////////////////////////////////
// @Notice Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Notice
// Creates the styles for a notice block.
// @param $options
//   @type map
//   @default $notice map
@mixin make-notice($options: ()) {
  $o: map-merge( $notice, $options);
  
  font-size: 1em;
  line-height: 1.5em;
  margin: map-get($o, 'margin');
  padding: map-get($o, 'padding');
  border: map-get($o, 'border');
  box-shadow: map-get($o, 'box-shadow');
  @include border-radius();
}

// Check if we should output modifier classes
@if (map-get($notice, 'classes') == true) {
  
/*==============================================================================
  @Notice - #{$filename}
==============================================================================*/

.notice {
  @include make-notice();
  
  color: $color-dark;
  text-shadow: 0 1px 0 rgba($white, 0.25);
  background-color: rgba($black, 0.05);
  
  &.inverted {
    color: $white;
    text-shadow: 0 1px 0 rgba($black, 0.25);
    background-color: rgba($color-dark, 0.9);
  }
}

.notice .close {
  float: right;
  margin: 0.45em -0.25em 0 1em;
  color: inherit;
}

/**
 * Notice Color
 */
.notice.green {
  background-color: rgba($green, 0.1);
  
  &.inverted {
    background-color: rgba($green, 0.9);
  }
}
.notice.blue {
  background-color: rgba($blue, 0.1);
  
  &.inverted {
    background-color: rgba($blue, 0.9);
  }
}
.notice.yellow {
  background-color: rgba($yellow, 0.1);
  
  &.inverted {
    background-color: rgba($yellow-dark, 0.9);
  }
}
.notice.orange {
  background-color: rgba($orange, 0.1);
  
  &.inverted {
    background-color: rgba($orange, 0.9);
  }
}
.notice.red {
  background-color: rgba($red, 0.1);
  
  &.inverted {
    background-color: rgba($red, 0.9);
  }
}
.notice.violet {
  background-color: rgba($violet, 0.1);
  
  &.inverted {
    background-color: rgba($violet, 0.9);
  }
}

// Semantic button classes
.notice.success {
  @extend .notice.green;
}
.notice.info {
  @extend .notice.blue;
}
.notice.warning {
  @extend .notice.yellow;
}
.notice.danger {
  @extend .notice.red;
}

/**
 * Notice Size, Display and Pulls
 */
.notice.small {
  font-size: 0.9em;
}
.notice.large {
  font-size: 1.1em;
}

.notice.inline,
.notice.inline-block {
  margin: 0;
  padding: 0 0.5em;
  box-shadow: none;
  
  &.inverted {
    border: 0 none;
  }
}
.notice.inline {
  display: inline;
}
.notice.inline-block {
  display: inline-block;
}

@include media-min('mobile') {
  
  .notice.pull-left,
  .notice.pull-right {
    max-width: 45%;
  }
  .notice.pull-left {
    float: left;
    margin: 0.5em 2em 1em 0;
  }
  .notice.pull-right {
    float: right;
    margin: 0.5em 0 1em 2em;
  }
  
}

} // endif classes
