// Set file variable
$filename: 'scss/blocks/_dropdowns.scss';

////////////////////////////////////////////////////////////////////////////////
// @Dropdowns Map
////////////////////////////////////////////////////////////////////////////////

$dropdowns: (
  'classes' : true,
  'classes-position' : true,

  'class-dropdown-trigger' : 'dropdown-trigger',
  'class-dropdown'         : 'dropdown',
  'class-dropdown-content' : 'dropdown-content',
  'class-dropdown-menu'    : 'dropdown-menu',

  'class-active' : 'active',
  'class-action-hover' : 'on-hover',
  'class-action-click' : 'on-click',

  'target' : null,
  'target-action' : null,

  'target-zindex'        : 100,
  'target-action-zindex' : 105,

  'width'             : 16rem,
  'padding'           : 1em,
  'padding-menu'      : 0.5em,
  'padding-menu-item' : 0.75em 1em,

  'block-margin'      : -0.5em,
  'block-padding'     : 1em,

  'font-size'   : px-to-rem(12px),
  'line-height' : 1.35em,

  'background'       : $white,
  'background-hover' : rgba($black, 0.05),
  'background-clip'  : padding-box,
  'border'           : 1px solid rgba($black, 0.1),
  'border-inner'     : 1px solid rgba($black, 0.1),
  'border-radius'    : $border-radius,
  'box-shadow'       : 0 2px 6px rgba($black, 0.15),
  'color'            : $color,
  'color-hover'      : $color,
  'color-active'     : $color-light,

  'content-sep'    : 0.5em,
  'content-sep-hr' : 1em,

  'offset-margin-one' : -1px, // The first position margin offset
  'offset-margin-two' : 0,    // The second position margin offset (does not apply to centered dropdowns)
  'offset-position'   : 0,    // The second position offset (does not apply to centered dropdowns)

  'dropdown-position'      : 'bottom-left',
  'dropdown-position-menu' : 'right-top',

) !default;

// Extend default component map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'dropdowns') == true) {
    $dropdowns: map-extend($dropdowns, map-get($override, 'dropdowns'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Dropdown Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Dropdown
// Creates the base styles for dropdowns.
// @param $options
//   @type map
//   @default $dropdowns map
@mixin make-dropdown($options: ()) {
  $o: map-merge($dropdowns, $options);

  position: relative;
  display: block;
  width: map-get($o, 'width');
  margin: 0;
  font-size: map-get($o, 'font-size');
  line-height: map-get($o, 'line-height');
  background: map-get($o, 'background');
  background-clip: map-get($o, 'background-clip');
  border: map-get($o, 'border');
  box-shadow: map-get($o, 'box-shadow');
  border-radius: map-get($o, 'border-radius');
}

// Make Dropdown Trigger
// Creates the base styles for a dropdown trigger.
// @param $options
//   @type map
//   @default $dropdowns map
@mixin make-dropdown-trigger($options: ()) {
  $o: map-merge($dropdowns, $options);

  // Set our target action
  $target : '.' + map-get($o, 'class-dropdown') !default;

  @if (map-get($o, 'target')) {
    $target : map-get($o, 'target');
  }

  // Set our target action variable
  $target-action :
    '&:not(.#{map-get($o, 'class-action-click')}):not(.#{map-get($o, 'class-action-hover')}):hover > .#{map-get($o, 'class-dropdown')}',
    '&.#{map-get($o, 'class-active')} > .#{map-get($o, 'class-dropdown')}'
  !default;

  @if (map-get($o, 'target-action')) {
    $target-action : map-get($o, 'target-action');
  }

  // Base trigger styles
  position: relative;

  // Base target styles
  #{$target} {
    position: absolute;
    z-index: map-get($o, 'target-zindex');
    display: none;
  }

  // Base target hover & active styles
  #{$target-action} {
    display: block;
  }

  // Add stack order to hovered dropdowns
  &:hover > .#{map-get($o, 'class-dropdown')} {
    z-index: map-get($o, 'target-action-zindex');
  }

}

// Add Dropdown Style
// Creates specific dropdown styles for a content type.
// @param $options
//   @type map
//   @default $dropdowns map
// @param $type
//   @type string (dropdown, dropdown-content, dropdown-menu)
//   @default dropdown
@mixin add-dropdown-style($options: (), $type : 'dropdown') {
  $o: map-merge($dropdowns, $options);

  @if ($type == 'dropdown') {

    padding: 0;

    > .#{map-get($o, 'class-dropdown-content')},
    > .#{map-get($o, 'class-dropdown-menu')} {
      width: auto;
      margin: 0;
      background: none;
      border: 0 none;
      border-top: map-get($o, 'border-inner');
      box-shadow: none;
      border-radius: 0;

      &:first-child {
        border-top: 0 none;
        @include border-top-radius(map-get($o, 'border-radius'));
      }
      &:last-child {
        @include border-bottom-radius(map-get($o, 'border-radius'));
      }
    }

  } @else if ($type == 'dropdown-content') {

    padding: map-get($o, 'padding');

    > * {
      margin-top: map-get($o, 'content-sep');
      margin-bottom: map-get($o, 'content-sep');
    }
    > :first-child {
      margin-top: 0;
    }
    > :last-child {
      margin-bottom: 0;
    }

    > hr {
      margin: map-get($o, 'content-sep-hr') 0;
    }

    // Block Links
    > a.block {
      display: block;
      margin: map-get($o, 'block-margin');
      padding: map-get($o, 'block-padding');
      color: map-get($o, 'color');
      border: 0 none;
      border-radius: map-get($o, 'border-radius');

      &:hover {
        background: map-get($o, 'background-hover');
        color: map-get($o, 'color-hover');
        text-decoration: none;
      }

      > * {
        margin-top: map-get($o, 'content-sep');
        margin-bottom: map-get($o, 'content-sep');
      }
      > :first-child {
        margin-top: 0;
      }
      > :last-child {
        margin-bottom: 0;
      }
    }

    > .button {
      display: block;
    }

  } @else if ($type == 'dropdown-menu') {

    list-style: none;
    padding: map-get($o, 'padding-menu');

    // Dropdown Menu Items
    li {
      position: relative;
      margin: 0;
      border-bottom: map-get($o, 'border-inner');
    }
    li:hover {
      background: map-get($o, 'background-hover');
      background-clip: padding-box;

      > a {
        color: map-get($o, 'color-hover');

        &:hover {
          text-decoration: none;
        }
      }
    }
    li.active {
      > a {
        color: map-get($o, 'color-active');
      }
      &:hover {
        background: none;
      }
    }
    li:first-child {
      @include border-top-radius(map-get($o, 'border-radius'));
    }
    li:last-child {
      border-bottom: 0 none;
      @include border-bottom-radius(map-get($o, 'border-radius'));
    }

    li a {
      display: block;
      padding: map-get($o, 'padding-menu-item');
      color: map-get($o, 'color');
      border: 0 none;
    }

  } @else {
    @warn 'The output type "#{$type}" is not supported in `add-dropdown-style()`';
  }

}

// Add Dropdown Position
// Adds the position styles for a dropdown.
// @param $options
//   @type map
//   @default $dropdowns map
// @param $anchor
//   @type string (bottom-left, bottom-right, bottom-center, top-left, top-right, top-center,
//     left-top, left-bottom, left-center, right-top, right-bottom, right-center)
//   @default bottom-left
@mixin add-dropdown-position($options: (), $anchor : 'bottom-left') {
  $o: map-merge($dropdowns, $options);

  // Set our target action
  $target : '.' + map-get($o, 'class-dropdown') !default;

  @if (map-get($o, 'target')) {
    $target : map-get($o, 'target');
  }

  // Set our target action variable
  $target-action :
    '&:not(.#{map-get($o, 'class-action-click')}):not(.#{map-get($o, 'class-action-hover')}):hover > .#{map-get($o, 'class-dropdown')}',
    '&.#{map-get($o, 'class-active')} > .#{map-get($o, 'class-dropdown')}'
  !default;

  @if (map-get($o, 'target-action')) {
    $target-action : map-get($o, 'target-action');
  }

  // Bottom Left
  @if ($anchor == 'bottom-left') {
    #{$target} {
      margin: map-get($o, 'offset-margin-one') 0 0 map-get($o, 'offset-margin-two');
      top: 100%;
      left: map-get($o, 'offset-position');
      right: auto;
      bottom: auto;
    }

  // Bottom Right
  } @else if ($anchor == 'bottom-right') {
    #{$target} {
      margin: map-get($o, 'offset-margin-one') map-get($o, 'offset-margin-two') 0 0;
      top: 100%;
      left: auto;
      right: map-get($o, 'offset-position');
      bottom: auto;
    }

  // Bottom Center
  } @else if ($anchor == 'bottom-center') {
    #{$target} {
      margin: map-get($o, 'offset-margin-one') 0 0 0;
      top: 100%;
      left: 50%;
      right: auto;
      bottom: auto;
      transform: translate3d(-50%, 0, 0);
    }
  }

  // Top left
  @if ($anchor == 'top-left') {
    #{$target} {
      margin: 0 0 map-get($o, 'offset-margin-one') map-get($o, 'offset-margin-two');
      top: auto;
      left: map-get($o, 'offset-position');
      right: auto;
      bottom: 100%;
    }

  // Top Right
  } @else if ($anchor == 'top-right') {
    #{$target} {
      margin: 0 map-get($o, 'offset-margin-two') map-get($o, 'offset-margin-one') 0;
      top: auto;
      left: auto;
      right: map-get($o, 'offset-position');
      bottom: 100%;
    }

  // Top Center
  } @else if ($anchor == 'top-center') {
    #{$target} {
      margin: 0 0 map-get($o, 'offset-margin-one') 0;
      top: auto;
      left: 50%;
      right: auto;
      bottom: 100%;
      transform: translate3d(-50%, 0, 0);
    }
  }

  // Left Top
  @if ($anchor == 'left-top') {
    #{$target} {
      margin: map-get($o, 'offset-margin-two') map-get($o, 'offset-margin-one') 0 0;
      top: map-get($o, 'offset-position');
      left: auto;
      right: 100%;
      bottom: auto;
    }

  // Left Bottom
  } @else if ($anchor == 'left-bottom') {
    #{$target} {
      margin: 0 map-get($o, 'offset-margin-one') map-get($o, 'offset-margin-two') 0;
      top: auto;
      left: auto;
      right: 100%;
      bottom: map-get($o, 'offset-position');
    }

  // Left Center
  } @else if ($anchor == 'left-center') {
    #{$target} {
      margin: 0 map-get($o, 'offset-margin-one') 0 0;
      top: 50%;
      left: auto;
      right: 100%;
      bottom: auto;
      transform: translate3d(0, -50%, 0);
    }
  }

  // Right Top
  @if ($anchor == 'right-top') {
    #{$target} {
      margin: map-get($o, 'offset-margin-two') 0 0 map-get($o, 'offset-margin-one');
      top: map-get($o, 'offset-position');
      left: 100%;
      right: auto;
      bottom: auto;
    }

  // Right Bottom
  } @else if ($anchor == 'right-bottom') {
    #{$target} {
      margin: 0 0 map-get($o, 'offset-margin-two') map-get($o, 'offset-margin-one');
      top: auto;
      left: 100%;
      right: auto;
      bottom: map-get($o, 'offset-position');
    }

  // Right Center
  } @else if ($anchor == 'right-center') {
    #{$target} {
      margin: 0 0 0 map-get($o, 'offset-margin-one');
      top: 50%;
      left: 100%;
      right: auto;
      bottom: auto;
      transform: translate3d(0, -50%, 0);
    }
  }
}

// Check if we should output dropdown classes
@if (map-get($dropdowns, 'classes') == true) {

/*==============================================================================
  @Dropdowns - #{$filename}
==============================================================================*/

/**
 * General Dropdown Styles
 */
.#{map-get($dropdowns, 'class-dropdown')},
.#{map-get($dropdowns, 'class-dropdown-content')},
.#{map-get($dropdowns, 'class-dropdown-menu')} {
  @include make-dropdown();
}

/**
 * Dropdown
 */
.#{map-get($dropdowns, 'class-dropdown')} {
  @include add-dropdown-style($type: 'dropdown');
}

/**
 * Dropdown Content
 */
.#{map-get($dropdowns, 'class-dropdown-content')} {
  @include add-dropdown-style($type: 'dropdown-content');
}

/**
 * Dropdown Menu
 */
.#{map-get($dropdowns, 'class-dropdown-menu')} {
  @include add-dropdown-style($type: 'dropdown-menu');
}

/*==============================================================================
  @Dropdown Triggers - #{$filename}
==============================================================================*/

.#{map-get($dropdowns, 'class-dropdown-trigger')} {
  @include make-dropdown-trigger();
  @include add-dropdown-position($anchor: 'bottom-left');
}

.#{map-get($dropdowns, 'class-dropdown-menu')} {
  @include make-dropdown-trigger((
    'target' : '.dropdown-menu',
    'target-action' : '> li:hover > .dropdown-menu, &.active > li > .dropdown-menu'
  ));
  @include add-dropdown-position((
    'target' : '.dropdown-menu',
    'target-action' : '> li:hover > .dropdown-menu, &.active > li > .dropdown-menu',
    'offset-margin-two' : -1px,
    'offset-position' : -0.5em
  ), $anchor: 'right-top');
}

// Check if we should output modifier classes
@if (map-get($dropdowns, 'classes-position') == true) {

/*==============================================================================
  @Dropdown Anchor Positions - #{$filename}
==============================================================================*/

.anchor-bottom-left {
  @include add-dropdown-position($anchor: 'bottom-left');
}
.anchor-bottom-right {
  @include add-dropdown-position($anchor: 'bottom-right');
}
.anchor-bottom-center {
  @include add-dropdown-position($anchor: 'bottom-center');
}

.anchor-top-left {
  @include add-dropdown-position($anchor: 'top-left');
}
.anchor-top-right {
  @include add-dropdown-position($anchor: 'top-right');
}
.anchor-top-center {
  @include add-dropdown-position($anchor: 'top-center');
}

.anchor-left-top {
  @include add-dropdown-position($anchor: 'left-top');
}
.anchor-left-bottom {
  @include add-dropdown-position($anchor: 'left-bottom');
}
.anchor-left-center {
  @include add-dropdown-position($anchor: 'left-center');
}

.anchor-right-top {
  @include add-dropdown-position($anchor: 'right-top');
}
.anchor-right-bottom {
  @include add-dropdown-position($anchor: 'right-bottom');
}
.anchor-right-center {
  @include add-dropdown-position($anchor: 'right-center');
}

} // endif classes-position

} // endif classes
