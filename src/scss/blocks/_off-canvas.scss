// Set file variable
$filename: 'scss/custom/off-canvas.scss';

////////////////////////////////////////////////////////////////////////////////
// @Off-Canvas Map
////////////////////////////////////////////////////////////////////////////////

$off-canvas: (
  'classes' : true,

  'class-wrap'    : 'oc-wrap',
  'class-pusher'  : 'oc-pusher',
  'class-content' : 'oc-content',
  'class-aside'   : 'oc-aside',
  'class-active'  : 'oc-active',

  'class-aside-left'  : 'slide-in-left',
  'class-aside-right' : 'slide-in-right',

  'content-screen' : rgba(0,0,0,0.2),
  'aside-screen'   : rgba(0,0,0,0.2),

  'transition' : 'slide-in-left',
  'transition-duration' : 0.5s,
  'width' : 280px,

) !default;

// Extend default off-canvas map with overrides if they exist
@if variable-exists(override) {
  @if (map-has-key($override, 'off-canvas') == true) {
    $off-canvas: map-extend($off-canvas, map-get($override, 'off-canvas'), true);
  }
}

////////////////////////////////////////////////////////////////////////////////
// @Off-Canvas Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Off-Canvas
// Creates the base styles for off-canvas content
// @param $options
//   @type map
//   @default $off-canvas map
@mixin make-off-canvas($options: ()) {
  $o: map-merge($off-canvas, $options);

  // Base structure styles
  .oc-wrap,
  .oc-pusher,
  .oc-content,
  .oc-aside {
  	height: 100%;
  }
  .oc-wrap {
  	position: relative;
  	overflow: hidden;
  }
  .oc-pusher {
  	position: relative;
  	left: 0;
  	z-index: 99;
  	height: 100%;
  	transition: transform map-get($o, 'transition-duration');
  }
  .oc-content {
    position: relative;
    overflow-y: scroll;
  }
  .oc-aside {
  	position: absolute;
  	top: 0;
  	z-index: 100;
  	visibility: hidden;
  	width: map-get($o, 'width');
  	transition: all map-get($o, 'transition-duration');
  }

  // Content screen
  @if (map-get($o, 'content-screen')) {
    .oc-pusher:after {
    	position: absolute;
    	top: 0;
    	right: 0;
    	width: 0;
    	height: 0;
    	background: map-get($o, 'content-screen');
    	content: '';
    	opacity: 0;
    	transition: opacity map-get($o, 'transition-duration'), width 0.1s map-get($o, 'transition-duration'), height 0.1s map-get($o, 'transition-duration');
    }
    .oc-active .oc-pusher:after {
    	width: 100%;
    	height: 100%;
    	opacity: 1;
    	transition: opacity map-get($o, 'transition-duration');
    }
  }

  // Aside screen
  @if (map-get($o, 'aside-screen')) {
    .oc-aside:after {
    	position: absolute;
    	top: 0;
    	left: 0;
    	width: 100%;
    	height: 100%;
      background: map-get($o, 'aside-screen');
    	content: '';
    	opacity: 1;
    	transition: opacity map-get($o, 'transition-duration');
    }
    .oc-active .oc-aside:after {
    	width: 0;
    	height: 0;
    	opacity: 0;
    	transition: opacity map-get($o, 'transition-duration'), width 0.1s map-get($o, 'transition-duration'), height 0.1s map-get($o, 'transition-duration');
    }
  }
}

// Add Off-Canvas Transition
// Creates the base styles for off-canvas content
// @param $options
//   @type map
//   @default $off-canvas map
// @param $target
//   @type string
//   @default $off-canvas('class-aside-left')
// @param $style
//   @type string
//   @default $off-canvas('transition')
@mixin add-off-canvas-transition($options: (), $target: map-get($off-canvas, 'class-aside-left'), $style: map-get($off-canvas, 'transition')) {
  $o: map-merge($off-canvas, $options);

  // slide-in left
  @if ($style == 'slide-in-left') {

    .#{$target}.#{map-get($o, 'class-aside')} {
      left: 0;
    	visibility: visible;
    	transform: translate3d(-100%, 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-active')} .#{$target}.#{map-get($o, 'class-aside')} {
    	visibility: visible;
    	transform: translate3d(0, 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-aside')}:after {
    	display: none;
    }

  // slide-in right
  } @else if ($style == 'slide-in-right') {

    .#{$target}.#{map-get($o, 'class-aside')} {
      right: 0;
    	visibility: visible;
    	transform: translate3d(100%, 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-active')} .#{$target}.#{map-get($o, 'class-aside')} {
    	visibility: visible;
    	transform: translate3d(0, 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-aside')}:after {
    	display: none;
    }

  // reveal left
  } @else if ($style == 'reveal-left') {

    .#{$target}.#{map-get($o, 'class-active')} .#{map-get($o, 'class-pusher')} {
    	transform: translate3d(map-get($o, 'width'), 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-aside')} {
      left: 0;
    	z-index: 1;
    }
    .#{$target}.#{map-get($o, 'class-active')} .#{$target}.#{map-get($o, 'class-aside')} {
    	visibility: visible;
    	transition: transform map-get($o, 'transition-duration');
    }
    .#{$target}.#{map-get($o, 'class-aside')}:after {
    	display: none;
    }

  // reveal right
  } @else if ($style == 'reveal-right') {

    .#{$target}.#{map-get($o, 'class-active')} .#{map-get($o, 'class-pusher')} {
    	transform: translate3d(-(map-get($o, 'width')), 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-aside')} {
      right: 0;
    	z-index: 1;
    }
    .#{$target}.#{map-get($o, 'class-active')} .#{$target}.#{map-get($o, 'class-aside')} {
    	visibility: visible;
    	transition: transform map-get($o, 'transition-duration');
    }
    .#{$target}.#{map-get($o, 'class-aside')}:after {
    	display: none;
    }

  // slide-along left
  } @else if ($style == 'slide-along-left') {

    .#{$target}.#{map-get($o, 'class-active')} .#{map-get($o, 'class-pusher')} {
    	transform: translate3d(map-get($o, 'width'), 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-aside')} {
      left: 0;
    	z-index: 1;
    	transform: translate3d(-50%, 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-active')} .#{$target}.#{map-get($o, 'class-aside')} {
    	visibility: visible;
    	transition: transform map-get($o, 'transition-duration');
    	transform: translate3d(0, 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-aside')}:after {
    	display: none;
    }

  // slide-along right
  } @else if ($style == 'slide-along-right') {

    .#{$target}.#{map-get($o, 'class-active')} .#{map-get($o, 'class-pusher')} {
    	transform: translate3d(-(map-get($o, 'width')), 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-aside')} {
      right: 0;
    	z-index: 1;
    	transform: translate3d(50%, 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-active')} .#{$target}.#{map-get($o, 'class-aside')} {
    	visibility: visible;
    	transition: transform map-get($o, 'transition-duration');
    	transform: translate3d(0, 0, 0);
    }
    .#{$target}.#{map-get($o, 'class-aside')}:after {
    	display: none;
    }

  // transition doesn't exist
  } @else {
    @warn 'The off-canvas transition of `#{$style}` does not exist';
  }
}

// Check if we should output modifier classes
@if (map-get($off-canvas, 'classes') == true) {
/*==============================================================================
  @Off-Canvas - #{$filename}
==============================================================================*/

@include make-off-canvas();

/**
 * Off-canvas transitions
 */
@include add-off-canvas-transition($target: 'slide-in-left', $style: 'slide-in-left');
@include add-off-canvas-transition($target: 'slide-in-right', $style: 'slide-in-right');

@include add-off-canvas-transition($target: 'reveal-left', $style: 'reveal-left');
@include add-off-canvas-transition($target: 'reveal-right', $style: 'reveal-right');

@include add-off-canvas-transition($target: 'slide-along-left', $style: 'slide-along-left');
@include add-off-canvas-transition($target: 'slide-along-right', $style: 'slide-along-right');

/**
 * Temp styles
 */
.oc-aside {
  padding: 1em 2em;
  background: $blue;
  color: $white;
}
.oc-content {
  padding: 3em;
  background: $white;
}

/* Effect 4: Reverse slide out */
.oc-aside-4.oc-active .oc-pusher {
	-webkit-transform: translate3d(280px, 0, 0);
	transform: translate3d(280px, 0, 0);
}
.oc-aside-4.oc-aside {
	z-index: 1;
	-webkit-transform: translate3d(50%, 0, 0);
	transform: translate3d(50%, 0, 0);
}
.oc-aside-4.oc-active .oc-aside-4.oc-aside {
	visibility: visible;
	-webkit-transition: -webkit-transform 0.5s;
	transition: transform 0.5s;
	-webkit-transform: translate3d(0, 0, 0);
	transform: translate3d(0, 0, 0);
}

/* Effect 5: Scale down pusher */

.oc-aside-5.oc-wrap {
	-webkit-perspective: 1500px;
	perspective: 1500px;
}
.oc-aside-5 .oc-pusher {
	-webkit-transform-style: preserve-3d;
	transform-style: preserve-3d;
}
.oc-aside-5.oc-active .oc-pusher {
	-webkit-transform: translate3d(0, 0, -280px);
	transform: translate3d(0, 0, -280px);
}
.oc-aside-5.oc-aside {
	opacity: 1;
	-webkit-transform: translate3d(-100%, 0, 0);
	transform: translate3d(-100%, 0, 0);
}
.oc-aside-5.oc-active .oc-aside-5.oc-aside {
	visibility: visible;
	-webkit-transition: -webkit-transform 0.5s;
	transition: transform 0.5s;
	-webkit-transform: translate3d(0, 0, 0);
	transform: translate3d(0, 0, 0);
}
.oc-aside-5.oc-aside::after {
	display: none;
}

/* Effect 6: Scale up */

.oc-aside-6.oc-wrap {
	-webkit-perspective: 1500px;
	perspective: 1500px;
	-webkit-perspective-origin: 0% 50%;
	perspective-origin: 0% 50%;
}
.oc-aside-6.oc-active .oc-pusher {
	-webkit-transform: translate3d(280px, 0, 0);
	transform: translate3d(280px, 0, 0);
}
.oc-aside-6.oc-aside {
	z-index: 1;
	opacity: 1;
	-webkit-transform: translate3d(0, 0, -280px);
	transform: translate3d(0, 0, -280px);
}
.oc-aside-6.oc-active .oc-aside-6.oc-aside {
	visibility: visible;
	-webkit-transition: -webkit-transform 0.5s;
	transition: transform 0.5s;
	-webkit-transform: translate3d(0, 0, 0);
	transform: translate3d(0, 0, 0);
}

/* Effect 7: Scale and rotate pusher */

.oc-aside-7.oc-wrap {
	-webkit-perspective: 1500px;
	perspective: 1500px;
}
.oc-aside-7 .oc-pusher {
	-webkit-transform-style: preserve-3d;
	transform-style: preserve-3d;
}
.oc-aside-7.oc-active .oc-pusher {
	-webkit-transform: translate3d(100px, 0, -600px) rotateY(-20deg);
	transform: translate3d(100px, 0, -600px) rotateY(-20deg);
}
.oc-aside-7.oc-aside {
	opacity: 1;
	-webkit-transform: translate3d(-100%, 0, 0);
	transform: translate3d(-100%, 0, 0);
}
.oc-aside-7.oc-active .oc-aside-7.oc-aside {
	visibility: visible;
	-webkit-transition: -webkit-transform 0.5s;
	transition: transform 0.5s;
	-webkit-transform: translate3d(0, 0, 0);
	transform: translate3d(0, 0, 0);
}
.oc-aside-7.oc-aside::after {
	display: none;
}

/* Effect 8: Open door */

.oc-aside-8.oc-wrap {
	-webkit-perspective: 1500px;
	perspective: 1500px;
}
.oc-aside-8 .oc-pusher {
	-webkit-transform-origin: 100% 50%;
	transform-origin: 100% 50%;
	-webkit-transform-style: preserve-3d;
	transform-style: preserve-3d;
}
.oc-aside-8.oc-active .oc-pusher {
	-webkit-transform: rotateY(-10deg);
	transform: rotateY(-10deg);
}
.oc-aside-8.oc-aside {
	opacity: 1;
	-webkit-transform: translate3d(-100%, 0, 0);
	transform: translate3d(-100%, 0, 0);
}
.oc-aside-8.oc-active .oc-aside-8.oc-aside {
	visibility: visible;
	-webkit-transition: -webkit-transform 0.5s;
	transition: transform 0.5s;
	-webkit-transform: translate3d(0, 0, 0);
	transform: translate3d(0, 0, 0);
}
.oc-aside-8.oc-aside::after {
	display: none;
}

} // endif classes
