////////////////////////////////////////////////////////////////////////////////
// @General Functions
////////////////////////////////////////////////////////////////////////////////

// Map Fetch
// An easy way to fetch a deep value in a multi-level map. Works much like map-get() except that you pass multiple keys as the second variable argument to go down multiple levels in the nested map.
// @param $map
//   @type map
// @param $keys...
//   @type map keys
// @return map value
@function map-fetch($map, $keys...) {
  $value: $map;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}

// Strip Units
// Srtips the unit from a value. e.g. 12px -> 12.
// @param $val
//   @type unit (pixel, em, percent, number)
// @return number
@function strip-units($val) {
  @return ($val / ($val * 0 + 1));
}

// Pixels to Ems
// Converts a pixel value to ems.
// @param $px
//   @type unit (pixel, number)
// @param $base-font-size
//   @type unit (pixel, number)
//   @default $base-font-size
// @return unit (em)
@function px-to-em($px, $base : $base-font-size) {
  @if unitless($px) {
    $px: 1px * $px;
  }
  @if unitless($base) {
    $base: 1px * $base;
  }
  $px: ($px / $base) * 1em;
  @return strip-units($px) * 1em;
}

// Pixels to Rems
// Converts a pixel value to rems.
// @param $px
//   @type unit (pixel, number)
// @return unit (rem)
@function px-to-rem($px) {
  @if unitless($px) {
    $px: 1px * $px;
  }
  @if unitless($base-font-size) {
    $base-font-size: 1px * $base-font-size;
  }
  $px: ($px / $base-font-size) * 1rem;
  @return strip-units($px) * 1rem;
}

// Ems to Pixels
// Converts an em value to pixels.
// @param $px
//   @type unit (em, number)
// @param $base-font-size
//   @type unit (pixel, number)
//   @default $base-font-size
// @return unit (px)
@function em-to-px($em, $base : $base-font-size) {
  @if unitless($em) {
    $em: 1em * $em;
  }
  @if unitless($base) {
    $base: 1px * $base;
  }
  $em: ($em * $base) / 1px;
  @return strip-units($em) * 1px;
}
