////////////////////////////////////////////////////////////////////////////////
// Utility
////////////////////////////////////////////////////////////////////////////////

// Hide text
// Image replacement trick that hides text.
@mixin hide-text {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

// Clear Mixins
// Allows for clearfixing by adding as mixin or as class.
@mixin clearfix {
  &:after {
    content:"";
    display:table;
    clear:both;
  }
}

// Makes Hidden
// Makes an element hidden with display none !important
@mixin make-hidden {
  display: none !important;
}

// Makes Visible
// Makes an element visible with custom display value
@mixin make-visible( $display : $display-visible ) {
  display: $display !important;
}

////////////////////////////////////////////////////////////////////////////////
// CSS3 Helpers
////////////////////////////////////////////////////////////////////////////////

// Border Radius Mixins
// Set border-radius with global defaults.
@mixin border-radius($radius: $border-radius) {
  border-radius: $radius;
}
// Top
@mixin border-radius-top($radius: $border-radius) {
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}
@mixin border-radius-top-left($radius: $border-radius) {
  border-top-left-radius: $radius;
}
@mixin border-radius-top-right($radius: $border-radius) {
  border-top-right-radius: $radius;
}
// Bottom
@mixin border-radius-bottom($radius: $border-radius) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-radius-bottom-left($radius: $border-radius) {
  border-bottom-left-radius: $radius;
}
@mixin border-radius-bottom-right($radius: $border-radius) {
  border-bottom-right-radius: $radius;
}
// Left
@mixin border-radius-left($radius: $border-radius) {
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-radius-left-top($radius: $border-radius) {
  border-top-left-radius: $radius;
}
@mixin border-radius-left-bottom($radius: $border-radius) {
  border-bottom-left-radius: $radius;
}
// Right
@mixin border-radius-right($radius: $border-radius) {
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}
@mixin border-radius-right-top($radius: $border-radius) {
  border-top-right-radius: $radius;
}
@mixin border-radius-right-bottom($radius: $border-radius) {
  border-bottom-right-radius: $radius;
}

// Box Sizing
// Adds the box-sizing property with browser prefixes and global default
@mixin box-sizing($boxmodel) {
  -moz-box-sizing: $boxmodel;
  box-sizing: $boxmodel;
}

// Box Shadows
// Create box shadow using global default
@mixin box-shadow($shadow: $box-shadow) {
  box-shadow: $shadow;
}

// Transition
// Create transition with browser prefixes and global default
@mixin transition( $-transition: $transition ) {
  -webkit-transition: $-transition;
  -moz-transition: $-transition;
  -o-transition: $-transition;
  transition: $-transition;
}

// Transition Property
// Set transition-property with browser prefixes and global default
@mixin transition-property( $-transition-property: $transition-property ) {
  -webkit-transition-property: $-transition-property;
  -moz-transition-property: $-transition-property;
  -o-transition-property: $-transition-property;
  transition-property: $-transition-property;
}

// Transition Duration
// Set transition-duration with browser prefixes and global default
@mixin transition-duration( $-transition-duration: $transition-duration ) {
  -webkit-transition-duration: $-transition-duration;
  -moz-transition-duration: $-transition-duration;
  -o-transition-duration: $-transition-duration;
  transition-duration: $-transition-duration;
}

// Transition Timing Function
// Set transition-timing-function with browser prefixes and global default
@mixin transition-timing-function( $-transition-timing-function: $transition-timing-function ) {
  -webkit-transition-timing-function: $-transition-timing-function;
  -moz-transition-timing-function: $-transition-timing-function;
  -o-transition-timing-function: $-transition-timing-function;
  transition-timing-function: $-transition-timing-function;
}

// Transition Delay
// Set transition-delay with browser prefixes and global default
@mixin transition-delay( $-transition-delay: $transition-delay ) {
  -webkit-transition-delay: $-transition-delay;
  -moz-transition-delay: $-transition-delay;
  -o-transition-delay: $-transition-delay;
  transition-delay: $-transition-delay;
}

// Rotate
// Create rotate transform with browser prefixes and global default
@mixin rotate($deg: $rotate-degree) {
  -webkit-transform: rotate($deg);
  -moz-transform: rotate($deg);
  -o-transform: rotate($deg);
  -ms-transform: rotate($deg);
  transform: rotate($deg);
}

// Gradients
// For greating gradient backgrounds easily
#gradient {

  // Horizontal
  // 
  // @syntex #gradient > .horizontal(@a, @b);
  // 
  // @param start color
  // @param end color
  .horizontal(@start-color: @gradient-start-color, @end-color: @gradient-end-color) {
    background-color: @end-color;
    background-image: -moz-linear-gradient(left, @start-color, @end-color);
    background-image: -ms-linear-gradient(left, @start-color, @end-color);
    background-image: -webkit-gradient(linear, 0 0, 100% 0, from(@start-color), to(@end-color));
    background-image: -webkit-linear-gradient(left, @start-color, @end-color);
    background-image: -o-linear-gradient(left, @start-color, @end-color);
    background-image: linear-gradient(left, @start-color, @end-color);
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",@start-color,@end-color));
  }

  // Vertical
  // 
  // @syntex #gradient > .vertical(@a, @b);
  // 
  // @param start color
  // @param end color
  .vertical(@start-color: @gradient-start-color, @end-color: @gradient-end-color) {
    background-color: @end-color;
    background-image: -moz-linear-gradient(top, @start-color, @end-color);
    background-image: -ms-linear-gradient(top, @start-color, @end-color);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@start-color), to(@end-color));
    background-image: -webkit-linear-gradient(top, @start-color, @end-color);
    background-image: -o-linear-gradient(top, @start-color, @end-color);
    background-image: linear-gradient(top, @start-color, @end-color);
    background-repeat: repeat-x;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",@start-color,@end-color));
  }

  // Directional
  // 
  // @syntex #gradient > .directional(@a, @b, @c);
  // 
  // @param start color
  // @param end color
  // @param degree value for gradient angle
  .directional(@start-color: @gradient-start-color, @end-color: @gradient-end-color, $deg: @gradient-deg) {
    background-color: @end-color;
    background-repeat: repeat-x;
    background-image: -moz-linear-gradient($deg, @start-color, @end-color);
    background-image: -webkit-linear-gradient($deg, @start-color, @end-color);
    background-image: -o-linear-gradient($deg, @start-color, @end-color);
    background-image: linear-gradient($deg, @start-color, @end-color);
  }

  // Horizontal with Three Colors
  // 
  // @syntex #gradient > .horizontal-three-colors(@a, @b, @c);
  // 
  // @param start color
  // @param center color
  // @param end color
  .horizontal-three-colors(@start-color: @gradient-start-color, @center-color: @gradient-center-color, @color-stop: @gradient-color-stop, @end-color: @gradient-end-color) {
    background-color: mix(@center-color, @end-color, 80%);
    background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @center-color), to(@end-color));
    background-image: -webkit-linear-gradient(left, @start-color, @center-color @color-stop, @end-color);
    background-image: -moz-linear-gradient(left, @start-color, @center-color @color-stop, @end-color);
    background-image: -o-linear-gradient(left, @start-color, @center-color @color-stop, @end-color);
    background-image: linear-gradient(to right, @start-color, @center-color @color-stop, @end-color);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color)));
  }

  // Vertical with Three Colors
  // 
  // @syntex #gradient > .vertical-three-colors(@a, @b, @c);
  // 
  // @param start color
  // @param center color
  // @param end color
  .vertical-three-colors(@start-color: @gradient-start-color, @center-color: @gradient-center-color, @color-stop: @gradient-color-stop, @end-color: @gradient-end-color) {
    background-color: mix(@center-color, @end-color, 80%);
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @center-color), to(@end-color));
    background-image: -webkit-linear-gradient(@start-color, @center-color @color-stop, @end-color);
    background-image: -moz-linear-gradient(top, @start-color, @center-color @color-stop, @end-color);
    background-image: -o-linear-gradient(@start-color, @center-color @color-stop, @end-color);
    background-image: linear-gradient(@start-color, @center-color @color-stop, @end-color);
    background-repeat: no-repeat;
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color)));
  }

  // Radial
  // 
  // @syntex #gradient > .radial(@a, @b);
  // 
  // @param center color of radial
  // @param outer color of radial
  .radial(@inner-color: @gradient-start-color, @outer-color: @gradient-end-color) {
    background-color: @outer-color;
    background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@inner-color), to(@outer-color));
    background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);
    background-image: -moz-radial-gradient(circle, @inner-color, @outer-color);
    background-image: -o-radial-gradient(circle, @inner-color, @outer-color);
    background-repeat: no-repeat;
  }

  // Striped
  // 
  // @syntex #gradient > .striped(@a, @b);
  // 
  // @param start color
  // @param degree value for gradient angle
  .striped(@color: @gradient-start-color, @angle: @gradient-deg) {
    background-color: @color;
    background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
    background-image: -webkit-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: -moz-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: -o-linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-image: linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  }

  // Reset filters for IE
  // 
  // @syntex #gradient > .reset-filter();
  .reset-filter() {
    filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
  }
}

////////////////////////////////////////////////////////////////////////////////
// Typography
////////////////////////////////////////////////////////////////////////////////

// Font Sequence
// Sets font-size and line-height based on a multiplier
// 
// @param font size in pixels
// @param line height in pixels or set to auto for automatic calculation based on font-size and line-height-inc
// @param unit to use for sizing e.g. px, em
// @param the context that sizes should be set. Default is base font size
.font-sequence( @-font-size : @font-size, @-line-height : auto, @-font-unit : @font-unit, @-context : @font-size ) when (@-font-unit = px) {
  font-size: @-font-size;
  
  .line-height() when (@-line-height = auto) {
    line-height: unit( (@-font-size + @line-height-inc), px);
  }
  .line-height() when (isnumber(@-line-height)) and (@-line-height > 0) {
    line-height: @-line-height;
  }
  .line-height();
}
.font-sequence( @-font-size : @font-size, @-line-height : auto, @-font-unit : @font-unit, @-context : @font-size ) when (@-font-unit = em) {

  @-size: round((@-font-size / @-context), 2);
  
  font-size: unit( @-size, em);
  
  .line-height() when (@-line-height = auto) {
    line-height: unit( round( ((@-size + 0.6) / @-size), 2), em);
  }
  .line-height() when (isnumber(@-line-height)) and (@-line-height > 0) {
    line-height: unit( round( (@-line-height / (@-size * @-context)), 2), em);
  }
  .line-height();
}
.font-sequence(  @-font-size : @font-size, @-line-height : auto, @-font-unit : @font-unit, @-context : @font-size ) when (@-font-unit = rem) {

  @-size: round((@-font-size / @-context), 2);
  
  font-size: unit( @-size, rem);
  
  .line-height() when (@-line-height = auto) {
    line-height: unit( round( ((@-size + 0.6) / @-size), 2), em);
  }
  .line-height() when (isnumber(@-line-height)) and (@-line-height > 0) {
    line-height: unit( round( (@-line-height / (@-size * @-context)), 2), em);
  }
  .line-height();
}

// Mono Font
// Adds mono font styles to an element along with font sizing and line-height.
//
// @param font size used with font-sequence()
.mono-font( @size : @font-size-code ) {
  font-family: @font-family-mono;
  .font-sequence( @size );
}

// Uppercase
// Makes text uppercase with optional letter spacing value.
//
// @param letter spacing
.uppercase(@letter-spacing: @letter-spacing) {
  text-transform: uppercase;
  letter-spacing: @letter-spacing;
}

// Lowercase
// Makes text lowercase with optional letter spacing value.
//
// @param letter spacing
.lowercase(@letter-spacing: 0) {
  text-transform: lowercase;
  letter-spacing: @letter-spacing;
}

// Reset Case
// Resets the text's text-transform property and sets letter spacing back to zero.
.resetcase() {
  text-transform: none;
  letter-spacing: 0;
}

// Truncate Text
// Truncates text with an ellipsis. Element applied must be `block` or `inline-block`
//
// @param display property e.g. block, inline-block
.truncate-text( @display : block ) {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  
  .display() when ( @display = inline-block ), ( @display = block ) {
    display: @display;
  }
  .display();
}

////////////////////////////////////////////////////////////////////////////////
// List Mixins
////////////////////////////////////////////////////////////////////////////////

// Remove List Styles
// Removes default list styles and margins from a list element and it's children
.remove-list-styles() {
  list-style: none;
  margin: 0;
  
  li {
    margin: 0;
  }
}

// Inline Lists
// Converts a list into an inline list with inline elements.
//
// @param gutter type e.g. margin, padding
// @param gutter spacing between list items e.g. 10px, 20px
// @param side that margines should appear e.g. right, left, both
.inline-list( @-gutter-type : padding, @-margin : 10px, @-side : right  ) {
  margin: 0;
  list-style: none;
  
  li {
    display: inline-block;
  }
}
.inline-list( @-gutter-type : padding, @-margin : 10px, @-side : right  ) when ( @-gutter-type = margin ) {
  
  li {
    .side() when ( @-side = right ) {
      margin-right: @-margin;
    }
    .side() when ( @-side = left ) {
      margin-left: @-margin;
    }
    .side() when ( @-side = both ) {
      margin-left: (@-margin / 2);
      margin-right: (@-margin / 2);
    }
    .side();
  }
}
.inline-list( @-gutter-type : padding, @-margin : 10px, @-side : right  ) when ( @-gutter-type = padding ) {
  
  li {
    .side() when ( @-side = right ) {
      padding-right: @-margin;
    }
    .side() when ( @-side = left ) {
      padding-left: @-margin;
    }
    .side() when ( @-side = both ) {
      padding-left: (@-margin / 2);
      padding-right: (@-margin / 2);
    }
    .side();
  }
}

////////////////////////////////////////////////////////////////////////////////
// UI Helpers
////////////////////////////////////////////////////////////////////////////////

// Color
// Creates RGBA background-color styles based on a hex value, alpha channel and hex fallback
//
// @param hex value that will be converted to RGB
// @param alpha channel that will be used in RGBA
// @param hax value that will be used as a fallback for browers that don't support RGBA
// 
// @return background-color
.background-color(@hex : @bg-base, @alpha : @bg-alpha, @fallback : @bg) {

  .fallback() when (@fallback = 0) {
    @fallback: @hex;
  }
  .fallback();
  
  .background() when (@alpha = 1) {
    background-color: @fallback;
  }
  .background() when (@alpha = 0) {
    background-color: transparent;
  }
  .background() when (@alpha < 1) and (@alpha > 0) {
    background-color: @fallback;
    background-color: rgba( red(@hex), green(@hex), blue(@hex), @alpha);
  }
  .background();
}

// Color
// Creates RGBA border-color styles based on a hex value, alpha channel and hex fallback
//
// @param hex value that will be converted to RGB
// @param alpha channel that will be used in RGBA
// @param hax value that will be used as a fallback for browers that don't support RGBA
// 
// @return border-color
.border-color(@hex : @border-base, @alpha : @border-alpha, @fallback : @border) {

  .fallback() when (@fallback = 0) {
    @fallback: @hex;
  }
  .fallback();
  
  .border() when (@alpha = 1) {
    border-color: @fallback;
  }
  .border() when (@alpha = 0) {
    border-color: transparent;
  }
  .border() when (@alpha < 1) and (@alpha > 0) {
    border-color: @fallback;
    border-color: rgba( red(@hex), green(@hex), blue(@hex), @alpha);
  }
  .border();
}

// Color
// Creates RGBA color styles based on a hex value, alpha channel and hex fallback
//
// @param hex value that will be converted to RGB
// @param alpha channel that will be used in RGBA
// @param hax value that will be used as a fallback for browers that don't support RGBA
// 
// @return color
.color(@hex, @alpha : 1, @fallback : 0) {

  .fallback() when (@fallback = 0) {
    @fallback: @hex;
  }
  .fallback();
  
  .color() when (@alpha = 1) {
    color: @hex;
  }
  .color() when (@alpha = 0) {
    color: transparent;
  }
  .color() when (@alpha < 1) and (@alpha > 0) {
    color: @fallback;
    color: rgba( red(@hex), green(@hex), blue(@hex), @alpha);
  }
  .color();
}

// Arrows
// Uses the "0x0" element with borders trick to draw arrows.
//
// @syntax #arrow > .arrow-direction( @a, @b );
// 
// @param border width that determines size of arrow
// @param border color that determines color of arrow
#arrow {

  // Base arrow properties. This should be condisered a private mixin.
  // Don't use on it's own.
  .base() {
    content: "\0020";
    display: inline-block;
    width: 0;
    height: 0;
    border: 0 none;
    border-style: solid;
    border-color: transparent;
  }
  // Up arrow
  .up( @arrow-width, @arrow-color ) {
    .base();
    border-width: 0 @arrow-width @arrow-width @arrow-width;
    border-bottom-color: @arrow-color;
  }
  // Right arrow
  .right( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width 0 @arrow-width @arrow-width;
    border-left-color: @arrow-color;
  }
  // Down arrow
  .down( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width @arrow-width 0 @arrow-width;
    border-top-color: @arrow-color;
  }
  // Left arrow
  .left( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width @arrow-width @arrow-width 0;
    border-right-color: @arrow-color;
  }
  // Up right, right up arrow
  .up-right( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width;
    border-top-color: @arrow-color;
    border-right-color: @arrow-color;
  }
  .right-up( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width;
    border-top-color: @arrow-color;
    border-right-color: @arrow-color;
  }
  // Up left, left up arrow
  .up-left( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width;
    border-top-color: @arrow-color;
    border-left-color: @arrow-color;
  }
  .left-up( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width;
    border-top-color: @arrow-color;
    border-left-color: @arrow-color;
  }
  // Down right, right down arrow
  .down-right( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width;
    border-bottom-color: @arrow-color;
    border-right-color: @arrow-color;
  }
  .right-down( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width;
    border-bottom-color: @arrow-color;
    border-right-color: @arrow-color;
  }
  // Down left, left down arrow
  .down-left( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width;
    border-bottom-color: @arrow-color;
    border-left-color: @arrow-color;
  }
  .left-down( @arrow-width, @arrow-color ) {
    .base();
    border-width: @arrow-width;
    border-bottom-color: @arrow-color;
    border-left-color: @arrow-color;
  }
  
}

// Console
// Let's you output a LESS variable in the browser.
// Requires that `<div id="console"></div>` be somewhere in the DOM
// 
// @param LESS Variable that will be output in the browser
// @param position of console output - left, right, bottom-left, bottom-right
.console(@value, @position : right) {

  // Position conditionals
  .position() when ( @position = left ) {
    #console {
      top: 0;
      left: 0;
    }
    #console:after {
      @mixin border-radius-bottom-right();
    }
  }
  .position() when ( @position = right ) {
    #console {
      top: 0;
      right: 0;
    }
    #console:before {
      @mixin border-radius-bottom-left();
    }
  }
  .position() when ( @position = bottom-left ) {
    #console {
      bottom: 0;
      left: 0;
    }
    #console:after {
      @mixin border-radius-top-right();
    }
  }
  .position() when ( @position = bottom-right ) {
    #console {
      bottom: 0;
      right: 0;
    }
    #console:before {
      @mixin border-radius-top-left();
    }
  }
  .position();

  // Base console styles
  #console {
    position: fixed;
    z-index: 100;
    .mono-font();
    
    &:before, &:after {
      display: block;
      padding: 5px 15px;
      float: left;
    }
    
    &:before {
      content: "Console:";
      background: @blue;
      color: @gE;
    }
    
    &:after {
      content: "@{value}";
      background: @gE;
      color: @color-dark;
    }
  }
}
