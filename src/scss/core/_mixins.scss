////////////////////////////////////////////////////////////////////////////////
// @ Utility
////////////////////////////////////////////////////////////////////////////////

// Size Mixin
// Shorthand for adding width and height sizing to an element.
// 
// @param: $width
//   type: unit (number, pixel, percentage)
//
// @param: $height
//   type: unit (pixel, percentage, false)
//   default: false -> $width
@mixin size( 
    $width,
    $height : false
  ) {

  @if unitless($width) {
    $width: 1px * $width;
  }
  
  @if ($height != false) {
    @if unitless($height) {
      $height: 1px * $height;
    }
  } @else {
    $height: $width;
  }
  
  width: $width;
  height: $height;
}

// Clearfix Mixins
// Allows for clearfixing by adding as mixin or as class.
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Remove Clearfix
@mixin remove-clearfix {
  &:after {
    content: none;
    display: none;
    clear: none;
  }
}

// Scrollable
// Makes things scrollable in a sexy way
@mixin scrollable {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
  @include transition(
    top linear 0.2s,
    bottom linear 0.2s
  );
}

////////////////////////////////////////////////////////////////////////////////
// @ CSS3 Helpers
////////////////////////////////////////////////////////////////////////////////

// Box Sizing
//
// @param: $box-sizing
//   type: box-sizing value (border-box, none)
//   default: $box-sizing
@mixin box-sizing( $box-sizing : $box-sizing ) {
  -moz-box-sizing: $box-sizing;
  box-sizing: $box-sizing;
}

// Box Shadows
//
// @param: $shadow
//   type: box-shadow value ([horizontal offset] [vertical offset] [blur radius] [spread radius] [color])
//   default: $box-shadow
@mixin box-shadow( $shadow... ) {
  
  @if length($shadow) == 0 {
    $shadow: $box-shadow;
  }
  
  box-shadow: $shadow;
}

// Border Radius
// Border radius shorthand with defaults
// 
// @param: $radius
//   type: unit (pixel, percent)
@mixin border-radius( $radius : $border-radius ) {
  border-radius: $radius;
}
@mixin border-radius-top( $radius : $border-radius ) {
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}
@mixin border-radius-top-left( $radius : $border-radius ) {
  border-top-left-radius: $radius;
}
@mixin border-radius-top-right( $radius : $border-radius ) {
  border-top-right-radius: $radius;
}
@mixin border-radius-bottom( $radius : $border-radius ) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-radius-bottom-left( $radius : $border-radius ) {
  border-bottom-left-radius: $radius;
}
@mixin border-radius-bottom-right( $radius : $border-radius ) {
  border-bottom-right-radius: $radius;
}
@mixin border-radius-left( $radius : $border-radius ) {
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-radius-left-top( $radius : $border-radius ) {
  border-top-left-radius: $radius;
}
@mixin border-radius-left-bottom( $radius : $border-radius ) {
  border-bottom-left-radius: $radius;
}
@mixin border-radius-right( $radius : $border-radius ) {
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}
@mixin border-radius-right-top( $radius : $border-radius ) {
  border-top-right-radius: $radius;
}
@mixin border-radius-right-bottom( $radius : $border-radius ) {
  border-bottom-right-radius: $radius;
}

// Rotate
//
// @param: $deg
//   type: unit (degree)
@mixin rotate( $deg ) {
  -webkit-transform: rotate($deg);
  -ms-transform: rotate($deg);
  transform: rotate($deg);
}

// Transitions
// 
// @param: $transition
//   type: transition value ([transition-property] [transition-duration] [transition-timing-function] [transition-delay])
//   default: $transition
@mixin transition( $trans... ) {
  
  @if length($trans) == 0 {
    $trans: $transition;
  }
  
  -webkit-transition: $trans;
  transition: $trans;
}

// Transitions Property
// 
// @param: $transition-property
//   type: property name
//   default: $transition-property
@mixin transition-property( $transition-property : $transition-property ) {
  -webkit-transition-property: $transition-property;
  transition-property: $transition-property;
}

// Transitions Duration
// 
// @param: $transition-duration
//   type: time value (seconds, milliseconds)
//   default: $transition-duration
@mixin transition-duration( $transition-duration : $transition-duration ) {
  -webkit-transition-duration: $transition-duration;
  transition-duration: $transition-duration;
}

// Transitions Timing Function
// 
// @param: $transition-timing-function
//   type: timing function (linear, ease, ease-in, ease-out, ease-in-out, step-start, step-end)
//   default: $transition-timing-function
@mixin transition-timing-function( $transition-timing-function : $transition-timing-function ) {
  -webkit-transition-timing-function: $transition-timing-function;
  transition-timing-function: $transition-timing-function;
}

// Transitions Delay
// 
// @param: $transition-delay
//   type: time value (seconds, milliseconds)
//   default: $transition-delay
@mixin transition-delay( $transition-delay : $transition-delay ) {
  -webkit-transition-delay: $transition-delay;
  transition-delay: $transition-delay;
}

// Keyframes
//
// @param: $name
//   type: animation name
//
// @param: @content (passed in brackets)
//   type: style block
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

// Animation
//
// @param: $animation
//   type: animation value ([animation-name] [animation-duration] [animation-timing-function] [animation-delay] [animation-iteration-count] [animation-direction])
@mixin animation( $animation... ) {
  -webkit-animation: $animation;
  animation: $animation;
}

// Animation Name
//
// @param: $name
//   type: animation name
@mixin animation-name( $name... ) {
  -webkit-animation-name: $name;
  animation-name: $name;
}

// Animation Duration
//
// @param: $duration
//   type: time value (seconds, milliseconds)
@mixin animation-duration( $duration... ) {
  -webkit-animation-duration: $duration;
  animation-duration: $duration;
}

// Animation Timing Function
//
// @param: $timing-function
//   type: timing function (linear, ease, ease-in, ease-out, ease-in-out)
@mixin animation-timing-function( $timing-function... ) {
  -webkit-animation-timing-function: $timing-function;
  animation-timing-function: $timing-function;
}

// Animation Delay
//
// @param: $delay
//   type: time value (seconds, milliseconds)
@mixin animation-delay( $delay... ) {
  -webkit-animation-delay: $delay;
  animation-delay: $delay;
}

// Animation Iteration Count
//
// @param: $iteration-count
//   type: unit (number, infinite)
@mixin animation-iteration-count( $iteration-count... ) {
  -webkit-animation-iteration-count: $iteration-count;
  animation-iteration-count: $iteration-count;
}

// Animation Direction
//
// @param: $direction
//   type: animation direction (normal, reverse, alternate, alternate-reverse)
@mixin animation-direction( $direction... ) {
  -webkit-animation-direction: $direction;
  animation-direction: $direction;
}

// Animation Pause
//
// @param: $play-state
//   type: play state (running, paused)
@mixin animation-play-state( $play-stay... ) {
  -webkit-animation-play-state: $play-stay;
  animation-play-state: $play-stay;
}

// Horizontal Gradient
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $ge
//   type: color
//   default: $gradient-end
@mixin gradient-horizontal(
    $gs : $gradient-start,
    $ge : $gradient-end
  ) {
  background-color: $ge;
  background-image: -webkit-linear-gradient(left, $gs, $ge);
  background-image: -moz-linear-gradient(left, $gs, $ge);
  background-image: -ms-linear-gradient(left, $gs, $ge);
  background-image: linear-gradient(left, $gs, $ge);
  background-repeat: repeat-y;
}

// Vertical Gradient
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $ge
//   type: color
//   default: $gradient-end
@mixin gradient-vertical(
    $gs : $gradient-start,
    $ge : $gradient-end
  ) {
  background-color: $ge;
  background-image: -webkit-linear-gradient(top, $gs, $ge);
  background-image: -moz-linear-gradient(top, $gs, $ge);
  background-image: -ms-linear-gradient(top, $gs, $ge);
  background-image: linear-gradient(top, $gs, $ge);
  background-repeat: repeat-x;
}

// Directional Gradient
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $ge
//   type: color
//   default: $gradient-end
//
// @param: $deg
//   type: unit (degree)
//   default: $gradient-deg
@mixin gradient-directional(
    $gs : $gradient-start,
    $ge : $gradient-end,
    $deg : $gradient-deg
  ) {
  background-color: $ge;
  background-image: -webkit-linear-gradient($deg, $gs, $ge);
  background-image: -moz-linear-gradient($deg, $gs, $ge);
  background-image: -ms-linear-gradient($deg, $gs, $ge);
  background-image: linear-gradient($deg, $gs, $ge);
  background-repeat: repeat-x;
}

// Horizontal Gradient with Three Colors
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $gm
//   type: color
//   default: $gradient-middle
//
// @param: $ge
//   type: color
//   default: $gradient-end
//
// @param: $stop
//   type: unit (pixel, percentage)
//   default: $gradient-stop
@mixin gradient-horizontal-three-colors(
    $gs : $gradient-start,
    $gm : $gradient-middle,
    $ge : $gradient-end,
    $stop : $gradient-stop
  ) {
  background-color: mix($gs, $ge, 50%);
  background-image: -webkit-linear-gradient(left, $gs, $gm $stop, $ge);
  background-image: -moz-linear-gradient(left, $gs, $gm $stop, $ge);
  background-image: -ms-linear-gradient(left, $gs, $gm $stop, $ge);
  background-image: linear-gradient(left, $gs, $gm $stop, $ge);
  background-repeat: no-repeat;
}

// Vertical Gradient with Three Colors
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $gm
//   type: color
//   default: $gradient-middle
//
// @param: $ge
//   type: color
//   default: $gradient-end
//
// @param: $stop
//   type: unit (pixel, percentage)
//   default: $gradient-stop
@mixin gradient-vertical-three-colors(
    $gs : $gradient-start,
    $gm : $gradient-middle,
    $ge : $gradient-end,
    $stop : $gradient-stop
  ) {
  background-color: mix($gs, $ge, 50%);
  background-image: -webkit-linear-gradient(top, $gs, $gm $stop, $ge);
  background-image: -moz-linear-gradient(top, $gs, $gm $stop, $ge);
  background-image: -ms-linear-gradient(top, $gs, $gm $stop, $ge);
  background-image: linear-gradient(top, $gs, $gm $stop, $ge);
  background-repeat: no-repeat;
}

// Directional Gradient with Three Colors
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $gm
//   type: color
//   default: $gradient-middle
//
// @param: $ge
//   type: color
//   default: $gradient-end
//
// @param: $deg
//   type: unit (degree)
//   default: $gradient-deg
//
// @param: $stop
//   type: unit (pixel, percentage)
//   default: $gradient-stop
@mixin gradient-directional-three-colors(
    $gs : $gradient-start,
    $gm : $gradient-middle,
    $ge : $gradient-end,
    $deg : $gradient-deg,
    $stop : $gradient-stop
  ) {
  background-color: mix($gs, $ge, 50%);
  background-image: -webkit-linear-gradient($deg, $gs, $gm $stop, $ge);
  background-image: -moz-linear-gradient($deg, $gs, $gm $stop, $ge);
  background-image: -ms-linear-gradient($deg, $gs, $gm $stop, $ge);
  background-image: linear-gradient($deg, $gs, $gm $stop, $ge);
  background-repeat: no-repeat;
}

// Radial Gradients
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $ge
//   type: color
//   default: $gradient-end
@mixin gradient-radial(
    $inner : $gradient-start,
    $outer : $gradient-end
  ) {
  background-color: $outer;
  background-image: -webkit-radial-gradient(circle, $inner, $outer);
  background-image: -moz-radial-gradient(circle, $inner, $outer);
  background-image: -ms-radial-gradient(circle, $inner, $outer);
  background-image: radial-gradient(circle, $inner, $outer);
  background-repeat: no-repeat;
}

////////////////////////////////////////////////////////////////////////////////
// @ Typography
////////////////////////////////////////////////////////////////////////////////

// Hide text
// Image replacement trick that hides text.
@mixin text-hide {
  font-size: 0;
  line-height: 0;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

// Truncate Text
// Truncates text with an ellipsis. Element applied must be `block` or `inline-block`
//
// @param: $display
//   type: display property (block, inline-block)
//   default: block
@mixin text-truncate( $display : block ) {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  
  @if ($display == inline-block or $display == block) {
    display: $display;
  }
}

// Anchor Styles
// Builds the base styles for anchor tags
//
// @param: $color-link
//   type: color
//   default: $color-link
//
// @param: $color-link-hover
//   type: color
//   default: $color-link-hover
//
// @param: $border-color
//   type: color
//   default: $border-color
//
// @param: $border-color-hover
//   type: color
//   default: $border-color-hover
//
// @param: $color-link
//   type: boolean (true, false)
//   default: true
@mixin anchor(
    $color-link : $color-link,
    $color-link-hover : $color-link-hover,
    $border-color : $border-color,
    $border-color-hover : $border-color-hover,
    $transition : true
  ) {
  color: $color-link;
  text-decoration: none;
  border-bottom: 1px solid $border-color;
  
  @if ($transition != false) {
    @include transition(
      color $transition-timing-function $transition-duration,
      border $transition-timing-function $transition-duration
    );
  }
  
  &:hover {
    color: $color-link-hover;
    cursor: pointer;
    border-color: $border-color-hover;
  }
}

// Case
// Sets the case and letter spacing
//
// @param: $case
//   type: string ('upper', 'lower', 'cap', 'none')
//
// @param: $letter-spacing
//   type: unit (pixel, em, rem)
//   default: $letter-spacing
@mixin case($case, $letter-spacing : $letter-spacing) {

  @if ($case == 'upper') {
    text-transform: uppercase;
  } @else if ($case == 'lower') {
    text-transform: lowercase;
  } @else if ($case == 'cap') {
    text-transform: capitalize;
  } @else if ($case == 'none') {
    text-transform: none;
  }
  
  letter-spacing: $letter-spacing;
}

// Font
// Sets the font family, size and lineheight
//
// @param: $stack
//   type: string ('default', 'sans', 'serif', 'mono')
//   default: 'default'
//
// @param: $font-size
//   type: unit (pixel, em, rem)
//   default: $base-font-size
//
// @param: $line-height
//   type: unit (pixel, em, rem)
//   default: $base-line-height
//
// @param: $other
//   type: font weight and/or style value
//   default: false
@mixin font(
    $stack : 'default',
    $font-size : $base-font-size,
    $line-height : $base-line-height,
    $other : false
  ) {
  
  @if ($stack == 'default') {
    $stack: $base-font-family;
  } @else if ($stack == 'sans') {
    $stack: $font-family-sans;
  } @else if ($stack == 'serif') {
    $stack: $font-family-serif;
  } @else if ($stack == 'mono') {
    $stack: $font-family-mono;
  }
  
  @if ($other != false) {
    font: $other #{$font-size}/#{$line-height} $stack;
  } @else {
    font-family: $stack;        
    font-size: $font-size;
    line-height: $line-height;
  }
}

// font: font-style font-variant font-weight font-size/line-height font-family;

////////////////////////////////////////////////////////////////////////////////
// @ UI Helpers
////////////////////////////////////////////////////////////////////////////////

// Base Triangle
// The base styles for creating CSS triangles
// Use with `%triangle` as placeholder
@mixin triangle-base {
  content: "";
  display: inline-block;
  width: 0;
  height: 0;
  border: 0 none;
  border-style: solid;
  border-color: transparent;
}

// Triangle
// Uses the "0x0" element with borders trick to draw arrows.
//
// @param: $size
//   type: unit (pixel, em, rem)
//
// @param: $color
//   type: color
//
// @param: $direction
//   type: string ('up', 'right', 'down', 'left', 'up-right', 'up-left', 'down-right', 'down-left')
//   desc: The direction that the triangle will point.
//
// @param $base
//   type: boolean (true, false)
//   default: false
//   desc: Whether or not triangle base styles are applied individually or extended to the placeholder `%triangle`
@mixin triangle(
    $size,
    $color,
    $direction,
    $base : false
  ) {
  
  @if ($base == false) {
    @extend %triangle;
  } @else {
    @include triangle-base;
  }

  @if ($direction == 'up') {
    border-width: 0 $size $size $size;
    border-bottom-color: $color;
  } @else if ($direction == 'right') {
    border-width: $size 0 $size $size;
    border-left-color: $color;
  } @else if ($direction == 'down') {
    border-width: $size $size 0 $size;
    border-top-color: $color;
  } @else if ($direction == 'left') {
    border-width: $size $size $size 0;
    border-right-color: $color;
  } @else if ($direction == 'up right' or $direction == 'right up') {
    border-width: $size;
    border-top-color: $color;
    border-right-color: $color;
  } @else if ($direction == 'up left' or $direction == 'left up') {
    border-width: $size;
    border-top-color: $color;
    border-left-color: $color;
  } @else if ($direction == 'down right' or $direction == 'right down') {
    border-width: $size;
    border-bottom-color: $color;
    border-right-color: $color;
  } @else if ($direction == 'down left' or $direction == 'left down') {
    border-width: $size;
    border-bottom-color: $color;
    border-left-color: $color;
  } @else {
    @warn "#{$direction} is not a valid direction for @mixin triangle";
  }
}

// Console
// Let's you output a LESS variable in the browser.
// Requires that `<div id="console"></div>` be somewhere in the DOM
//
// @param: $value
//   type: parameter or value
//   desc: The parameter or value you want displayed in the browser.
//
// @param: $location
//   type: string ('left', 'right', 'bottom left', 'bottom right', 'auto')
//   default: 'right'
//
// @param: $position
//   type: position value (fixed, absolute)
//   default: fixed
//
// @param: $index
//   type: unit (number)
//   default: 100
@mixin console(
    $value,
    $location : 'right',
    $position : fixed,
    $index : 100
  ) {

  z-index: $index;
  @include font('mono', 12px, 20px);
  
  @if ($location == 'left') or ($location == 'top left') or ($location == 'left top') {
    position: $position;
    top: 0;
    left: 0;
  } @else if ($location == 'right') or ($location == 'top right') or ($location == 'right top') {
    position: $position;
    top: 0;
    right: 0;
  } @else if ($location == 'bottom left') or ($location == 'left bottom') {
    position: $position;
    bottom: 0;
    left: 0;
  } @else if ($location == 'bottom right') or ($location == 'right bottom') {
    position: $position;
    bottom: 0;
    right: 0;
  } @else if ($location == 'auto') {
    position: relative;
    display: inline-block;
  } @else {
    @warn "#{$location} is not a valid location for @mixin console";
  }
  
  &:before, &:after {
    display: block;
    padding: 5px 15px;
    float: left;
  }
  
  &:before {
    content: "Console:";
    background: $blue;
    color: $white;
    
    @if ($location == 'right') {
      @include border-radius-bottom-left;
    } @else if ($location == 'bottom right') {
      @include border-radius-top-left;
    } @else if ($location == 'auto') {
      @include border-radius-left;
    }
  }
  
  &:after {
    content: "#{$value}";
    background: $gray-lighter;
    color: $color-dark;
      
    @if ($location == 'left') {
      @include border-radius-bottom-right;
    }  @else if ($location == 'bottom left') {
      @include border-radius-top-right;
    } @else if ($location == 'auto') {
      @include border-radius-right;
    }
  }
}
