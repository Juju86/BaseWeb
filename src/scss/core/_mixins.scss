////////////////////////////////////////////////////////////////////////////////
// @Mixin Variables
////////////////////////////////////////////////////////////////////////////////

// Add Styles Map
// Used as default settings in add-styles and add-modifiers mixins
// @type map
$add-styles: (
  'output-base' : true,
  'output-pseudo' : true,
  'properties' : (
    // Structure
    'display',
    'float',
    'width',
    'height',
    'margin',
    'margin-top',
    'margin-left',
    'margin-right',
    'margin-bottom',
    'padding',
    'padding-top',
    'padding-left',
    'padding-right',
    'padding-bottom',
    'vertical-align',
    'content',

    // Typography
    'font-family',
    'font-size',
    'line-height',
    'font-weight',
    'text-align',
    'text-indent',
    'white-space',
    'letter-spacing',
    'overflow',
    'color',
    'text-shadow',

    // Aesthetic
    'background',
    'background-color',
    'background-clip',
    'box-shadow',
    'border',
    'border-color',
    'border-radius',

    // Transitions
    'transition',
    'transition-property',
    'transition-duration',
    'transition-timing-function',
    'transition-duration',
  ),
  'pseudo-classes' : (
    'hover',
    'focus',
    'active',
    'visited',
  ),
) !default;

////////////////////////////////////////////////////////////////////////////////
// @General Mixins
////////////////////////////////////////////////////////////////////////////////

// Add Clearfix
// Allows you to apply a clearfix to an element that contains floats.
@mixin add-clearfix() {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

// Remove Clearfix
// Removes the clearfix styles from an element. This is typically used when a
// clearfix is inherited on an element and you'd like it removed.
@mixin remove-clearfix() {
  &:after {
    content: none;
    display: none;
    clear: none;
  }
}

// Add Styles
// Output styles from a component map
// @param $input
// @param $settings
@mixin add-styles($input: (), $settings: ()) {
  $s: map-merge($add-styles, $settings);

  // Check if we should output base modifier styles
  @if map-get($s, 'output-base') {
    // Loop through properties and set them if they exist
    @each $prop in map-get($s, 'properties') {
      @if (map-has-key($input, $prop)) {
        #{$prop}: map-get($input, $prop);
      }
    }
  }

  // Check if we should output pseudo-class styles
  @if map-get($s, 'output-pseudo') {
    // Loop through pseudo-classes and see if they exist in $input
    @each $pseudo in map-get($s, 'pseudo-classes') {
      @if (map-has-key($input, $pseudo)) {
        &:#{$pseudo} {
          // Loop through properties and set them if they exist
          @each $prop in map-get($s, 'properties') {
            @if (map-has-key(map-get($input, $pseudo), $prop)) {
              #{$prop}: map-fetch($input, $pseudo, $prop);
            }
          }
        }
      }
    }
  }

}

// Add Modifiers
// Output an array of modifiers for flat components.
// @param $input
// @param $key
// @param $selector
// @param $settings
@mixin add-modifiers($input: (), $key: null, $selector: true, $settings: ()) {
  $s: map-merge($add-styles, $settings);

  // Grab the modifier map if it exists
  @if (map-has-key($input, 'modifiers')) {
    $input: map-get($input, 'modifiers');
  }

  // If an output is passed, re-map the input to the selected key.
  // Also, we don't want to output the default modifier class.
  @if ($key) {
    @each $name, $map in $input {
      @if ($key == $name) {
        $input: ($name: $map);
      }
    }
  } @else {
    $input: map-remove($input, 'default');
  }

  // Loop through our input modifiers
  @each $name, $map in $input {

    @if ($selector) {
      @if (map-has-key($map, 'selector')) {
        $selector: map-get($map, 'selector');
      } @else {
        $selector: '&.' + $name;
      }
      #{$selector} {
        @include add-styles($map, $settings);
      }
    } @else {
      @include add-styles($map, $settings);
    }

  }

}

// Add Float Modifiers
// Adds the float modifier classes to an element.
// @param $left
//   @type class name
//   @default $class-float-left
// @param $right
//   @type class name
//   @default $class-float-right
@mixin add-float-modifiers($left: $class-float-left, $right: $class-float-right) {
  @if ($left) {
    &.#{$left} {
      float: left;
    }
  }
  @if ($right) {
    &.#{$right} {
      float: right;
    }
  }
}

// Add Size
// Shorthand for adding width and height dimensions to an element. If you only
// pass in a width, the height will be set to equal the width and create a
// square. If either the width or height are unit-less, it defaults to pixels.
// @param $width
//   @type unit (number, pixel, percentage)
// @param $height
//   @type unit (number, pixel, percentage, false)
//   @default false -> $width
@mixin add-size(
    $width,
    $height : false
  ) {
  @if ($width != auto) {
    @if ($width != none) {
      @if unitless($width) {
        $width: 1px * $width;
      }
    }
  }
  @if ($height != auto) {
    @if ($height != none) {
      @if ($height != false) {
        @if unitless($height) {
          $height: 1px * $height;
        }
      } @else {
        $height: $width;
      }
    }
  }
  width: $width;
  height: $height;
}

// Vertical Center
// Centers an element vertically within its parent. Parent element may need to
// have transform-style set to `preserve-3d` to prevent half pixel bluring.
// @param $percent
//   @type unit (percentage)
//   @default 50%
@mixin add-vertical-center($percent: 50%) {
  position: relative;
  top: $percent;
  transform: translateY(-$percent);
}


// Scrollable
// Makes touch devices use momentum-based scrolling for the given element.
@mixin add-scrollable() {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
  transition: top linear 0.2s, bottom linear 0.2s;
}

// Add Triangle Base
// The base styles for creating CSS triangles
@mixin add-triangle-base() {
  content: '';
  display: inline-block;
  width: 0;
  height: 0;
  border: 0 none;
  border-style: solid;
  border-color: transparent;
}

// Add Triangle
// Uses the "0x0" element with borders trick to draw arrows.
// @param $size
//   @type unit (pixel, em, rem)
// @param $color
//   @type color
// @param $direction
//   @type string ('up', 'right', 'down', 'left', 'up-right', 'up-left',
//     'down-right', 'down-left')
//   @desc The direction that the triangle will point.
@mixin add-triangle( $size, $color, $direction ) {
  border-color: transparent;
  @if ($direction == 'up') {
    border-width: 0 $size $size $size;
    border-bottom-color: $color;
  } @else if ($direction == 'right') {
    border-width: $size 0 $size $size;
    border-left-color: $color;
  } @else if ($direction == 'down') {
    border-width: $size $size 0 $size;
    border-top-color: $color;
  } @else if ($direction == 'left') {
    border-width: $size $size $size 0;
    border-right-color: $color;
  } @else if ($direction == 'up right' or $direction == 'right up') {
    border-width: $size;
    border-top-color: $color;
    border-right-color: $color;
  } @else if ($direction == 'up left' or $direction == 'left up') {
    border-width: $size;
    border-top-color: $color;
    border-left-color: $color;
  } @else if ($direction == 'down right' or $direction == 'right down') {
    border-width: $size;
    border-bottom-color: $color;
    border-right-color: $color;
  } @else if ($direction == 'down left' or $direction == 'left down') {
    border-width: $size;
    border-bottom-color: $color;
    border-left-color: $color;
  } @else {
    @warn "#{$direction} is not a valid direction for @mixin triangle";
  }
}
