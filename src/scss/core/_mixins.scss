////////////////////////////////////////////////////////////////////////////////
// @General Mixins
////////////////////////////////////////////////////////////////////////////////

// Clearfix
// Allows you to apply a clearfix to an element that contains floats.
@mixin clearfix() {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}

// Remove Clearfix
// Removes the clearfix styles from an element. This is typically used when a
// clearfix is inherited on an element and you'd like it removed.
@mixin remove-clearfix() {
  &:after {
    content: none;
    display: none;
    clear: none;
  }
}

// Add Color
// A general add color mixin for creating multi-color component.
// @param $input
// @param $defaults
// @param $settings
@mixin add-color($input: (), $defaults: (), $settings: ()) {
  // Extend our input variable
  $i: map-extend($defaults, $input, true);
  // Extend our settings variable
  $s: map-merge((
    'output-base': true,
    'output-mods': true,
    'output-mods-base': true,
    'modifiers' : 'modifiers',
    'properties': (
      'color',
      'text-shadow',
      'background',
      'background-image',
      'background-repeat',
      'background-position',
      'background-color',
      'background-clip',
      'box-shadow',
      'border',
      'border-color',
      'border-width',
      'border-style',
      'border-radius',
      'transition',
      'transition-property',
      'transition-duration',
      'transition-timing-function',
    ),
    'pseudo-classes': (
      'hover',
      'focus',
      'active',
      'visited',
    )
  ), $settings);

  // Check if we should output base styles
  @if map-get($s, 'output-base') {
    // Loop through selected properties
    @each $prop in map-get($s, 'properties') {
      // Set property if it exists
      @if (map-has-key($i, $prop)) {
        #{$prop}: map-get($i, $prop);
      } // End @if property exists
    } // End @each properties
  } // End @if output-base

  // Loop through pseudo-classes
  @each $pseudo in map-get($s, 'pseudo-classes') {
    // Set pseudo-class if it exists
    @if (map-has-key($i, $pseudo)) {
      &:#{$pseudo} {
        // Loop through selected properties
        @each $prop in map-get($s, 'properties') {
          // Set property if it exists
          @if (map-has-key(map-get($i, $pseudo), $prop)) {
            #{$prop}: map-fetch($i, $pseudo, $prop);
          } // End @if property exists
        } // End @each properties
      } // Close &:#{$pseudo}
    } // End @if pseudo-classes exists
  } // End @each pseudo-classes

  // Check if we should output modifier styles
  @if map-get($s, 'output-mods') {
    // Check if modifiers exist
    @if (map-has-key($i, map-get($s, 'modifiers'))) {
      // Loop through and output modifiers
      @each $mod-name, $mod-map in map-get($i, map-get($s, 'modifiers')) {
        &.#{$mod-name} {
          // Check if we should output base modifier styles
          @if map-get($s, 'output-mods-base') {
            // Loop through selected properties
            @each $prop in map-get($s, 'properties') {
              // Set property if it exists
              @if (map-has-key($mod-map, $prop)) {
                #{$prop}: map-get($mod-map, $prop);
              } // End @if property exists
            } // End @each properties
          } // End @if output-mods-base

          // Loop through pseudo-classes
          @each $pseudo in map-get($s, 'pseudo-classes') {
            // Set pseudo-class if it exists
            @if (map-has-key($mod-map, $pseudo)) {
              &:#{$pseudo} {
                // Loop through selected properties
                @each $prop in map-get($s, 'properties') {
                  // Set property if it exists
                  @if (map-has-key(map-get($mod-map, $pseudo), $prop)) {
                    #{$prop}: map-fetch($mod-map, $pseudo, $prop);
                  } // End @if property exists
                } // End @each properties
              } // Close &:#{$pseudo}
            } // End @if pseudo-classes exists
          } // End @each pseudo-classes
        } // Close &.#{$mod-name}
      } // End @each modifiers
    } // End @if modifiers
  } // End @if output-mods
}

// Make Anchor
// Creates the base ancho styles using the $anchors map for defaults.
// @param $options
//   @type map
//   @default $anchors map
@mixin make-anchor($options: ()) {
  $o: map-extend($anchors, $options, true);

  color: map-get($o, 'color');
  border-bottom: map-get($o, 'border');
  border-color: map-get($o, 'border-color');
  text-decoration: map-get($o, 'text-decoration');

  &:hover {
    color: map-fetch($o, 'hover', 'color');
    border: map-fetch($o, 'hover', 'border');
    border-color: map-fetch($o, 'hover', 'border-color');
    text-decoration: map-fetch($o, 'hover', 'text-decoration');
  }
}

// Make Headings
// Creates the base styles for headings using the $headings map for defaults.
// @param $options
//   @type map
//   @default $headings map
@mixin make-headings($options: ()) {
  $o: map-extend($headings, $options, true);

  h1, h2, h3, h4, h5, h6,
  .h1, .h2, .h3, .h4, .h5, .h6 {
    margin: map-get($o, 'margin');
    font-family: map-get($o, 'font-family');
    font-weight: map-get($o, 'font-weight');
    line-height: map-get($o, 'line-height');
    color: map-get($o, 'color');

    @if (map-fetch($o, 'anchors', 'output') == true) {
      a {
        @include make-anchor(map-get($o, 'anchors'));
      }
    }
  }

  @each $heading, $size in map-get($o, 'scale') {
    #{$heading}, .#{$heading} {
      font-size: $size;
    }
  }
}

// Float Modifiers
// Adds the float modifier classes to an element.
// @param $left
//   @type class name
//   @default $class-float-left
// @param $right
//   @type class name
//   @default $class-float-right
@mixin float-modifiers($left: $class-float-left, $right: $class-float-right) {
  @if ($left) {
    &.#{$left} {
      float: left;
    }
  }
  @if ($right) {
    &.#{$right} {
      float: right;
    }
  }
}

// Size
// Shorthand for adding width and height dimensions to an element. If you only
// pass in a width, the height will be set to equal the width and create a
// square. If either the width or height are unit-less, it defaults to pixels.
// @param $width
//   @type unit (number, pixel, percentage)
// @param $height
//   @type unit (number, pixel, percentage, false)
//   @default false -> $width
@mixin size(
    $width,
    $height : false
  ) {
  @if ($width != auto) {
    @if ($width != none) {
      @if unitless($width) {
        $width: 1px * $width;
      }
    }
  }
  @if ($height != auto) {
    @if ($height != none) {
      @if ($height != false) {
        @if unitless($height) {
          $height: 1px * $height;
        }
      } @else {
        $height: $width;
      }
    }
  }
  width: $width;
  height: $height;
}

// Vertical Center
// Centers an element vertically within its parent. Parent element may need to
// have transform-style set to `preserve-3d` to prevent half pixel bluring.
// @param $percent
//   @type unit (percentage)
//   @default 50%
@mixin vertical-center($percent: 50%) {
  position: relative;
  top: $percent;
  transform: translateY(-$percent);
}


// Scrollable
// Makes touch devices use momentum-based scrolling for the given element.
@mixin scrollable() {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
  transition: top linear 0.2s, bottom linear 0.2s;
}

// Border Radius
// Define border radius shorthand mixins.
// @param $radius
//   @type unit (pixel, ems, percent)
@mixin border-top-radius( $radius : $border-radius ) {
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}
@mixin border-left-radius( $radius : $border-radius ) {
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-right-radius( $radius : $border-radius ) {
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}
@mixin border-bottom-radius( $radius : $border-radius ) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}

// Truncate Text
// Truncates text with an ellipsis. Element this is applied to must be block
// or inline-block.
// @param $display
//   @type display property (block, inline-block)
//   @default block
@mixin text-truncate( $display : block ) {
  @if ($display == inline-block or $display == block) {
    display: $display;
  }
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Hide text
// Hides text from an element. This is most commonly used as an image
// replacement technique for hiding text in an element to reveal a
// background image.
@mixin text-hide() {
  font-size: 0;
  line-height: 0;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

// Make Triangle Base
// The base styles for creating CSS triangles
@mixin make-triangle-base() {
  content: '';
  display: inline-block;
  width: 0;
  height: 0;
  border: 0 none;
  border-style: solid;
  border-color: transparent;
}

// Make Triangle
// Uses the "0x0" element with borders trick to draw arrows.
// @param $size
//   @type unit (pixel, em, rem)
// @param $color
//   @type color
// @param $direction
//   @type string ('up', 'right', 'down', 'left', 'up-right', 'up-left',
//     'down-right', 'down-left')
//   @desc The direction that the triangle will point.
@mixin make-triangle( $size, $color, $direction ) {
  border-color: transparent;
  @if ($direction == 'up') {
    border-width: 0 $size $size $size;
    border-bottom-color: $color;
  } @else if ($direction == 'right') {
    border-width: $size 0 $size $size;
    border-left-color: $color;
  } @else if ($direction == 'down') {
    border-width: $size $size 0 $size;
    border-top-color: $color;
  } @else if ($direction == 'left') {
    border-width: $size $size $size 0;
    border-right-color: $color;
  } @else if ($direction == 'up right' or $direction == 'right up') {
    border-width: $size;
    border-top-color: $color;
    border-right-color: $color;
  } @else if ($direction == 'up left' or $direction == 'left up') {
    border-width: $size;
    border-top-color: $color;
    border-left-color: $color;
  } @else if ($direction == 'down right' or $direction == 'right down') {
    border-width: $size;
    border-bottom-color: $color;
    border-right-color: $color;
  } @else if ($direction == 'down left' or $direction == 'left down') {
    border-width: $size;
    border-bottom-color: $color;
    border-left-color: $color;
  } @else {
    @warn "#{$direction} is not a valid direction for @mixin triangle";
  }
}
