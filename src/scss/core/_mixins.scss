////////////////////////////////////////////////////////////////////////////////
// @ Utility
////////////////////////////////////////////////////////////////////////////////

// Size Mixin
// Shorthand for adding width and height sizing to an element.
// 
// @param: $width
//   type: unit (number, pixel, percentage)
//
// @param: $height
//   type: unit (pixel, percentage, false)
//   default: false -> $width
@mixin size( 
    $width,
    $height : false
  ) {

  @if unitless($width) {
    $width: 1px * $width;
  }
  
  @if ($height != false) {
    @if unitless($height) {
      $height: 1px * $height;
    }
  } @else {
    $height: $width;
  }
  
  width: $width;
  height: $height;
}

// Clearfix Mixins
// Allows for clearfixing by adding as mixin or as class.
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Remove Clearfix
@mixin remove-clearfix {
  &:after {
    content: none;
    display: none;
    clear: none;
  }
}

// Scrollable
// Makes things scrollable in a sexy way
@mixin scrollable {
  overflow-y: scroll;
  -webkit-overflow-scrolling: touch;
  @include transition(
    top linear 0.2s,
    bottom linear 0.2s
  );
}

////////////////////////////////////////////////////////////////////////////////
// @ CSS3 Helpers
////////////////////////////////////////////////////////////////////////////////

// Box Sizing
//
// @param: $box-sizing
//   type: box-sizing value (border-box, none)
//   default: $box-sizing
@mixin box-sizing( $box-sizing : $box-sizing ) {
  -moz-box-sizing: $box-sizing;
  box-sizing: $box-sizing;
}

// Box Shadows
//
// @param: $shadow
//   type: box-shadow value ([horizontal offset] [vertical offset] [blur radius] [spread radius] [color])
//   default: $box-shadow
@mixin box-shadow( $shadow... ) {
  
  @if length($shadow) == 0 {
    $shadow: $box-shadow;
  }
  
  box-shadow: $shadow;
}

// Border Radius
// Border radius shorthand with defaults
// 
// @param: $radius
//   type: unit (pixel, percent)
@mixin border-radius( $radius : $border-radius ) {
  border-radius: $radius;
}
@mixin border-radius-top( $radius : $border-radius ) {
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}
@mixin border-radius-top-left( $radius : $border-radius ) {
  border-top-left-radius: $radius;
}
@mixin border-radius-top-right( $radius : $border-radius ) {
  border-top-right-radius: $radius;
}
@mixin border-radius-bottom( $radius : $border-radius ) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-radius-bottom-left( $radius : $border-radius ) {
  border-bottom-left-radius: $radius;
}
@mixin border-radius-bottom-right( $radius : $border-radius ) {
  border-bottom-right-radius: $radius;
}
@mixin border-radius-left( $radius : $border-radius ) {
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}
@mixin border-radius-left-top( $radius : $border-radius ) {
  border-top-left-radius: $radius;
}
@mixin border-radius-left-bottom( $radius : $border-radius ) {
  border-bottom-left-radius: $radius;
}
@mixin border-radius-right( $radius : $border-radius ) {
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}
@mixin border-radius-right-top( $radius : $border-radius ) {
  border-top-right-radius: $radius;
}
@mixin border-radius-right-bottom( $radius : $border-radius ) {
  border-bottom-right-radius: $radius;
}

// Rotate
//
// @param: $deg
//   type: unit (degree)
@mixin rotate( $deg ) {
  -webkit-transform: rotate($deg);
  -ms-transform: rotate($deg);
  transform: rotate($deg);
}

// Transitions
// 
// @param: $transition
//   type: transition value ([transition-property] [transition-duration] [transition-timing-function] [transition-delay])
//   default: $transition
@mixin transition( $trans... ) {
  
  @if length($trans) == 0 {
    $trans: $transition;
  }
  
  -webkit-transition: $trans;
  transition: $trans;
}

// Transitions Property
// 
// @param: $transition-property
//   type: property name
//   default: $transition-property
@mixin transition-property( $transition-property : $transition-property ) {
  -webkit-transition-property: $transition-property;
  transition-property: $transition-property;
}

// Transitions Duration
// 
// @param: $transition-duration
//   type: time value (seconds, milliseconds)
//   default: $transition-duration
@mixin transition-duration( $transition-duration : $transition-duration ) {
  -webkit-transition-duration: $transition-duration;
  transition-duration: $transition-duration;
}

// Transitions Timing Function
// 
// @param: $transition-timing-function
//   type: predefined keyword values (linear, ease, ease-in, ease-out, ease-in-out, step-start, step-end)
//   default: $transition-timing-function
@mixin transition-timing-function( $transition-timing-function : $transition-timing-function ) {
  -webkit-transition-timing-function: $transition-timing-function;
  transition-timing-function: $transition-timing-function;
}

// Transitions Delay
// 
// @param: $transition-delay
//   type: time value (seconds, milliseconds)
//   default: $transition-delay
@mixin transition-delay( $transition-delay : $transition-delay ) {
  -webkit-transition-delay: $transition-delay;
  transition-delay: $transition-delay;
}

// Keyframes
//
// @param: $name
//   type: animation name
//
// @param: @content (passed in brackets)
//   type: style block
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin animation( $animation... ) {
  -webkit-animation: $animation;
  animation: $animation;
}
@mixin animation-name( $name ) {
  -webkit-animation-name: $name;
  animation-name: $name;
}
@mixin animation-duration( $duration ) {
  -webkit-animation-duration: $duration;
  animation-duration: $duration;
}
@mixin animation-timing-function( $timing-function ) {
  -webkit-animation-timing-function: $timing-function;
  animation-timing-function: $timing-function;
}
@mixin animation-delay( $delay ) {
  -webkit-animation-delay: $delay;
  animation-delay: $delay;
}
@mixin animation-iteration-count( $iteration-count ) {
  -webkit-animation-iteration-count: $iteration-count;
  animation-iteration-count: $iteration-count;
}
@mixin animation-direction( $direction ) {
  -webkit-animation-direction: $direction;
  animation-direction: $direction;
}

// Horizontal Gradient
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $ge
//   type: color
//   default: $gradient-end
@mixin gradient-horizontal(
    $gs : $gradient-start,
    $ge : $gradient-end
  ) {
  background-color: $ge;
  background-image: -webkit-linear-gradient(left, $gs, $ge);
  background-image: linear-gradient(left, $gs, $ge);
  background-repeat: repeat-y;
}

// Vertical Gradient
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $ge
//   type: color
//   default: $gradient-end
@mixin gradient-vertical(
    $gs : $gradient-start,
    $ge : $gradient-end
  ) {
  background-color: $ge;
  background-image: -webkit-linear-gradient(top, $gs, $ge);
  background-image: linear-gradient(top, $gs, $ge);
  background-repeat: repeat-x;
}

// Directional Gradient
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $ge
//   type: color
//   default: $gradient-end
//
// @param: $deg
//   type: unit (degree)
//   default: $gradient-deg
@mixin gradient-directional(
    $gs : $gradient-start,
    $ge : $gradient-end,
    $deg : $gradient-deg
  ) {
  background-color: $ge;
  background-image: -webkit-linear-gradient($deg, $gs, $ge);
  background-image: linear-gradient($deg, $gs, $ge);
  background-repeat: repeat-x;
}

// Horizontal Gradient with Three Colors
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $gm
//   type: color
//   default: $gradient-middle
//
// @param: $stop
//   type: unit (pixel, percentage)
//   default: $gradient-stop
//
// @param: $ge
//   type: color
//   default: $gradient-end
@mixin gradient-horizontal-three-colors(
    $gs : $gradient-start,
    $gm : $gradient-middle,
    $stop : $gradient-stop,
    $ge : $gradient-end
  ) {
  background-color: mix($gs, $ge, 50%);
  background-image: -webkit-linear-gradient(left, $gs, $gm $stop, $ge);
  background-image: linear-gradient(left, $gs, $gm $stop, $ge);
  background-repeat: no-repeat;
}

// Vertical Gradient with Three Colors
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $gm
//   type: color
//   default: $gradient-middle
//
// @param: $stop
//   type: unit (pixel, percentage)
//   default: $gradient-stop
//
// @param: $ge
//   type: color
//   default: $gradient-end
@mixin gradient-vertical-three-colors(
    $gs : $gradient-start,
    $gm : $gradient-middle,
    $stop : $gradient-stop,
    $ge : $gradient-end
  ) {
  background-color: mix($gs, $ge, 50%);
  background-image: -webkit-linear-gradient(top, $gs, $gm $stop, $ge);
  background-image: linear-gradient(top, $gs, $gm $stop, $ge);
  background-repeat: no-repeat;
}

// Directional Gradient with Three Colors
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $gm
//   type: color
//   default: $gradient-middle
//
// @param: $stop
//   type: unit (pixel, percentage)
//   default: $gradient-stop
//
// @param: $ge
//   type: color
//   default: $gradient-end
//
// @param: $deg
//   type: unit (degree)
//   default: $gradient-deg
@mixin gradient-directional-three-colors(
    $gs : $gradient-start,
    $gm : $gradient-middle,
    $stop : $gradient-stop,
    $ge : $gradient-end,
    $deg : $gradient-deg
  ) {
  background-color: mix($gs, $ge, 50%);
  background-image: -webkit-linear-gradient($deg, $gs, $gm $stop, $ge);
  background-image: linear-gradient($deg, $gs, $gm $stop, $ge);
  background-repeat: no-repeat;
}

// Radial Gradients
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $ge
//   type: color
//   default: $gradient-end
@mixin gradient-radial(
    $inner : $gradient-start,
    $outer : $gradient-end
  ) {
  background-color: $outer;
  background-image: -webkit-radial-gradient(circle, $inner, $outer);
  background-image: radial-gradient(circle, $inner, $outer);
  background-repeat: no-repeat;
}

// Striped Gradients
//
// @param: $gs
//   type: color
//   default: $gradient-start
//
// @param: $ge
//   type: color
//   default: $gradient-end
//
// @param: $deg
//   type: unit (degree)
//   default: $gradient-deg
@mixin gradient-striped(
    $color : $gradient-start,
    $shade : $gradient-shade,
    $deg : $gradient-deg
  ) {
  background-color: $color;
  background-image: -webkit-linear-gradient($deg, $shade 25%, transparent 25%, transparent 50%, $shade 50%, $shade 75%, transparent 75%, transparent);
  background-image: linear-gradient($deg, $shade 25%, transparent 25%, transparent 50%, $shade 50%, $shade 75%, transparent 75%, transparent);
}

////////////////////////////////////////////////////////////////////////////////
// @ Typography
////////////////////////////////////////////////////////////////////////////////

// Hide text
// Image replacement trick that hides text.
@mixin text-hide {
  font-size: 0;
  line-height: 0;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

// Truncate Text
// Truncates text with an ellipsis. Element applied must be `block` or `inline-block`
@mixin text-truncate( $display : block ) {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  
  @if ($display == inline-block or $display == block) {
    display: $display;
  }
}

// Anchor Styles
// Builds the base styles for anchor tags
@mixin anchor {
  color: $color-link;
  text-decoration: none;
  border-bottom: 1px solid rgba($black, 0.1);
  @include transition(
    color $transition-timing-function $transition-duration,
    border-color $transition-timing-function $transition-duration
  );
  
  &:hover {
    color: $color-link-hover;
    cursor: pointer;
    border-color: rgba($black, 0.25);
  }
}

// Uppercase
@mixin uppercase( $letter-spacing : $letter-spacing ) {
  text-transform: uppercase;
  letter-spacing: $letter-spacing;
}

// Lowercase
@mixin lowercase( $letter-spacing : 0) {
  text-transform: lowercase;
  letter-spacing: $letter-spacing;
}

// Reset Case
@mixin resetcase {
  text-transform: none;
  letter-spacing: 0;
}

// Sans Font
// Outputs styles for sans-serif font stack
@mixin font-sans(
    $base-font-size : $base-font-size,
    $base-line-height : $base-line-height
  ) {
  font-family: $font-family-sans;
  font-size: $base-font-size;
  line-height: $base-line-height;
}

// Serif Font
// Outputs styles for serif font stack
@mixin font-serif(
    $base-font-size : $base-font-size,
    $base-line-height : $base-line-height
  ) {
  font-family: $font-family-serif;
  font-size: $base-font-size;
  line-height: $base-line-height;
}

// Mono Font
// Outputs styles for monospaced font stack
@mixin font-mono(
    $base-font-size : $base-font-size,
    $base-line-height : $base-line-height
  ) {
  font-family: $font-family-mono;
  font-size: $base-font-size;
  line-height: $base-line-height;
}

////////////////////////////////////////////////////////////////////////////////
// @ UI Helpers
////////////////////////////////////////////////////////////////////////////////

// Arrows
// Uses the "0x0" element with borders trick to draw arrows.
@mixin triangle(
    $size,
    $color,
    $direction
  ) {
  content: "";
  display: inline-block;
  width: 0;
  height: 0;
  border: 0 none;
  border-style: solid;
  border-color: transparent;

  @if ($direction == up) {
    border-width: 0 $size $size $size;
    border-bottom-color: $color;
  }
  @if ($direction == right) {
    border-width: $size 0 $size $size;
    border-left-color: $color;
  }
  @if ($direction == down) {
    border-width: $size $size 0 $size;
    border-top-color: $color;
  }
  @if ($direction == left) {
    border-width: $size $size $size 0;
    border-right-color: $color;
  }
  
  @if ($direction == up-right or $direction == right-up) {
    border-width: $sizeh;
    border-top-color: $color;
    border-right-color: $color;
  }
  @if ($direction == up-left or $direction == left-up) {
    border-width: $sizeh;
    border-top-color: $color;
    border-left-color: $color;
  }
  @if ($direction == down-right or $direction == right-down) {
    border-width: $sizeh;
    border-bottom-color: $color;
    border-right-color: $color;
  }
  @if ($direction == down-left or $direction == left-down) {
    border-width: $sizeh;
    border-bottom-color: $color;
    border-left-color: $color;
  }
}

// Console
// Let's you output a LESS variable in the browser.
// Requires that `<div id="console"></div>` be somewhere in the DOM
@mixin console(
    $value,
    $position : 'right',
    $index : 100
  ) {

  #console {
    position: fixed;
    @if ($position == 'left') or ($position == 'top left') or ($position == 'left top') {
      top: 0;
      left: 0;
    } @else if ($position == 'right') or ($position == 'top right') or ($position == 'right top') {
      top: 0;
      right: 0;
    } @else if ($position == 'bottom left') or ($position == 'left bottom') {
      bottom: 0;
      left: 0;
    } @else if ($position == 'bottom right') or ($position == 'right bottom') {
      bottom: 0;
      right: 0;
    } @else {
      top: 0;
      right: 0;
    }
    z-index: $index;
    @include mono-font(12px, 20px);
    
    &:before, &:after {
      display: block;
      padding: 5px 15px;
      float: left;
    }
    
    &:before {
      content: "Console:";
      background: $blue;
      color: $white;
      
      @if ($position == right) {
        @include border-radius-bottom-left();
      } @else if ($position == bottom-right) {
        @include border-radius-top-left();
      }
    }
    
    &:after {
      content: "#{$value}";
      background: $gray-lighter;
      color: $color-dark;
        
      @if ($position == left) {
        @include border-radius-bottom-right();
      }  @else if ($position == bottom-left) {
        @include border-radius-top-right();
      }
    }
  }
}
