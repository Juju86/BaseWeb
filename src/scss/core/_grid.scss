////////////////////////////////////////////////////////////////////////////////
// @Grid Functions
////////////////////////////////////////////////////////////////////////////////

// Column Width
// A function that returns the width of a column span.
// @param $index
//   @type integer
//   @desc The number of column span you want returned.
// @param $options
//   @type map
//   @default $grid map
// @return unit (pixel, percentage)
@function column_width($index, $options: ()) {
  $o: map-merge( $grid, $options);
  $column-width: (map-get($o, 'total-width') - (map-get($o, 'gutter-width') * (map-get($o, 'columns') - 1))) / map-get($o, 'columns');
  @return ($column-width * $index) + (map-get($o, 'gutter-width') * ($index - 1));
}

// Spacing Width
// A function that returns the spacing of a column span.
// @param $index
//   @type integer
//   @desc The number of column spacing you want returned.
// @param $options
//   @type map
//   @default $grid map
// @return unit (pixel, percentage)
@function spacing_width($index, $options: ()) {
  $o: map-merge( $grid, $options);
  $column-width : column_width( 1, $o );
  @return ($column-width * $index) + (map-get($o, 'gutter-width') * $index);
}

////////////////////////////////////////////////////////////////////////////////
// @Semantic Grid Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Container
// Outputs all the styles needed to make an element a grid container.
// @param $options
//   @type map
//   @default $grid map
@mixin make-container($options: ()) {
  $o: map-merge( $grid, $options);
  width: map-get($o, 'total-width');
  @if (map-get($o, 'container-min-width') != none) {
    min-width: map-get($o, 'container-min-width');
  }
  @if (map-get($o, 'container-max-width') != none) {
    max-width: map-get($o, 'container-max-width');
  }
  margin: 0 map-get($o, 'container-margin');
  padding: 0 map-get($o, 'container-padding');
  
  @if (map-get($o, 'class-container') != none) {
    &.#{map-get($o, 'class-container')}-float-left {
      float: left;
    }
    &.#{map-get($o, 'class-container')}-float-right {
      float: right;
    }
    &.#{map-get($o, 'class-container')}-no-padding {
      padding: 0;
    }
    &.#{map-get($o, 'class-container')}-no-margin {
      margin: 0;
    }
  }
  @include clearfix();
  @if ($global-box-sizing != border-box) {
    @include box-sizing( border-box );
  }
  @content;
}

// Make Row
// Outputs all the styles needed to make an element a grid row.
// @param $options
//   @type map
//   @default $grid map
@mixin make-row($options: ()) {
  $o: map-merge( $grid, $options);
  margin-left: -(map-get($o, 'inner-gutter-width') / 2);
  margin-right: -(map-get($o, 'inner-gutter-width') / 2);
  @include clearfix();
  @if (map-get($o, 'class-row') != none) {
    &.#{map-get($o, 'class-row')}-center {
      text-align: center;
      > * {
        font-size: 0;
        line-height: 0;
      }
      .#{map-get($o, 'class-column')} {
        float: none;
        display: inline-block;
        @include clearfix();
        font-size: $base-font-size;
        line-height: $base-line-height;
        text-align: left;
      }
    }
  }
  @content;
}

// Make Base Column
// Creates the base styles for a column but excludes setting the width.
// @param $options
//   @type map
//   @default $grid map
@mixin make-column-base($options: ()) {
  $o: map-merge( $grid, $options);
  @if (map-get($o, 'total-width') == mobile) {
    width: 100%;
    margin: 0;
    padding: 0;
  } @else {
    margin-left: map-get($o, 'gutter-width');
    padding-left: (map-get($o, 'inner-gutter-width') / 2);
    padding-right: (map-get($o, 'inner-gutter-width') / 2);
    
    @if (map-get($o, 'class-column') != none) {
      &.#{map-get($o, 'class-column')}-no-gutter {
        margin-left: 0;
      }
    }
    &:first-child {
      margin-left: 0;
    }
  }
  float: left;
  min-height: 1px;
  &.align-right {
    float: right;
  }
  &.align-left {
    float: left;
  }
  @if ($global-box-sizing != border-box) {
    @include box-sizing( border-box );
  }
  @content;
}

// Make Column
// Creates all the styles for a column and sets its width.
// @param $index
//   @type integer
//   @desc The number of column span you want set.
// @param $options
//   @type map
//   @default $grid map
@mixin make-column($index, $options: ()) {
  $o: map-merge( $grid, $options);
  @include make-column-base($o);
  width: column_width($index, $o);
  @content;
}

// Make Prefix
// Creates the base styles for a column and sets its width.
// @param $index
//   @type integer
//   @desc The number of column prefix spacing you want set.
// @param $options
//   @type map
//   @default $grid map
@mixin give-prefix($index, $options: ()) {
  $o: map-merge( $grid, $options);
  margin-left: (spacing_width($index, $o) + map-get($o, 'gutter-width'));
  &:first-child {
    margin-left: spacing_width($index, $o);
  }
  @content;
}

// Make Suffix
// Creates the base styles for a spacing suffix.
// @param $index
//   @type integer
//   @desc The number of column suffix spacing you want set.
// @param $options
//   @type map
//   @default $grid map
@mixin give-suffix($index, $options: ()) {
  $o: map-merge( $grid, $options);
  margin-right: spacing_width($index, $o);
  @content;
}

////////////////////////////////////////////////////////////////////////////////
// @Class Based Grid System Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Mobile Grid System
// Outputs the styles for a mobile grid system where all columns are stacked.
// @param $options
//   @type map
//   @default $grid map
@mixin build-mobile-grid-system($options: ()) {
  $o: map-merge( $grid, $options);
  .#{map-get($o, 'class-container')} {
    @include make-container( ('total-width': 100%) );
  }
  .#{map-get($o, 'class-row')} {
    @include make-row() {
      margin-left: 0;
      margin-right: 0;
    };
  }
  .#{map-get($o, 'class-column')} {
    @include make-column-base(('total-width': mobile));
  }
  @if (map-get($o, 'class-prefix') != none) {
    .#{map-get($o, 'class-prefix')} {
      margin-left: 0;
      &:first-child {
        margin-left: 0;
      }
    }
  }
  @if (map-get($o, 'class-suffix') != none) {
    .#{map-get($o, 'class-suffix')} {
      margin-right: 0;
    }
  }
  @content;
}

// Build Grid System
// Outputs all the classes and styles for the class based grid system.
// @param $options
//   @type map
//   @default $grid map
@mixin build-grid-system($options: ()) {
  $o: map-merge( $grid, $options);
  .#{map-get($o, 'class-container')} {
    @include make-container($o);
  }
  .#{map-get($o, 'class-row')} {
    @include make-row();
  }
  .#{map-get($o, 'class-column')} {
    @include make-column-base($o);
  }
  @for $i from 1 through map-get($o, 'columns') {
    .#{map-get($o, 'class-column')}-#{$i} {
      width: column_width( $i, $o );
    }
  }
  @if (map-get($o, 'class-prefix') != none) {
    @for $i from 1 through map-get($o, 'columns') {    
      .#{map-get($o, 'class-prefix')}-#{$i} {
        @include give-prefix( $i, $o );
      }
    }
  }
  @if (map-get($o, 'class-suffix') != none) {
    @for $i from 1 through map-get($o, 'columns') {  
      .#{map-get($o, 'class-suffix')}-#{$i} {
        @include give-suffix( $i, $o );
      }
    }
  }
  @content;
}
