////////////////////////////////////////////////////////////////////////////////
// Semantic Grid Mixins
////////////////////////////////////////////////////////////////////////////////

// Make container
//
// @param total width of grid
// @param container padding
// @param max width, applied to container element
.make-container( @-total-width : @grid-total-width, @-container-padding : @container-padding, @-max-width : @container-max-width, @-min-width : @container-min-width ) {
  width: @-total-width;
  min-width: @-min-width;
  max-width: @-max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: @-container-padding;
  padding-right: @-container-padding;
  .clearfix();
}
// When is fluid
.make-container( @-total-width : @grid-total-width, @-container-padding : @container-padding, @-max-width : @container-max-width, @-min-width : @container-min-width ) when ( ispercentage(@-total-width) ) {
  .box-sizing( border-box );
}
// When is fixed
.make-container( @-total-width : @grid-total-width, @-container-padding : @container-padding, @-max-width : @container-max-width, @-min-width : @container-min-width ) when ( ispixel(@-total-width) ) {
  .box-sizing( content-box );
}

// Make Row
.make-row() {
  .clearfix();
}

// Make Column Mobile
.make-column-mobile() {
  float: left;
  width: 100%;
  min-height: 1px;
  padding-left: 0;
  padding-right: 0;
  .box-sizing( border-box );
}

// Make Column Base
//
// @param gutter width
.make-column-base( @-gutter-width ) {
  float: left;
  min-height: 1px;
  margin-left: @-gutter-width;
  .box-sizing( content-box );
  
  &:first-child {
    margin-left: 0;
  }
}

// Make Column Span
//
// @param number of columns to occupy
// @param total width of grid
// @param gutter width
// @param total number of columns in grid system
.make-column-span( @-index, @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width, @-columns : @grid-columns ) {
  @-column-width: (( @-total-width - ( @-gutter-width * ( @-columns - 1 ) ) ) / @-columns);
  width: ((@-column-width * @-index) + (@-gutter-width * (@-index - 1)));
}

// Make Column
//
// @param number of columns to occupy
// @param total width of grid
// @param gutter width
// @param total number of columns in grid system
.make-column( @-index, @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width, @-columns : @grid-columns ) {
  .make-column-base( @-gutter-width );
  .make-column-span( @-index, @-total-width, @-gutter-width, @-columns );
}

// Make Prefix
//
// @param number of columns to occupy
// @param total width of grid
// @param gutter width
// @param total number of columns in grid system
.make-prefix( @-index, @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width, @-columns : @grid-columns ) {
  @-column-width: (( @-total-width - ( @-gutter-width * ( @-columns - 1 ) ) ) / @-columns);
  
  @spacing : ((@-column-width * @-columns) + (@-gutter-width * @-columns));
  margin-left: (@spacing + @-gutter-width);
  &:first-child {
    margin-left: @spacing;
  }
}

// Make Suffix
//
// @param number of columns to occupy
// @param total width of grid
// @param gutter width
// @param total number of columns in grid system
.make-suffix( @-index, @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width, @-columns : @grid-columns ) {
  margin-right: ((@-column-width * @-columns) + (@-gutter-width * @-columns));
}

////////////////////////////////////////////////////////////////////////////////
// Class Based Grid System Mixins
////////////////////////////////////////////////////////////////////////////////

// Make Mobile Grid System
// Outputs the styles for a mobile grid system where all columns are stacked
.build-mobile-grid-system() {

  .@{class-container} {
    .make-container( 100% );
  }
  
  .@{class-row} {
    .make-row();
  }
  
  .@{class-column} {
    .make-column-mobile();
  }
  
}

// Build Grid System
// Outputs all the classes and styles for the class based grid system
//
// @param total width of grid
// @param gutter width
// @param total number of columns in grid system
// @param container padding
// @param max width, applied to container element
.build-grid-system( @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width, @-columns : @grid-columns, @-container-padding : @container-padding, @-max-width : @container-max-width, @-min-width : @container-min-width ) {
  
  .@{class-container} {
    .make-container( @-total-width, @-container-padding, @-max-width, @-min-width );
  }
  
  .@{class-row} {
    .make-row();
  }
  
  .@{class-column} {
    .make-column-base( @-gutter-width );
  }
  
  // Calculate column widths
  @-column-width: (( @-total-width - ( @-gutter-width * ( @-columns - 1 ) ) ) / @-columns);
  
  // Build the column classes
  .build-X (@index) when (@index > 0) {
    .@{class-column}-@{index} { .build-(@index); }
    .build-X(@index - 1);
  }
  .build-(@columns) {
    width: ((@-column-width * @columns) + (@-gutter-width * (@columns - 1)));
  }
  .build-X (@-columns);
  
  // Build the prefix classes
  .build-prefix-X (@index) when (@index > 0) {
    .@{class-prefix}-@{index} { .build-prefix-(@index); }
    .build-prefix-X(@index - 1);
  }
  .build-prefix-(@columns) {
    @spacing : ((@-column-width * @columns) + (@-gutter-width * @columns));
    margin-left: (@spacing + @-gutter-width);
    &:first-child {
      margin-left: @spacing;
    }
  }
  .build-prefix-X (@-columns);
  
  // Build the prefix classes
  .build-suffix-X (@index) when (@index > 0) {
    .@{class-suffix}-@{index} { .build-suffix-(@index); }
    .build-suffix-X(@index - 1);
  }
  .build-suffix-(@columns) {
    margin-right: ((@-column-width * @columns) + (@-gutter-width * @columns));
  }
  .build-suffix-X (@-columns);
  
}
// When is fluid
.build-grid-system( @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width, @-columns : @grid-columns, @-container-padding : @container-padding, @-max-width : @container-max-width, @-min-width : @container-min-width ) when ( ispercentage(@-total-width) ) {
  .@{class-container} {
    .box-sizing( border-box );
  }
}
// When is fixed
.build-grid-system( @-total-width : @grid-total-width, @-gutter-width : @grid-gutter-width, @-columns : @grid-columns, @-container-padding : @container-padding, @-max-width : @container-max-width, @-min-width : @container-min-width ) when ( ispixel(@-total-width) ) {
  .@{class-container} {
    .box-sizing( content-box );
  }
}

/*==============================================================================
  Base Grid System
==============================================================================*/

.build-mobile-grid-system();

////////////////////////////////////////////////////////////////////////////////
// Grid System Assignment
////////////////////////////////////////////////////////////////////////////////

#responsive {
  .tablet() {
    .build-grid-system();
  }
}
